{
  "nickname": "INFO3_BENDINI",
  "exercises": {
    "1.1_arith": {
      "grade": 100,
      "solution": "let square x =\n  x*x;;\n\nlet perimeter r =\n  let pi=3.1415927 in r*.2.00*.pi;;\n\nlet div n m =\n  float_of_int n /. float_of_int m;;  \n\n\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 :"
            },
            {
              "text": "square",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "square",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square -4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "16",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square -3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "9",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square -3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "9",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square -1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square -5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "25",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square -2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "perimeter",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "perimeter",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter 4.20967937414580362",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "26.4501959823140496",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter 4.46750304546423571",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "28.0701499097164202",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter 0.517262652296672343",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3.25005714487572783",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter 1.92780154809107263",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "12.1127345410632259",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter -3.99864627483686919",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-25.124235893819403",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter -1.22369078564848355",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-7.68867607850108126",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter 3.76810880036287976",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "23.6757262000515603",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter -2.89718742591787892",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-18.2035657355907965",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter 1.71421015780313901",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "10.7707002360403781",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter 4.64642209428790487",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "29.1943314650671866",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 : "
            },
            {
              "text": "div",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "div",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div 0 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "nan",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div -4 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-4.",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div 3 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1.",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div -5 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5.",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div -1 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "neg_infinity",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div 4 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1.33333333333333326",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div 3 -3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-1.",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div 4 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2.",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div -3 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-3.",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div -3 -2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1.5",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1632121494.891048
    },
    "1.2_string": {
      "grade": 100,
      "solution": "let bis s =\n  s^s;;\n\nlet times8 s = \n  let s1=s^s in \n  let s2=s1^s1 in \n  let s3=s2^s2 in s3;;\n  \nlet times8_bis s =\n  bis(bis(bis s));;\n",
      "report": [
        {
          "section": [
            {
              "text": "Exercise 1: "
            },
            {
              "text": "bis",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "bis",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \"\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \"4456 #, , -OCP\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"4456 #, , -OCP4456 #, , -OCP\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \"OCPbaOCaml#ba 4456, \"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"OCPbaOCaml#ba 4456, OCPbaOCaml#ba 4456, \"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \"////// OCaml, 4456OCaml\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"////// OCaml, 4456OCaml////// OCaml, 4456OCaml\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \"be\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"bebe\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \" , OCP// OCaml#ba \"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\" , OCP// OCaml#ba  , OCP// OCaml#ba \"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \"OCaml//OCaml, ////OCaml\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"OCaml//OCaml, ////OCamlOCaml//OCaml, ////OCaml\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \"\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \"\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \"be\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"bebe\"",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Exercise 2: "
            },
            {
              "text": "times8",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "times8",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \"\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \"OCaml//\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"OCaml//OCaml//OCaml//OCaml//OCaml//OCaml//OCaml//OCaml//\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \"//ba, OCPOCPba be \"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"//ba, OCPOCPba be //ba, OCPOCPba be //ba, OCPOCPba be //ba, OCPOCPba be //ba, OCPOCPba be //ba, OCPOCPba be //ba, OCPOCPba be //ba, OCPOCPba be \"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \"// # -\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"// # -// # -// # -// # -// # -// # -// # -// # -\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \"//,  4456-\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"//,  4456-//,  4456-//,  4456-//,  4456-//,  4456-//,  4456-//,  4456-//,  4456-\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \"4456-OCaml4456-OCP4456\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"4456-OCaml4456-OCP44564456-OCaml4456-OCP44564456-OCaml4456-OCP44564456-OCaml4456-OCP44564456-OCaml4456-OCP44564456-OCaml4456-OCP44564456-OCaml4456-OCP44564456-OCaml4456-OCP4456\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \"44564456ba\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"44564456ba44564456ba44564456ba44564456ba44564456ba44564456ba44564456ba44564456ba\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \"-be4456\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"-be4456-be4456-be4456-be4456-be4456-be4456-be4456-be4456\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \"4456beOCaml-OCP\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"4456beOCaml-OCP4456beOCaml-OCP4456beOCaml-OCP4456beOCaml-OCP4456beOCaml-OCP4456beOCaml-OCP4456beOCaml-OCP4456beOCaml-OCP\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \"4456//be, \"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"4456//be, 4456//be, 4456//be, 4456//be, 4456//be, 4456//be, 4456//be, 4456//be, \"",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Exercise 3: "
            },
            {
              "text": "times8_bis",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "times8_bis",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \"\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \"\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \", be\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\", be, be, be, be, be, be, be, be\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \"\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \"OCPOCPOCP\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"OCPOCPOCPOCPOCPOCPOCPOCPOCPOCPOCPOCPOCPOCPOCPOCPOCPOCPOCPOCPOCPOCPOCPOCP\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \"4456OCP\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"4456OCP4456OCP4456OCP4456OCP4456OCP4456OCP4456OCP4456OCP\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \"4456OCPbaOCaml//#ba\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"4456OCPbaOCaml//#ba4456OCPbaOCaml//#ba4456OCPbaOCaml//#ba4456OCPbaOCaml//#ba4456OCPbaOCaml//#ba4456OCPbaOCaml//#ba4456OCPbaOCaml//#ba4456OCPbaOCaml//#ba\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \"4456\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"44564456445644564456445644564456\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \" \"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"        \"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \"4456 - 4456////#\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"4456 - 4456////#4456 - 4456////#4456 - 4456////#4456 - 4456////#4456 - 4456////#4456 - 4456////#4456 - 4456////#4456 - 4456////#\"",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1632123122.407183
    },
    "1.3_bool": {
      "grade": 100,
      "solution": "let is_zero x =\n  if x=0 then true\n  else false;;\n\nlet msg_zero x =\n  if x=0 then \"zero\" \n  else \"not zero\";;  \n\nlet my_max a b =\n  if a>=b then a\n  else b;;\n\nlet max_triple a b c =\n  max(max a b ) c;;\n\nlet max_quadruple a b c d =\n  max (max a b) (max c d);;\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "is_zero",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "is_zero",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_zero 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_zero 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "msg_zero",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "msg_zero",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero -3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"not zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"not zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"not zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero -1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"not zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero -2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"not zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero -3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"not zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero -5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"not zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"not zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero -3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"not zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "my_max",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "my_max",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max 0 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max 1 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max 4 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max 4 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max -1 -3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max -5 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max 2 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max -1 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max 1 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max 4 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "max_triple",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "max_triple",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 37 40 43",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "43",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 38 37 40",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "40",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 41 46 44",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "46",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 38 41 42",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "42",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 37 41 40",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "41",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 37 37 46",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "46",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 37 44 42",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "44",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 40 39 37",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "40",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 38 43 42",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "43",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 41 38 37",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "41",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "max_quadruple",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "max_quadruple",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple 0 -4 -3 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple 0 0 -3 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple 2 -1 -1 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple -1 -4 0 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple 1 2 2 -2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple 4 3 -1 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple -4 4 -3 -2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple -3 -3 2 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple 2 -3 -1 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple -1 2 1 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1632124408.432225
    },
    "10.1_expressions_reelles": {
      "grade": 100,
      "solution": "let string_of_uop op =\n  match op with \n  |Cos ->\"cos\"\n  |Sin->\"sin\"\n    \n    \nlet string_of_bop op =\n  match op with \n  |Plus->\"+\"\n  |Moins->\"-\"\n  |Fois->\"*\"\n\nlet rec string_of_expr e =\n  match e with \n  |Const f-> string_of_float f\n  |Var s-> s\n  |Uop (uop,exp)-> string_of_uop uop ^ \"(\" ^ string_of_expr exp ^\")\"\n  |Bop (bop,e1,e2)-> \"(\"^ string_of_expr e1 ^\" \" ^ string_of_bop bop ^\" \"^  string_of_expr e2 ^\")\"\n\nlet eval_uop op =\n  match op with \n  |Cos-> cos \n  |Sin->sin \n    \nlet eval_bop op =\n  match op with \n  |Plus-> (fun x y-> x+.y)\n  |Moins->(fun x y-> x-.y) \n  |Fois ->(fun x y-> x*.y)\n\nlet rec eval_expr env e =\n  match e with \n  |Const f->f\n  |Var s->List.assoc s env \n  |Uop (uop,exp)->eval_uop uop (eval_expr env exp)\n  |Bop (bop,e1,e2)-> eval_bop bop (eval_expr env e1) (eval_expr env e2) \n    \n    \n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "string_of_uop",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "string_of_uop",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_uop Cos",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"cos\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_uop Cos",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"cos\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_uop Cos",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"cos\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_uop Cos",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"cos\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_uop Cos",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"cos\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_uop Sin",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"sin\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_uop Cos",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"cos\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_uop Sin",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"sin\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_uop Cos",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"cos\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_uop Sin",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"sin\"",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "string_of_bop",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "string_of_bop",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_bop Fois",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"*\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_bop Plus",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"+\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_bop Moins",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"-\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_bop Fois",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"*\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_bop Fois",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"*\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_bop Moins",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"-\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_bop Moins",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"-\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_bop Moins",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"-\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_bop Moins",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"-\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_bop Moins",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"-\"",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "string_of_expr",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "string_of_expr",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Const 6.01590814844881283)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"6.01590814845\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Const 7.45161238205298471)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"7.45161238205\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Var \"o\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"o\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Bop (Plus, Const 6.65852443950989947, Var \"a\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(6.65852443951 + a)\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Const 5.91228946737313521)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"5.91228946737\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Const 9.5131162398218958)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"9.51311623982\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Bop (Moins, Var \"m\", Var \"t\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(m - t)\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Const 7.40874640796434)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"7.40874640796\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Var \"s\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"s\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Var \"c\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"c\"",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 : "
            },
            {
              "text": "eval_uop",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "eval_uop",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_uop Sin 0.938190256855571114",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0.806489413708010083",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_uop Sin (-4.55255843065367305)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0.987254265715139634",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_uop Cos (-2.12940587018629879)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(-0.530007613342678874)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_uop Sin 2.84500713417893181",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0.292256512415765168",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_uop Cos 2.87086181278006514",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(-0.963575700775436)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_uop Sin 3.24536498467463908",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(-0.103586182548779229)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_uop Sin (-0.0820421711674814702)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(-0.081950165617971471)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_uop Cos 2.77731626723015879",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(-0.934381809959144105)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_uop Sin 4.20273318414319519",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(-0.872912488385889307)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_uop Sin (-0.907981945644705135)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(-0.788263560604271496)",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 : "
            },
            {
              "text": "eval_bop",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "eval_bop",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_bop Fois 1.31646394416801549 1.61388270795397126",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2.1246183951376425",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_bop Moins (-2.4358920768013963) 3.98412557384679822",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(-6.42001765064819452)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_bop Fois 4.51194040842415234 (-4.26931012070474303)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(-19.2628728497019246)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_bop Fois (-2.97008251372000975) 3.49912217490641453",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(-10.3926815850594707)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_bop Fois 2.29594744575370857 0.140923552757476145",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0.323553071000065362",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_bop Fois (-0.460540376298378185) (-4.25322433604200789)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1.95878153620220608",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_bop Moins 1.18749918699078716 (-4.31042159519952683)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5.49792078219031399",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_bop Moins (-0.247796592789587322) 3.95267309691234203",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(-4.20046968970192935)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_bop Moins 3.83861330721413196 3.37341160807208951",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0.465201699142042457",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_bop Plus 4.21501390600997894 (-1.47680956755517911)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2.7382043384548",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 4 : "
            },
            {
              "text": "eval_expr",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "eval_expr",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr [] (Uop (Cos, Bop (Moins, Const 7.35303685083142256, Var \"d\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "Not_found",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr\n  [(\"4456OCP\", 0.322645179131624715); (\"OCaml\", 4.20587521184708635);\n   (\" #4456\", -3.3467798723639226); (\"baba#ba ba\", -1.06566544959920062)]\n  (Const 1.83016001812298268)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1.83016001812298268",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr\n  [(\"OCP ba# OCPOCP\", 0.847480926994698791);\n   (\" , -ba4456-be#\", 3.84466510953506813)]\n  (Const 4.99360366387496857)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4.99360366387496857",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr\n  [(\"# //OCaml//OCPbeOCaml\", -1.88776124273309076);\n   (\" //- OCPOCPba, \", 1.7128175809234083); (\"- \", -0.773478092515326843);\n   (\" ba//OCP4456\", -2.71672017773348928); (\"-\", 2.83466050524689805);\n   (\"OCaml-44564456, 44564456\", -2.15429498537307929);\n   (\", #\", -4.97711307385857182);\n   (\", , ba#OCPOCP4456\", -1.24763062748948794); (\"\", -3.2412345627389838)]\n  (Const 6.72637396205840066)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "6.72637396205840066",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr\n  [(\"ba44564456ba-, - -\", 3.32286722259696354); (\"\", -4.65669497059447757);\n   (\" baOCP\", 0.622573818485342656);\n   (\"4456be//-OCP-//#OCaml\", -3.88477118452830616);\n   (\"#OCP//, , , \", -2.09717154522397298);\n   (\" OCP//ba//-//OCamlba\", 2.65393950499417919); (\"\", -2.26704833371265657);\n   (\"OCP#-babe\", 2.17598279296123742);\n   (\"OCP//babeOCamlbaOCPba\", 3.30005985044997452)]\n  (Var \"l\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "Not_found",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr [] (Var \"r\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "Not_found",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr\n  [(\"\", 1.45359424971971229); (\"//babe\", -2.1028732100569254);\n   (\"//\", 1.20525372859637692)]\n  (Uop (Cos, Var \"u\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "Not_found",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr\n  [(\" ba#\", 0.790573003290423237); (\"\", -0.431961787196720515);\n   (\"\", 0.168644625712206064); (\"\", -1.16382241914156959);\n   (\"-#//OCaml, OCP\", 2.82894194454560743); (\"//OCaml\", 1.09024037345953762);\n   (\"beba, ba, \", -3.3358542749848672)]\n  (Const 0.917148226542791933)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0.917148226542791933",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr\n  [(\"//ba-//-OCaml\", -4.61959185725078658);\n   (\"//, be, ba//\", 1.19311017590398549); (\", \", -0.618760929708134455);\n   (\"babe\", -0.986808688205361); (\"baOCPbeOCaml#\", -1.82706935756662459);\n   (\"OCPOCamlbabe-, \", -3.16791050150655273); (\"\", 2.87604296221249278);\n   (\"OCP, , 4456ba##OCP\", -4.66090128750546384);\n   (\"OCP#- babaOCaml\", -2.09530740327740972);\n   (\"#beba-baOCPbe\", 0.495946487788112123)]\n  (Uop (Sin, Uop (Sin, Const 4.66826355198279)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(-0.84094467287720831)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr\n  [(\", 4456\", -2.41623242301696406); (\", OCP //\", 3.546744773684539);\n   (\"#\", -1.6280107921432645); (\"ba#ba \", -2.20699818337969944);\n   (\"////be, ba#, OCaml\", -1.42969496583327338);\n   (\",  \", -4.74737709184253376); (\"OCPbe44564456-\", 0.357496931684652353);\n   (\"OCaml -//\", 2.53840401159974771); (\"be\", -0.527869501895262161);\n   (\"be4456, OCaml\", 1.04098094657179807)]\n  (Bop (Plus, Var \"t\", Bop (Moins, Var \"h\", Var \"l\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "Not_found",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1638175856.697112
    },
    "10.2_fonctions_reelles": {
      "grade": 100,
      "solution": "let rec string_of_expr e =\n  match e with \n  |Const f-> string_of_float f\n  |Var s-> s\n  |Uop (uop,exp)-> string_of_uop uop ^ \"(\" ^ string_of_expr exp ^\")\"\n  |Bop (bop,e1,e2)-> \"(\"^ string_of_expr e1 ^\" \" ^ string_of_bop bop ^\" \"^  string_of_expr e2 ^\")\"\n  |App(f,e)->\"(\"^ string_of_fonction f ^\")\"^ \"(\"^ string_of_expr e ^ \")\"\n\nand string_of_fonction f =\n  f.param ^ \" |-> \" ^ string_of_expr (f.corps);;\n\nlet rec eval_expr env e =\n  match e with \n  |Const f->f\n  |Var s->List.assoc s env \n  |Uop (uop,exp)->eval_uop uop (eval_expr env exp)\n  |Bop (bop,e1,e2)-> eval_bop bop (eval_expr env e1) (eval_expr env e2) \n  |App(f,e)-> eval_fonction env f (eval_expr env e)\n\nand eval_fonction env f arg =\n  (*il faut juste supprimer f.param de env s'il existe, j'ai pas encore\n  ajouté ça *)\n  let env2 = (f.param, arg) :: env\n  in\n  eval_expr env2 f.corps \n      \nlet simpl_plus e1 e2 =\n  match (e1,e2) with \n  |(Const c1,Const c2)-> Const (c1+.c2)\n  |(Const 0., _)-> e2\n  |(_,Const 0.)->e1 \n  |(_,_)-> Bop (Plus,e1,e2);;\n\nlet simpl_moins e1 e2 =\n  match (e1,e2) with \n  |(Const c1,Const c2)-> Const (c1-.c2)\n  |(_, _) when e1=e2-> Const 0.\n  |(_,Const 0.)->e1 \n  |(_,_)-> Bop (Moins,e1,e2);;\n\nlet simpl_fois e1 e2 =\n  match (e1,e2) with \n  |(Const c1,Const c2)-> Const (c1*.c2)\n  |(Const 0., _)-> Const 0.\n  |(_,Const 0.)->Const 0.\n  |(Const 1., _)-> e2\n  |(_,Const 1.)->e1       \n  |(_,_)-> Bop (Fois,e1,e2);;\n\nlet simpl_bop op e1 e2 =\n  match op with \n  |Plus-> simpl_plus e1 e2\n  |Moins->simpl_moins e1 e2\n  |Fois->simpl_fois e1 e2;;\n\nlet simpl_uop op e =\n  match e with \n  |Const x-> Const (eval_uop op x)\n  |_->Uop (op, e) ;;\n\nlet rec simpl_expr e =\n  match e with \n  |Uop (op,exp)-> simpl_uop op (simpl_expr exp)\n  |Bop (op,exp1,exp2)->simpl_bop op (simpl_expr exp1) (simpl_expr exp2) \n  |App (f,expr)->App((simpl_fonction f),(simpl_expr expr))  \n  |_-> e\n\nand simpl_fonction f =\n  {param= f.param; corps= simpl_expr (f.corps)} ",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "string_of_fonction",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "string_of_fonction",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_fonction {param = \"k\"; corps = Const 7.10706409379300474}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"k |-> 7.10706409379\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_fonction {param = \"p\"; corps = Uop (Sin, Var \"p\")}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"p |-> sin(p)\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_fonction\n  {param = \"c\";\n   corps =\n    Uop (Cos,\n     Bop (Plus, Const 7.64044906027973347, Const 6.63980847121500073))}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"c |-> cos((7.64044906028 + 6.63980847122))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_fonction {param = \"s\"; corps = Const 2.61021158186337754}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"s |-> 2.61021158186\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_fonction {param = \"j\"; corps = Var \"j\"}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"j |-> j\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_fonction {param = \"r\"; corps = Uop (Cos, Var \"r\")}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"r |-> cos(r)\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_fonction {param = \"o\"; corps = Var \"o\"}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"o |-> o\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_fonction\n  {param = \"y\";\n   corps =\n    Bop (Moins, Const 6.60874004764145706,\n     Uop (Sin, Bop (Plus, Const 6.14724721065928748, Var \"y\")))}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"y |-> (6.60874004764 - sin((6.14724721066 + y)))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_fonction {param = \"c\"; corps = Var \"c\"}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"c |-> c\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_fonction {param = \"o\"; corps = Var \"o\"}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"o |-> o\"",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "string_of_expr",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "string_of_expr",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Bop (Fois, Var \"o\", Var \"r\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(o * r)\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Var \"o\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"o\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Const 5.88867648124316911)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"5.88867648124\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Const 6.82153867477255371)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"6.82153867477\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Var \"u\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"u\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Const 7.17970933636886244)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"7.17970933637\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Const 0.966477423260709845)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"0.966477423261\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr\n  (Bop (Fois, Uop (Sin, Const 1.69107372623639196),\n    Uop (Cos, Const 2.54592898953749192)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(sin(1.69107372624) * cos(2.54592898954))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Const 7.05210448475314)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"7.05210448475\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_expr (Var \"b\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"b\"",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "eval_expr",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "eval_expr",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr\n  [(\"babe\", -3.31775259268014144); (\"OCP ba\", -1.52979511804563106);\n   (\"\", -3.85691068222843647); (\"# #OCaml4456#OCaml\", -0.895431243722067727);\n   (\"#//baba4456\", 0.346304456068407873)]\n  (Bop (Plus, Uop (Cos, Var \"c\"), Const 6.60385242692091801))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "Not_found",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr\n  [(\"#OCamlOCPOCaml//\", 0.339256947115841534);\n   (\"baOCP //be# \", -0.506396857941302514); (\"//\", -1.94140474674589614);\n   (\"//OCP 44564456OCP  \", 4.36784733761317057);\n   (\"OCPbeba//OCaml, -OCP\", -0.809107171807183612);\n   (\"be\", 3.07445259827908224); (\"be#\", -2.87706286428538771)]\n  (Var \"w\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "Not_found",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr [(\"be,  4456\", -0.0740774671774442339)] (Const 8.05910671071687545)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "8.05910671071687545",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr [] (Var \"u\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "Not_found",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr\n  [(\"//-baOCaml\", -3.54691497231166641);\n   (\"#4456bebe, # OCPba\", 0.699608241429300115);\n   (\"be4456\", 2.80385805003874822); (\"OCPbebe, -//\", 1.45359644789820308)]\n  (Var \"e\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "Not_found",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr [(\"#//be//4456\", -3.30822169684408)] (Const 8.19642201828440697)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "8.19642201828440697",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr\n  [(\"-//4456\", -2.87902538251974072); (\"#OCP, \", -2.93428848692525035);\n   (\"be##-OCaml#\", -0.0178444390950458498)]\n  (Uop (Sin, Const 6.20261189022203485))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(-0.0804862638013042753)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr\n  [(\"OCP\", 4.52255977156307765); (\"- //\", -0.926616187661379875);\n   (\"#//be, OCPba\", -3.61911460126015161); (\"# ba- #\", 4.13901491364252294);\n   (\"4456\", 0.926767893436910128); (\"be-be-#-//--\", -3.64207559367096101);\n   (\"OCaml\", 1.58448390722877797); (\"babebe# ba#-\", -2.57896351468162788)]\n  (Var \"i\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "Not_found",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr [] (Const 8.27296272059674287)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "8.27296272059674287",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_expr\n  [(\", //ba-OCaml\", 0.293548868725243217); (\"ba\", -3.45287633001740657);\n   (\"//OCP4456--\", 2.70996316698441042); (\"-#, \", 1.37565305986824349)]\n  (Bop (Moins, Var \"s\", Const 9.89400287563831782))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "Not_found",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "eval_fonction",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "eval_fonction",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_fonction\n  [(\"4456 OCP# \", -2.6605037660378974); (\" -\", 4.9379671291807);\n   (\"ba\", 2.87320174671827); (\"OCaml#, OCP\", -3.61159291385827697);\n   (\"ba, be-\", -1.76128316841075083);\n   (\"44564456OCamlba\", -3.35810537803195341);\n   (\" //4456OCP#OCP\", -3.13326377352344743)]\n  {param = \"y\"; corps = Bop (Fois, Const 1.6553610816767248, Var \"y\")}\n  3.85295590905306184",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "6.37803326126280457",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_fonction\n  [(\"ba\", 1.41853663819166087); (\"\", 0.433953296188659188);\n   (\"\", -1.85182532542749545); (\"-OCPbe//#\", 4.8679066715920456)]\n  {param = \"k\"; corps = Uop (Sin, Const 4.94280137362309269)}\n  (-1.3414857641292)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(-0.973572295823989742)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_fonction [] {param = \"u\"; corps = Var \"u\"} (-3.21044261455590529)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(-3.21044261455590529)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_fonction\n  [(\"#-, \", -0.805837618515678145); (\"4456beOCP// #\", -2.78179207615896873);\n   (\"\", 0.348872908481712152); (\"be \", -1.95479713246531706);\n   (\", OCPOCamlOCP\", -3.99946875083314346)]\n  {param = \"m\"; corps = Const 9.47981784848067655}\n  (-4.25160800821607943)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "9.47981784848067655",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_fonction\n  [(\" 4456//OCP\", 3.46779601102848289);\n   (\"be, OCPba, -4456be\", 1.75585279045207177); (\" \", 1.89944134464213477)]\n  {param = \"q\"; corps = Var \"q\"}\n  4.50732609030397313",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4.50732609030397313",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_fonction\n  [(\"ba\", -0.395905744962490758); (\"-4456-OCP//#\", 3.61603367960302613);\n   (\"OCPOCPbe4456OCaml//-\", -1.78089211176283868)]\n  {param = \"d\"; corps = Const 2.63378951873157297}\n  1.03999044839226507",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2.63378951873157297",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_fonction [] {param = \"w\"; corps = Var \"w\"} 2.91951029748167734",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2.91951029748167734",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_fonction\n  [(\"#OCPOCamlba-OCamlOCP\", -1.30401098131278204);\n   (\"//44564456\", -3.20104797931309637);\n   (\"//OCaml44564456OCP, be\", -0.267318086128916832);\n   (\", ##OCPOCP4456OCP\", -2.21534486464534375);\n   (\"OCamlbe\", -4.33715234593073262);\n   (\"-OCP4456OCaml\", -0.582613092435870783);\n   (\"//OCPOCPOCaml#OCP\", 4.11893164317205951);\n   (\"bababa -//, // \", 1.7456954845100805); (\"#OCaml\", -1.62098044798336716);\n   (\"\", -2.88406073401762253)]\n  {param = \"b\"; corps = Uop (Cos, Var \"b\")}\n  (-4.20094762420003764)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(-0.489434675045167245)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_fonction\n  [(\"##\", 0.70148434982372887); (\"-OCP\", 3.23125247311747898);\n   (\"#, //-OCP, OCP\", 2.36316844509165591)]\n  {param = \"x\"; corps = Var \"x\"}\n  (-2.77500280330005467)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(-2.77500280330005467)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_fonction\n  [(\"#- 4456\", -4.41952321487454469);\n   (\"beOCaml, 4456OCaml//be, \", 4.21010293549440284);\n   (\"baOCaml, OCPbe\", 3.96103892797183654);\n   (\"OCPOCP-//OCP#// ba\", -0.631335537420950388);\n   (\" , //\", 1.57327145509186472); (\" #OCamlbe\", -2.52853948134271134);\n   (\"be \", -4.25472738611657597)]\n  {param = \"z\"; corps = Bop (Plus, Var \"z\", Const 6.15331692618201842)}\n  (-1.69151652853231704)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4.46180039764970182",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 : "
            },
            {
              "text": "simpl_plus",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "simpl_plus",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_plus\n  (Var \"f\")\n  (Uop (Sin, Bop (Moins, Const 0.55529543648136781, Var \"c\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Plus, Var \"f\",\n  Uop (Sin, Bop (Moins, Const 0.55529543648136781, Var \"c\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_plus (Bop (Plus, Var \"j\", Var \"j\")) (Const 8.05470642383008)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Plus, Bop (Plus, Var \"j\", Var \"j\"), Const 8.05470642383008))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_plus (Var \"d\") (Bop (Plus, Uop (Cos, Uop (Cos, Var \"h\")), Var \"p\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Plus, Var \"d\", Bop (Plus, Uop (Cos, Uop (Cos, Var \"h\")), Var \"p\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_plus (Const 2.54597446224292145) (Var \"n\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Plus, Const 2.54597446224292145, Var \"n\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_plus (Uop (Sin, Var \"g\")) (Const 3.32272054033673703)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Plus, Uop (Sin, Var \"g\"), Const 3.32272054033673703))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_plus\n  (Const 9.4378924725619413)\n  (Bop (Moins, Var \"c\", Const 5.97244800565100764))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Plus, Const 9.4378924725619413,\n  Bop (Moins, Var \"c\", Const 5.97244800565100764)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_plus (Bop (Plus, Const 0.562099571508826, Var \"y\")) (Var \"q\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Plus, Bop (Plus, Const 0.562099571508826, Var \"y\"), Var \"q\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_plus\n  (Uop (Cos, Var \"h\"))\n  (Uop (Cos, Bop (Fois, Var \"i\", Const 3.54281792682351115)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Plus, Uop (Cos, Var \"h\"),\n  Uop (Cos, Bop (Fois, Var \"i\", Const 3.54281792682351115))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_plus (Var \"t\") (Var \"f\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Plus, Var \"t\", Var \"f\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_plus (Const 0.589911990898757788) (Const 2.64482930398863303)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Const 3.23474129488739059)",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 : "
            },
            {
              "text": "simpl_moins",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "simpl_moins",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_moins (Const 4.62387286497996541) (Const 1.86705785986063355)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Const 2.75681500511933208)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_moins\n  (Bop (Moins, Const 1.54943040125227949, Uop (Sin, Var \"v\")))\n  (Var \"p\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Moins, Bop (Moins, Const 1.54943040125227949, Uop (Sin, Var \"v\")),\n  Var \"p\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_moins\n  (Bop (Plus, Const 8.58646538802678627, Const 2.01358873173668051))\n  (Uop (Cos, Const 8.1666907079844453))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Moins,\n  Bop (Plus, Const 8.58646538802678627, Const 2.01358873173668051),\n  Uop (Cos, Const 8.1666907079844453)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_moins (Var \"y\") (Uop (Sin, Var \"m\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Moins, Var \"y\", Uop (Sin, Var \"m\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_moins (Var \"t\") (Bop (Fois, Const 3.05841167447575, Var \"k\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Moins, Var \"t\", Bop (Fois, Const 3.05841167447575, Var \"k\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_moins (Var \"q\") (Var \"p\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Moins, Var \"q\", Var \"p\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_moins (Const 5.65489261474134697) (Uop (Sin, Var \"h\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Moins, Const 5.65489261474134697, Uop (Sin, Var \"h\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_moins (Const 0.0662116061746388929) (Var \"x\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Moins, Const 0.0662116061746388929, Var \"x\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_moins (Var \"f\") (Var \"w\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Moins, Var \"f\", Var \"w\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_moins\n  (Var \"r\")\n  (Bop (Fois, Uop (Cos, Const 4.06924326417876259), Var \"h\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Moins, Var \"r\",\n  Bop (Fois, Uop (Cos, Const 4.06924326417876259), Var \"h\")))",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 : "
            },
            {
              "text": "simpl_fois",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "simpl_fois",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fois\n  (Uop (Cos, Uop (Cos, Bop (Moins, Const 6.66953922559648049, Var \"r\"))))\n  (Var \"p\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Fois,\n  Uop (Cos, Uop (Cos, Bop (Moins, Const 6.66953922559648049, Var \"r\"))),\n  Var \"p\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fois (Const 5.6881662469192058) (Uop (Cos, Uop (Sin, Var \"f\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Fois, Const 5.6881662469192058, Uop (Cos, Uop (Sin, Var \"f\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fois (Var \"s\") (Const 3.6394699383019673)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Fois, Var \"s\", Const 3.6394699383019673))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fois\n  (Uop (Sin, Bop (Plus, Const 9.95559970696037233, Var \"k\")))\n  (Const 4.01589026590012743)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Fois, Uop (Sin, Bop (Plus, Const 9.95559970696037233, Var \"k\")),\n  Const 4.01589026590012743))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fois (Uop (Sin, Var \"b\")) (Var \"c\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Fois, Uop (Sin, Var \"b\"), Var \"c\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fois (Var \"u\") (Var \"p\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Fois, Var \"u\", Var \"p\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fois (Const 8.82820439553727354) (Uop (Sin, Var \"o\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Fois, Const 8.82820439553727354, Uop (Sin, Var \"o\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fois (Const 4.12190761433941599) (Const 0.651750459926023651)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Const 2.68645518341829348)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fois (Uop (Cos, Var \"c\")) (Const 2.26527418426229188)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Fois, Uop (Cos, Var \"c\"), Const 2.26527418426229188))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fois\n  (Var \"q\")\n  (Bop (Moins, Uop (Cos, Var \"o\"), Const 8.67450453970593216))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Fois, Var \"q\",\n  Bop (Moins, Uop (Cos, Var \"o\"), Const 8.67450453970593216)))",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 4 : "
            },
            {
              "text": "simpl_uop",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "simpl_uop",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_uop Cos (Const 7.32186852525857557)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Const 0.507355416328353126)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_uop Cos (Var \"v\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Uop (Cos, Var \"v\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_uop Sin (Const 7.66204276220929614)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Const 0.981636216381387539)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_uop Cos (Var \"w\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Uop (Cos, Var \"w\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_uop Cos (Var \"w\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Uop (Cos, Var \"w\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_uop Cos (Const 5.10457831453285582)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Const 0.382212437338055266)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_uop Cos (Const 9.3414847802424)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Const (-0.996533128093009757))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_uop Sin (Var \"d\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Uop (Sin, Var \"d\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_uop Cos (Var \"j\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Uop (Cos, Var \"j\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_uop Sin (Var \"f\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Uop (Sin, Var \"f\"))",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 5 : "
            },
            {
              "text": "simpl_expr",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "simpl_expr",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_expr (Bop (Moins, Var \"x\", Const 6.41672090278108431))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Bop (Moins, Var \"x\", Const 6.41672090278108431))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_expr (Const 1.42483966200436063)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Const 1.42483966200436063)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_expr (Bop (Plus, Const 7.0634796292328792, Const 4.54733312932604861))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Const 11.6108127585589287)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_expr (Uop (Cos, Bop (Moins, Var \"w\", Const 8.79705481118838684)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Uop (Cos, Bop (Moins, Var \"w\", Const 8.79705481118838684)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_expr (Uop (Cos, Uop (Cos, Uop (Cos, Var \"i\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Uop (Cos, Uop (Cos, Uop (Cos, Var \"i\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_expr (Var \"y\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Var \"y\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_expr (Var \"t\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Var \"t\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_expr (Const 4.1304414281948052)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Const 4.1304414281948052)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_expr (Uop (Cos, Uop (Cos, Var \"k\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Uop (Cos, Uop (Cos, Var \"k\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_expr (Var \"m\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Var \"m\")",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 5 : "
            },
            {
              "text": "simpl_fonction",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "simpl_fonction",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fonction {param = \"e\"; corps = Var \"e\"}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{param = \"e\"; corps = Var \"e\"}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fonction {param = \"w\"; corps = Var \"w\"}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{param = \"w\"; corps = Var \"w\"}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fonction {param = \"s\"; corps = Var \"s\"}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{param = \"s\"; corps = Var \"s\"}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fonction {param = \"u\"; corps = Var \"u\"}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{param = \"u\"; corps = Var \"u\"}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fonction {param = \"o\"; corps = Uop (Cos, Const 9.04502837240728)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{param = \"o\"; corps = Const (-0.928757489261399338)}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fonction\n  {param = \"l\";\n   corps = Uop (Cos, Uop (Sin, Uop (Sin, Const 5.00388651134225526)))}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{param = \"l\"; corps = Const 0.683728669946289891}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fonction\n  {param = \"g\"; corps = Uop (Sin, Uop (Sin, Const 3.60620653821807302))}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{param = \"g\"; corps = Const (-0.433233756801289338)}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fonction {param = \"c\"; corps = Uop (Cos, Const 8.08544096378799715)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{param = \"c\"; corps = Const (-0.229398180674118324)}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fonction {param = \"e\"; corps = Var \"e\"}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{param = \"e\"; corps = Var \"e\"}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "simpl_fonction {param = \"q\"; corps = Uop (Cos, Const 9.86687554905563502)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{param = \"q\"; corps = Const (-0.903856227845447502)}",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1639385617.858558
    },
    "2.1_somme": {
      "grade": 100,
      "solution": "let rec sum n =\n  if n=0 then 0\n  else n+ sum(n-1);;\n\n\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "sum",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "sum",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 13",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "91",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 10",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "55",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 16",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "136",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 12",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "78",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 8",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "36",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "15",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 6",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "21",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 9",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "45",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 7",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "28",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1632723943.205292
    },
    "2.2_fib": {
      "grade": 100,
      "solution": "let rec fibo n =\n  match n with \n  |0->1\n  |1->1 \n  |n-> fibo(n-1)+fibo(n-2);;\n\nfibo 10;;\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "fibo",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "fibo",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "fibo 5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "8",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "fibo 14",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "610",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "fibo 14",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "610",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "fibo 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "fibo 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "fibo 15",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "987",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "fibo 7",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "21",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "fibo 11",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "144",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1632724129.861618
    },
    "2.3_employe": {
      "grade": 100,
      "solution": "let rec pasA n =\n  if n=0 then 0\n  else 1+pasB(n-1)\nand pasB n =\n  if n=0 then 0\n  else \n  if n mod 2=0 then 1+pasA(n-2)\n  else 1+pasA (n-1);;\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "pasA",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "pasA",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 31",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "30",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 94",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "94",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 47",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "46",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 22",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "22",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 22",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "22",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 84",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "84",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 90",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "90",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 82",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "82",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 56",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "56",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "pasB",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "pasB",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 46",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "45",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 12",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "11",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 39",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "39",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 27",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "27",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 7",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "7",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 40",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "39",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 74",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "73",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 99",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "99",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 86",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "85",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1632724759.462123
    },
    "2.4_ack": {
      "grade": 100,
      "solution": "let rec ack m n =\n  match(m,n) with\n  |(0,n)-> n+1\n  |(m,0)-> ack(m-1)(1)\n  |(m,n)-> ack(m-1)(ack (m)(n-1));;\n\nack 0 0;\nack 1 1;\nack 2 2;\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "ack",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "ack",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 0 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 0 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 0 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 0 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 0 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 1 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 1 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 1 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 1 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 1 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "6",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 2 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 2 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 2 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "7",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 2 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "9",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 2 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "11",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 3 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 3 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "13",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 3 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "29",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 3 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "61",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 3 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "125",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1632725077.515973
    },
    "3.1_listes": {
      "grade": 100,
      "solution": "(* Toutes les fonction sont ici définies par des \"let rec\". Il est\n   possible que dans vos solutions certaines fonctions ne soient pas\n   récursives, car elles utilisent une fonction recursive auxiliaire\n   définie localement. À vous d'enlever le mot clef \"rec\" dans ce\n   cas. *)\n\nlet rec list_length l =\n  match l with\n  |[]->0\n  |_::l->1+list_length l;;\n\nlist_length[2;2;3];;\n\nlet rec list_product l =\n  match l with \n  |[]->1\n  |x::l->x*list_product l;;\n\nlist_product [2; 2; 3];;\n\nlet rec mem x l =\n  match l with \n  |[]-> false\n  |e::l-> \n      if x=e then true \n      else mem x l;;\n\n\nlet rec list_min l =\n  match l with \n  |[]-> failwith \"erreur, liste vide\"\n  |[x]->x\n  |x::l-> min(x)(list_min l);;\n\nlist_min [-30; 2; 549];;\n\nlet rec last l =\n  match l with \n  |[]-> failwith\"liste vide\"\n  |[x]-> x\n  |_::l->last l;;\nlast [1; 2; 3];;\n\nlet rec is_sorted l =\n  match l with \n  |[]->true\n  |[e1]->true\n  |e1::e2::l-> if e1>e2 then false \n      else is_sorted (e2::l);;\n\nis_sorted [1; 3; 5; 6; 4];;\nis_sorted[1;2;3;4];;\n\n  \n\n\nlet average l =\n  let rec somme l=\n    match l with\n    |[]-> failwith\"erreur\"\n    |[x]->x\n    |x::l->x+somme l \n  in \n  somme l / list_length l;;\n  \n\n  \n\nlet rec nth l k =\n  match l with \n  |[]-> failwith \"vide\"\n  |x::l->if k=0 then x\n      else nth (l)(k-1);;\n\n\nlet rec range n m =\n  if n=m then n::[]\n  else \n  if n<m then \n    n::range(n+1) (m)\n  else  \n    n::range(n-1)(m);;\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "list_length",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "list_length",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length [-3; 2; -3; 3; -1; -3; 2; 2; -3; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "10",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length [0; -5; 1; -1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "6",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length [0; 0; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length [-4; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length [-5; -5; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length [-5; -1; -2; -2; -4; 4; -2; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "8",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length [0; 4; 2; -3; 3; 4; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "7",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "list_product",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "list_product",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product [3; 2; 4; 0; 4; 3; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product [-2; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product [2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product [1; 4; 0; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product [-3; 4; 4; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "192",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product [-1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product [-2; 0; -3; -1; -2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product [0; 4; -2; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "mem",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "mem",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem 1 []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem 1 [1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem 3 [1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem 4 [1; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem 2 []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem 1 [-2; 1; -1; 2; -5; -4; 1; 4; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem -5 [4; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem 0 [3; 2; -4; 4; 4; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem 2 [-1; -4; 3; -4; -5; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem -5 [4; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem -2 [-2; 1; -2; 2; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "list_min",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "list_min",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \"erreur, liste vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \"erreur, liste vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min [-1; -1; -3; 3; 4; 2; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min [2; 1; -2; -4; 1; -5; -2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min [0; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min [-5; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min [3; -3; -3; 2; -5; -3; -4; -3; -2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \"erreur, liste vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \"erreur, liste vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min [1; -4; 3; -3; 1; -5; -4; 2; -2; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "last",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "last",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \"liste vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last [0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last [-1; 1; 2; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last [-3; 1; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last [-4; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last [2; 1; -1; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last [-5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last [-4; 3; 4; -5; 2; -1; -3; 0; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last [2; 4; -3; 3; 4; 0; -1; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last [-2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-2",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "is_sorted",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "is_sorted",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [1; 3; 2; 4; 5; 6]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [4; 1; 5; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [1; 2; -1; 2; -1; -3; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [-4; -5; -4; -1; -5; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [-3; 3; 0; -2; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [1; -4; 3; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [0; -5; -4; -2; -3; -5; -4; 2; -3; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [4; 1; -4; 0; -4; -2; -4; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "average",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "average",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \"erreur\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average [2; 0; -1; -5; -5; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \"erreur\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \"erreur\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average [-1; 0; -5; -4; 1; -3; -3; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average [2; 1; 0; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average [2; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average [1; 0; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average [1; 3; -4; 4; -4; 3; 4; 0; 0; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average [3; -1; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "nth",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "nth",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [] 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \"vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [-5; -1; -4; 1; 2; -5; 1; -1; -4] -2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \"vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [-3; -4; -4; -3; -4] 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [] 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \"vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [] 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \"vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [4; 3; 0; -3; 3; -5] -5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \"vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [] 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \"vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [-1; 2; 0; -3; -3; 1; 3; 3; 0] 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [0; 1; 0; -1] 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [-4; 0; 0; -3] -4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \"vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "range",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "range",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range 2 -3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2; 1; 0; -1; -2; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range -1 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; 0; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range -2 -3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-2; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range 4 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range 2 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2; 1; 0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range -2 -4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-2; -3; -4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range 3 -1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; 2; 1; 0; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range 4 -1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4; 3; 2; 1; 0; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range -3 -4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range 4 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4; 3; 2; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1632989658.844134
    },
    "3.2_listes_poly": {
      "grade": 100,
      "solution": "(* Toutes les fonctions sont ici définies par des \"let rec\". Il est\n   possible que dans vos solutions certaines fonctions ne soient pas\n   récursives, car elles utilisent une fonction récursive auxiliaire\n   définie localement. À vous d'enlever le mot clef \"rec\" dans ce\n   cas. *)\n\nlet rec map f l =\n  match l with \n  |[]->[] \n  |x::l-> f(x)::map f l;;\nlet succ x = x + 1 in map succ [1; 2; 3];;\n\nlet rec filter p l =\n  match l with \n  |[]->[]\n  |x::l when p(x)-> x:: filter p l\n  |x::l -> filter p l;;\nfilter (function x -> x > 3) [4; 3; 10];;\n\nlet rec append l1 l2 =\n  match l1 with \n  |[]->l2\n  |x::r1-> x::append r1 l2 ;;\n\nlet rec rev l =\n  match l with \n  |[]->[] \n  |x::l-> rev l @ [x];;\n\nrev [1; 2; 3];;\n\n\nlet rec flatten l =\n  match l with \n  |[]-> []\n  |h::t -> append h (flatten t);;\n\n\nlet rec rotation_d l=\n  let rec last l=\n    match l with \n    |[]->[]\n    |[x]->[x]\n    |_::r-> last r in \n  let rec remove_last l=\n    match l with \n    |[]->[]\n    |[x]->[]\n    |x::r->x::remove_last r in \n  let last= last l in \n  last@remove_last l;;",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "map",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "map",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> [3; 3; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4; 4; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> [3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> [3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> [1; -4; -5; -3; 0; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2; -3; -4; -2; 1; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> [0; -2; 2; -1; 0; -5; -2; -5; -3; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1; -1; 3; 0; 1; -4; -1; -4; -2; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> [-2; -3; 2; 1; -3; -2; -5; 1; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; -2; 3; 2; -2; -1; -4; 2; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> [4; -1; 4; -3; 0; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[5; 0; 5; -2; 1; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "filter",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "filter",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> [1; 3; 1; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> [-4; -3; -4; 4; 2; -5; 0; -5; 1; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4; 2; 1; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> [1; -2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> [0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> [0; -4; 4; -1; 4; -5; -4; -1; 4; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4; 4; 4; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> [-2; -1; 1; -5; 0; 1; -5; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-2; 0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> [1; -5; -2; -2; -1; 0; 1; 2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-2; -2; 0; 2; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> [2; 1; 1; 3; -2; -1; 2; -2; -2; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2; -2; 2; -2; -2; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "append",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "append",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [] []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [-4; -3] [2; 2; -3; 2; -5; -1; -2; 4; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -3; 2; 2; -3; 2; -5; -1; -2; 4; -2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [-1] [-4; 3; 0; 1; -5; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; -4; 3; 0; 1; -5; -5]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [-3; 1; -3; 2; 1; -1; -3] [-3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; 1; -3; 2; 1; -1; -3; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [2; -2; 2; -3; 3; 1; -2] [4; 1; -5; -1; 3; -3; 3; 1; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2; -2; 2; -3; 3; 1; -2; 4; 1; -5; -1; 3; -3; 3; 1; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "append",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [] []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append\n  [1.51076182252935265; -0.320479910477009966; -2.39342398832983;\n   -4.48975746924916; 4.55832987404508572; -3.31320134978135172;\n   1.85629608608087882; -1.56123652697954274]\n  [4.91580054562862578; -1.38984724854238406; -1.70093778348684754;\n   2.38588811629968056; -4.79703681349959155]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1.51076182252935265; -0.320479910477009966; -2.39342398832983;\n -4.48975746924916; 4.55832987404508572; -3.31320134978135172;\n 1.85629608608087882; -1.56123652697954274; 4.91580054562862578;\n -1.38984724854238406; -1.70093778348684754; 2.38588811629968056;\n -4.79703681349959155]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append\n  [3.80002938494094167]\n  [1.34683703806468191; 3.26594828062111553; -2.87114441494671579;\n   0.854611211072762167; -1.36828906176930243; -4.83510692765653616;\n   4.05352345528480384; 0.189024039365309982]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3.80002938494094167; 1.34683703806468191; 3.26594828062111553;\n -2.87114441494671579; 0.854611211072762167; -1.36828906176930243;\n -4.83510692765653616; 4.05352345528480384; 0.189024039365309982]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append\n  []\n  [0.259015528334725076; 4.67653512927715; -3.40731582074806649;\n   -3.86022753524668394; -1.29251709790773539; 4.73064400776280714;\n   -3.22067638892131]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0.259015528334725076; 4.67653512927715; -3.40731582074806649;\n -3.86022753524668394; -1.29251709790773539; 4.73064400776280714;\n -3.22067638892131]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [-3.66973284357920759] [-2.11705166629346175; -1.43265732488888986]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3.66973284357920759; -2.11705166629346175; -1.43265732488888986]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "rev",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "rev",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev [2; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev [2; 1; 0; 0; 4; 3; -4; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; -4; 3; 4; 0; 0; 1; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev [-3; 0; -4; 1; -4; -2; -2; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-2; -2; -2; -4; 1; -4; 0; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev [-2; -2; 1; 3; 3; -3; 1; 3; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; 3; 1; -3; 3; 3; 1; -2; -2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev [3; 0; 4; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; 4; 0; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev [-4; -2; 0; 3; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; 3; 0; -2; -4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev [-3; -3; 3; 1; -5; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4; -5; 1; 3; -3; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev [4; -5; 0; 4; 0; 4; -5; -3; 2; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; 2; -3; -5; 4; 0; 4; 0; -5; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "flatten",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "flatten",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten [[1; 2; 3]; []]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten [[]; [3; 2; 1]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; 2; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten [[]; []]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten\n  [[-1; 3; -5; 2; -1; -5; -2; 4; -4; 0]; [-3]; [-3; 3; -3; -5; 2];\n   [-5; -3; 2; 0; 4; 3]; [2; -2; 4; -4; 2; -5; -4; -3]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; 3; -5; 2; -1; -5; -2; 4; -4; 0; -3; -3; 3; -3; -5; 2; -5; -3; 2; 0; 4;\n 3; 2; -2; 4; -4; 2; -5; -4; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten\n  [[-5; -2; 4; 3; -1; 3]; [-2; -5; 0; -1; 0; 1]; [0; -2; 2]; [1];\n   [-3; -4; 4; -3; -3; 4; 1]; [2]; [-2; -4]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -2; 4; 3; -1; 3; -2; -5; 0; -1; 0; 1; 0; -2; 2; 1; -3; -4; 4; -3; -3; 4;\n 1; 2; -2; -4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten\n  [[-1; -3; -2]; [-2; -5; 2; -4; 4]; [-2; 1; -2; 4; -5; 0];\n   [0; 0; -3; 3; -3]; [-3; -5; -3; -5; 0; 4; 1]; [-1; -1]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; -3; -2; -2; -5; 2; -4; 4; -2; 1; -2; 4; -5; 0; 0; 0; -3; 3; -3; -3; -5;\n -3; -5; 0; 4; 1; -1; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten\n  [[-3; 0; -4; -5; -5; -3; -5; -1; 1]; [-1; 4; 0; -3; 2; 3; 2; -1; 0; -3];\n   [-2; -2; -4]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; 0; -4; -5; -5; -3; -5; -1; 1; -1; 4; 0; -3; 2; 3; 2; -1; 0; -3; -2; -2;\n -4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten [[4; 1; 1; 0; 3; -4; 1]; [-5]; [0; -3; -1]; [2; 1; 3; -5]; []]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4; 1; 1; 0; 3; -4; 1; -5; 0; -3; -1; 2; 1; 3; -5]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten\n  [[3; -2; -2; -3; -4]; [4; -2; 0; -1]; [3; -5]; [-3; -4; -1; 3; -3; -5; -3];\n   [3; -4]; [-2; 2; -1; -1; 3; -3; -5; 1; -5]; [0; 1; 0; -2];\n   [-4; 4; 3; -5; -5; -1; -2; 2; 4; 2]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; -2; -2; -3; -4; 4; -2; 0; -1; 3; -5; -3; -4; -1; 3; -3; -5; -3; 3; -4;\n -2; 2; -1; -1; 3; -3; -5; 1; -5; 0; 1; 0; -2; -4; 4; 3; -5; -5; -1; -2; 2;\n 4; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "rotation_d",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "rotation_d",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d [1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d [3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d [0; -3; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; 0; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d [0; -2; -3; 2; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; 0; -2; -3; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d [-2; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; -2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d [0; -2; -5; -4; 2; 1; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; 0; -2; -5; -4; 2; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d [2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d [2; -3; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1; 2; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1633369495.405612
    },
    "3.3_listes_choix": {
      "grade": 100,
      "solution": "\nlet choose l =\n  List.nth l (Random.int (List.length(l)));;\n\nchoose [6; 5; 8; 7; 3];;\nchoose ['e';'c'; 'a'; 'd'; 'b'];;\n\nlet rec choose_elements l n = \n  match l with \n  |[]->[]\n  |x::r ->match n with \n    |0->[]\n    |_->\n        x:: (choose_elements (r) (n-1));;   \n\n\n\nlet rec choose_sublist l n =\n  match l with \n  |[]->[]\n  |x::r ->match n with \n    |0->[]\n    |_->x :: (choose_sublist (r) (n-1));; ",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "choose",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "choose",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [3; 3; 4; 0; -2; -3; -5; 0; -2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [-2; -2; 0; -3; 0; -4; -3; -2; 0; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [-5; 2; 2; -4; 1; 1; 1; -4; 1; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [-3; -3; -1; -5; -1; -2; 3; -3; -1; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [2; 3; 0; -3; -4; 0; -3; 1; -3; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [-4; 1; -1; 3; 4; -2; 0; 2; -4; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [1; 4; -1; 0; 2; -3; -3; -3; 4; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [-4; -2; -2; 4; 1; 0; -3; -5; -3; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [-5; 1; 3; -3; 0; 4; 0; -2; -1; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [-4; 0; -5; -3; 1; 4; -4; -4; 2; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "choose_elements",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "choose_elements",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-5; -5; -3; -2; -1; 1; 1; 1; 2; 2] 5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -5; -3; -2; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-5; -2; -2; -2; 0; 0; 2; 2; 4; 4] 9",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -2; -2; -2; 0; 0; 2; 2; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-5; -4; -4; -4; -2; -1; 0; 3; 3; 4] 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-5; -4; -3; -2; -2; 0; 0; 2; 2; 4] 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-5; -4; -2; -1; 0; 2; 2; 2; 2; 3] 8",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -2; -1; 0; 2; 2; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-4; -3; -3; 0; 0; 0; 1; 1; 2; 4] 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -3; -3; 0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-5; -4; -3; -2; -1; 0; 2; 4; 4; 4] 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-3; -3; -3; -3; -2; -1; -1; 0; 2; 3] 6",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -3; -3; -3; -2; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-5; -5; -5; -5; -2; 0; 1; 4; 4; 4] 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -5]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-4; -4; -4; -3; -2; -1; 2; 2; 3; 4] 9",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -4; -4; -3; -2; -1; 2; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "choose_sublist",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "choose_sublist",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_sublist [-5; -4; -3; -3; -2; -2; -1; 0; 0; 1] 6",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -3; -2; -2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_sublist [-3; -3; -3; -1; -1; 1; 2; 3; 3; 3] 7",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -3; -3; -1; -1; 1; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_sublist [-5; -2; -1; -1; 0; 0; 1; 3; 3; 3] 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_sublist [-5; -5; -5; -2; 2; 2; 2; 3; 3; 3] 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -5; -5]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_sublist [-4; -4; -3; -2; 0; 0; 0; 2; 3; 4] 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_sublist [-5; -5; -3; -1; 0; 0; 0; 2; 4; 4] 8",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -5; -3; -1; 0; 0; 0; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_sublist [-5; -5; -4; -3; -2; 0; 1; 1; 4; 4] 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_sublist [-5; -3; -2; -1; -1; -1; 1; 1; 4; 4] 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_sublist [-3; -3; -3; -2; -1; 1; 2; 3; 4; 4] 5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -3; -3; -2; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_sublist [-5; -3; -3; -2; 0; 0; 2; 3; 4; 4] 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1633592185.196546
    },
    "3.4_listes_sorting": {
      "grade": 100,
      "solution": "let rec insert x l =\n  match l with\n  |[]->[x]\n  |e::r when e=x->l\n  |e::r when e<x->e:: insert x r\n  |e::r -> x::[e]@r;;\n\nlet rec sort l =\n  match l with \n  |[]->[]\n  |x::r-> insert x (sort r);; \n\nlet rec mem_sorted x l=\n  match l with \n  |[]->false\n  |[e]->if x=e then true else false\n  |e::r->let rec devise l d f=\n           match l with \n           |[]->[]\n           |x::r when d=0   && d<f ->x::devise r d (f-1)\n           |x::r when d<f-> devise r (d-1) (f-1)\n           |x::r ->[] in \n      let len= List.length l in \n      let mil = len/2 in \n      if List.nth l mil= x then true \n      else \n      if List.nth l mil > x then mem_sorted x (devise l 0 (mil)) \n      else mem_sorted x (devise l (mil) (len+1));;\n\n       \nlet rec union_sorted l1 l2 =\n  match l1 with\n  |[]->l2 \n  |e1::r1-> match l2 with\n    |[]->l1\n    |e2::r2 when e1=e2 ->e1::union_sorted r1 r2\n    |e2::r2 when e1<e2 ->e1::union_sorted r1 l2\n    |e2::r2->e2:: union_sorted l1 r2;;\n\nunion_sorted [1; 3; 5] [2; 5; 8];;\n\nlet rec inter_sorted l1 l2 =\n  match l1 with\n  |[]->[]\n  |e1::r1-> match l2 with \n    |[]->[]\n    |e2::r2 when e1=e2 ->e1:: inter_sorted r1 r2\n    |e2::r2 when e1<e2 ->inter_sorted r1 l2\n    |e2::r2->inter_sorted l1 r2;;              \n\n\n\nlet rec quicksort l =\n  match l with \n  |[]->[]\n  |[x]->[x]\n  |x::r->let rec partition l x=\n           match l with \n           |[]->([],[])\n           |e::l -> let a=partition l x in \n               if e<x then (e::fst a ,snd a)\n               else (fst a,e::snd a) in  let a = partition r x in \n      quicksort (fst a)@ [x] @ quicksort (snd a);; \n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "insert",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "insert",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert -4 [-5; -4; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert 3 [-4; -2; -1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -2; -1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert 0 [-3; -2; -1; 0; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -2; -1; 0; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert 2 [1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert -4 [-5; -4; -3; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert -3 [-5; -3; 0; 1; 2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -3; 0; 1; 2; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert -1 [-3; -1; 0; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -1; 0; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert -4 [-5; -4; -3; -2; -1; 0; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -2; -1; 0; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert -1 [-4; -3; -2; -1; 0; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -3; -2; -1; 0; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert 1 [-4; -3; -2; 0; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -3; -2; 0; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "sort",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "sort",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [-1; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [-5; -1; -5; 1; -1; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -1; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [-4; 0; 2; 4; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -1; 0; 2; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [1; -5; 4; 2; 3; -3; -5; -3; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [1; -2; -2; -4; 4; 1; 2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -2; 1; 2; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [3; 1; -3; 0; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; 0; 1; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [-3; -5; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -3; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [-3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [-3; 4; 0; 2; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; 0; 2; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "mem_sorted",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "mem_sorted",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted 1 [-5; -4; -3; -2; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted -6 [-5; -4; -3; -2; -1; 0; 1; 2; 3; -6]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted -6 [-5; -2; -1; 0; 1; -6]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted -6 [-5; -3; -1; 0; 1; 2; 4; -6]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted -6 [-5; -3; -1; 1; 2; 3; 4; -6]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted -6 [-5; -4; -3; -2; 0; 1; 2; 3; -6]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted -2 [-4; -3; -2; 0; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted -3 [-2; 0; 1; 2; 3; 4; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted 4 [-5; -4; -3; -2; -1; 0; 1; 2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted 2 [-5; -4; 0; 2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "union_sorted",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "union_sorted",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted\n  [-5; -4; -3; -2; -1; 1; 2; 4]\n  [-5; -4; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-3; -2; -1; 0; 1; 3] [-4; -3; -1; 0; 1; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -3; -2; -1; 0; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-4; -3; -2; -1; 0] [-3; 0; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -3; -2; -1; 0; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-5; -4; -2; -1; 0; 3; 4] [-5; -3; -2; 0; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-4; -3] [-5; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-5; -3; -2; 1; 3; 4] [-3; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -3; -2; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-5; -4; -1; 2; 3; 4] [-5; -4; -3; -1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-5; -3; -2; 0; 1; 2; 4] [-4; -3; -2; 0; 1; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -2; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-4; -2; -1; 0] [-5; -4; -3; -1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -2; -1; 0; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-5; -4; -3; -2; -1; 0; 1; 2; 3; 4] [-4; -3; -2; 0; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "inter_sorted",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "inter_sorted",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-5; -4; -3; -2; -1; 0; 1; 2; 3; 4] [-3; -2; -1; 0; 1; 2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -2; -1; 0; 1; 2; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-2; 2; 4] [-5; -3; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [] [0; 1; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [] [-5; -4; -3; -2; -1; 0; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-3; 3] [-2; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-5; -2; 0; 1; 4] [-4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted\n  [-5; -4; -3; -2; -1; 0; 1; 2; 3; 4]\n  [-5; -4; -3; -2; -1; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -2; -1; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-5; -4; -3; -2; -1; 0; 1; 2; 3] [-4; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-2; 3] [-2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-4; -3; -2; -1; 1; 2; 3; 4] [-5; -4; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -3; -2; -1; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "quicksort",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "quicksort",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [-4; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [-5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [-4; -2; 3; -5; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -2; 3; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [0; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; 0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [-2; 1; 0; 3; -4; 1; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -2; 0; 1; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [-1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [0; 0; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; 0; 0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [-3; 4; -2; 3; 3; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -3; -2; 3; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [3; 2; -4; 0; -5; 4; -3; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -4; -3; 0; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1633590875.238471
    },
    "4.1_arbres": {
      "grade": 100,
      "solution": "let rec size a =\n  match a with\n  |Nil -> 0\n  |Node(_,a1,a2)->1+size a1+size a2;;\n\nlet rec depth a =\n  match a with\n  |Nil->0 \n  |Node(_,a1,a2)->1+max(depth a1)(depth a2);;\n\nlet rec sum a =\n  match a with \n  |Nil-> 0\n  |Node(e,a1,a2)->e+sum a1 + sum a2;;\n\nlet rec contains x a =\n  match a with \n  |Nil->false\n  |Node(e,a1,a2) when e=x->true\n  |Node(e,a1,a2)-> contains x a1 || contains x a2;;\n\nlet rec elements a =\n  match a with\n  |Nil-> []\n  |Node(e,a1,a2)->elements a1 @ [e] @ elements a2;;\n\nlet rec elements a =\n  let rec append l1 l2 =\n    match l1 with \n    |[]->l2\n    |x::r1-> x::append r1 l2 in \n  match a with \n  |Nil-> []\n  |Node(e,a1,a2)->append (append (elements a1)( [e]))(elements a2);;\n\nlet rec perfect a =\n  match a with \n  |Nil -> true \n  |Node (_,a1,a2) when depth a1=depth a2 -> perfect a1 && perfect a2 \n  |Node(_,a1,a2)-> false;;\n\nlet perfect1 a =\n  let rec perfect_depth a=\n    match a with \n    |Nil->(true,0)\n    |Node(_,a1,a2)-> \n        let pf1 = perfect_depth a1 in\n        let pf2 = perfect_depth a2 in \n        (snd pf1 = snd pf2 && fst pf1 && fst pf2, 1+ max(snd pf1)(snd pf2))\n  in fst(perfect_depth (a)) ;;",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "size",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "size",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size (Node (4, Node (2, Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size (Node (-2, Node (-2, Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size\n  (Node (4, Node (4, Node (-3, Nil, Nil), Nil),\n    Node (-3, Node (4, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size (Node (0, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size\n  (Node (0,\n    Node (4, Node (3, Node (1, Nil, Node (4, Nil, Nil)), Node (3, Nil, Nil)),\n     Node (1, Node (2, Nil, Nil), Nil)),\n    Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "8",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size (Node (3, Nil, Node (1, Nil, Node (3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size\n  (Node (3,\n    Node (0, Node (4, Nil, Node (4, Nil, Node (3, Node (4, Nil, Nil), Nil))),\n     Node (4, Nil, Nil)),\n    Node (-5, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "8",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size\n  (Node (-2, Node (2, Nil, Nil),\n    Node (4, Nil, Node (2, Node (-2, Nil, Nil), Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size (Node (-5, Node (0, Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "depth",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "depth",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth\n  (Node (0,\n    Node (1, Node (-4, Node (-2, Nil, Nil), Nil),\n     Node (2, Nil, Node (1, Nil, Nil))),\n    Node (4, Nil, Node (2, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth (Node (2, Nil, Node (-1, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth\n  (Node (-5,\n    Node (-1, Node (-2, Node (1, Nil, Nil), Nil),\n     Node (-4, Nil, Node (-3, Nil, Nil))),\n    Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth (Node (4, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth (Node (1, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth (Node (-4, Nil, Node (0, Node (4, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth\n  (Node (-2,\n    Node (1, Node (0, Nil, Node (0, Nil, Nil)), Node (-4, Nil, Nil)), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth (Node (-2, Node (4, Nil, Node (-3, Nil, Nil)), Node (0, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth\n  (Node (4, Node (2, Node (-5, Nil, Nil), Node (-4, Nil, Nil)),\n    Node (-1, Nil, Node (-1, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth\n  (Node (-1,\n    Node (1, Nil,\n     Node (4, Node (-5, Node (-3, Nil, Nil), Nil), Node (3, Nil, Nil))),\n    Node (1, Node (3, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "sum",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "sum",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum\n  (Node (1,\n    Node (-5, Node (-3, Nil, Node (-5, Nil, Nil)),\n     Node (2, Node (3, Nil, Nil), Nil)),\n    Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-7",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum (Node (1, Nil, Node (2, Nil, Node (-1, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum\n  (Node (-1, Node (1, Node (1, Node (0, Nil, Nil), Nil), Nil),\n    Node (0, Node (-3, Nil, Node (1, Nil, Node (3, Nil, Nil))),\n     Node (1, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum (Node (-2, Nil, Node (-1, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum\n  (Node (3, Node (1, Node (-5, Node (2, Nil, Nil), Node (0, Nil, Nil)), Nil),\n    Node (-2, Node (-2, Nil, Node (2, Nil, Nil)), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum\n  (Node (-5,\n    Node (-5, Node (-3, Node (0, Nil, Node (-5, Nil, Nil)), Nil), Nil),\n    Node (1, Nil, Node (2, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-15",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum\n  (Node (-3,\n    Node (-3, Node (4, Node (3, Nil, Node (4, Nil, Nil)), Nil), Nil),\n    Node (-5, Node (0, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum\n  (Node (-4,\n    Node (3, Node (4, Node (-5, Nil, Nil), Nil), Node (3, Nil, Nil)),\n    Node (1, Node (3, Nil, Nil), Node (1, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "6",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum\n  (Node (-2, Node (-3, Node (-5, Nil, Nil), Nil),\n    Node (4, Node (-3, Nil, Node (3, Nil, Nil)), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-6",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "contains",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "contains",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains\n  -5\n  (Node (1, Nil,\n    Node (4, Nil, Node (-5, Nil, Node (-5, Nil, Node (-2, Nil, Nil))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains\n  -1\n  (Node (-5, Nil,\n    Node (-5,\n     Node (3, Nil,\n      Node (-5, Nil, Node (-5, Node (-4, Nil, Nil), Node (-1, Nil, Nil)))),\n     Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains\n  3\n  (Node (3, Nil,\n    Node (-3, Node (-2, Nil, Nil), Node (-3, Node (-1, Nil, Nil), Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains 3 (Node (3, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains -2 (Node (-3, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains\n  -3\n  (Node (-4, Node (4, Nil, Node (-3, Nil, Nil)),\n    Node (-1, Node (-3, Nil, Node (-4, Node (3, Nil, Nil), Nil)),\n     Node (3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains 42 Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains\n  3\n  (Node (2, Node (0, Nil, Nil),\n    Node (3, Node (2, Nil, Nil),\n     Node (-3, Node (-5, Nil, Node (-4, Nil, Nil)), Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains 42 Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains -4 (Node (-4, Node (-1, Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "elements",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "elements",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements (Node (-5, Node (-4, Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -5]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements\n  (Node (4,\n    Node (3, Node (4, Node (-1, Nil, Nil), Nil),\n     Node (2, Node (4, Nil, Nil), Node (-3, Nil, Nil))),\n    Node (-4, Nil, Node (3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; 4; 3; 4; 2; -3; 4; -4; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements (Node (-1, Node (-4, Node (-3, Nil, Nil), Node (0, Nil, Nil)), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -4; 0; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements (Node (2, Node (3, Node (-4, Nil, Nil), Nil), Node (-2, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; 3; 2; -2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements (Node (-1, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements\n  (Node (-3, Nil,\n    Node (-4, Node (3, Node (-1, Nil, Nil), Node (-5, Nil, Nil)),\n     Node (-5, Node (4, Nil, Nil), Node (-5, Nil, Nil)))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -1; 3; -5; -4; 4; -5; -5]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements (Node (-4, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements (Node (0, Nil, Node (4, Node (-1, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; -1; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements (Node (-1, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements\n  (Node (4, Node (3, Nil, Node (-2, Nil, Nil)),\n    Node (2, Node (0, Nil, Nil),\n     Node (1, Node (2, Nil, Node (0, Nil, Nil)), Node (2, Nil, Nil)))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; -2; 4; 0; 2; 2; 0; 1; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "perfect",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "perfect",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect\n  (Node (-1,\n    Node (-3,\n     Node (-5, Node (-2, Node (3, Nil, Nil), Node (1, Nil, Nil)),\n      Node (-1, Node (-3, Nil, Nil), Node (-4, Nil, Nil))),\n     Node (2, Node (-3, Node (-2, Nil, Nil), Node (-1, Nil, Nil)),\n      Node (-3, Node (-5, Nil, Nil), Node (3, Nil, Nil)))),\n    Node (-4,\n     Node (3, Node (2, Node (0, Nil, Nil), Node (-3, Nil, Nil)),\n      Node (0, Node (-4, Nil, Nil), Node (-2, Nil, Nil))),\n     Node (-3, Node (1, Node (-2, Nil, Nil), Node (0, Nil, Nil)),\n      Node (3, Node (-3, Nil, Nil), Node (2, Nil, Nil))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect\n  (Node (0,\n    Node (0, Node (4, Node (-4, Nil, Nil), Node (-5, Nil, Nil)),\n     Node (3, Node (2, Nil, Nil), Node (4, Nil, Nil))),\n    Node (1, Node (-2, Nil, Nil), Node (-1, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect\n  (Node (3, Node (-3, Node (-4, Nil, Nil), Node (-4, Nil, Nil)),\n    Node (2, Node (3, Nil, Nil), Node (1, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect\n  (Node (1, Node (4, Node (4, Nil, Nil), Node (-2, Nil, Nil)),\n    Node (-5, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect\n  (Node (-4,\n    Node (2,\n     Node (-3,\n      Node (-4, Node (-1, Node (3, Nil, Nil), Node (-1, Nil, Nil)),\n       Node (-5, Node (-5, Nil, Nil), Node (-2, Nil, Nil))),\n      Node (0, Node (0, Node (2, Nil, Nil), Node (-3, Nil, Nil)),\n       Node (-4, Node (-3, Nil, Nil), Node (4, Nil, Nil)))),\n     Node (3,\n      Node (1, Node (0, Node (-5, Nil, Nil), Node (-3, Nil, Nil)),\n       Node (3, Node (2, Nil, Nil), Node (4, Nil, Nil))),\n      Node (-1, Node (-3, Node (-1, Nil, Nil), Node (2, Nil, Nil)),\n       Node (-3, Node (0, Nil, Nil), Node (2, Nil, Nil))))),\n    Node (-1,\n     Node (-4,\n      Node (-5, Node (2, Node (-3, Nil, Nil), Node (-1, Nil, Nil)),\n       Node (3, Node (-3, Nil, Nil), Node (-2, Nil, Nil))),\n      Node (-2, Node (-2, Node (-3, Nil, Nil), Node (0, Nil, Nil)),\n       Node (-4, Node (-4, Nil, Nil), Node (-5, Nil, Nil)))),\n     Node (-1,\n      Node (0, Node (3, Node (-2, Nil, Nil), Node (1, Nil, Nil)),\n       Node (0, Node (4, Nil, Nil), Node (-2, Nil, Nil))),\n      Node (2, Node (1, Node (-1, Nil, Nil), Node (4, Nil, Nil)),\n       Node (-5, Node (0, Nil, Nil), Node (1, Nil, Nil)))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect (Node (0, Node (1, Nil, Nil), Node (-3, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect\n  (Node (-5,\n    Node (-4, Node (0, Nil, Node (-4, Nil, Nil)),\n     Node (1, Node (-1, Nil, Node (3, Nil, Nil)), Nil)),\n    Node (2, Node (-1, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect\n  (Node (3,\n    Node (4,\n     Node (-2, Node (-3, Node (4, Nil, Nil), Node (-2, Nil, Nil)),\n      Node (3, Node (-1, Nil, Nil), Node (-5, Nil, Nil))),\n     Node (4, Node (4, Node (4, Nil, Nil), Node (2, Nil, Nil)),\n      Node (-4, Node (0, Nil, Nil), Node (-5, Nil, Nil)))),\n    Node (1,\n     Node (-2, Node (-3, Node (-3, Nil, Nil), Node (-5, Nil, Nil)),\n      Node (4, Node (-1, Nil, Nil), Node (-3, Nil, Nil))),\n     Node (4, Node (-4, Node (-1, Nil, Nil), Node (-3, Nil, Nil)),\n      Node (-4, Node (2, Nil, Nil), Node (2, Nil, Nil))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect (Node (1, Node (4, Nil, Nil), Node (1, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1633336687.266366
    },
    "4.2_arbres_abr": {
      "grade": 100,
      "solution": "let rec contains_bst x a =\n  match a with \n  |Nil->false\n  |Node(e,a1,a2) when x= e-> true\n  |Node(e,a1,a2) when x< e-> contains_bst x a1\n  |Node (e,a1,a2)-> contains_bst x a2;;\n\nlet rec add_bst x a =\n  match a with \n  |Nil-> Node(x,Nil,Nil)\n  |Node(e,a1,a2) when x=e -> a\n  |Node(e,a1,a2) when x<e -> Node (e,add_bst x a1,a2)\n  |Node(e,a1,a2) -> Node(e,a1, add_bst x a2);;                             \n\nlet rec bst_of_list l =\n  match l with \n  |[]->Nil\n  |x::r->add_bst (x) (bst_of_list(r));;\n\n\nlet rec bst_of_list_opt l =\n  let rec devise l d f=\n    match l with \n    |[]->[]\n    |x::r when d=0   && d<f ->x::devise r d (f-1)\n    |x::r when d<f-> devise r (d-1) (f-1)\n    |x::r ->[] in \n  let len= List.length l in \n  let mil = len/2 in \n  let l1= devise l 0 mil in \n  let l2 = devise l (mil+1) len in \n  if len=0 then Nil\n  else Node(List.nth l mil, bst_of_list_opt l1, bst_of_list_opt l2);;\n      \n\n\n\nlet rec is_bst a =\n  let rec max_bst a=\n    match a with \n    |Nil-> (min_int)\n    |Node(e,fg,fd)-> max (max (e)(max_bst fg)) (max_bst fd) in \n  let rec min_bst a= \n    match a with \n    |Nil-> max_int\n    |Node(e,fg,fd)-> min (min (e)(min_bst fg)) (min_bst fd) in \n  match a with \n  |Nil->true\n  |Node(e,fg,fd) when (e<=max_bst fg)||(e>= min_bst fd)->false\n  |Node(e,fg,fd)-> is_bst fg && is_bst fd;;\n                       ",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "contains_bst",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "contains_bst",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  2\n  (Node (3,\n    Node (4, Node (-4, Node (-2, Nil, Nil), Nil),\n     Node (-5, Node (-3, Nil, Nil), Nil)),\n    Node (-1, Node (1, Node (2, Nil, Nil), Nil), Node (0, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  1\n  (Node (0,\n    Node (-2, Node (-4, Node (3, Nil, Nil), Nil),\n     Node (4, Node (2, Nil, Nil), Nil)),\n    Node (1, Node (-3, Node (-1, Nil, Nil), Nil), Node (-5, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  4\n  (Node (0,\n    Node (-3, Node (-4, Node (-5, Nil, Nil), Nil),\n     Node (-1, Node (-2, Nil, Nil), Nil)),\n    Node (3, Node (2, Node (1, Nil, Nil), Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  1\n  (Node (2,\n    Node (-4, Node (-3, Node (4, Nil, Nil), Nil),\n     Node (0, Node (-2, Nil, Nil), Nil)),\n    Node (1, Node (3, Node (-5, Nil, Nil), Nil), Node (-1, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  4\n  (Node (0,\n    Node (-3, Node (-4, Node (-5, Nil, Nil), Nil),\n     Node (-1, Node (-2, Nil, Nil), Nil)),\n    Node (3, Node (2, Node (1, Nil, Nil), Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  -5\n  (Node (0,\n    Node (-3, Node (-4, Node (-5, Nil, Nil), Nil),\n     Node (-1, Node (-2, Nil, Nil), Nil)),\n    Node (3, Node (2, Node (1, Nil, Nil), Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  2\n  (Node (0,\n    Node (-3, Node (-4, Node (-5, Nil, Nil), Nil),\n     Node (-1, Node (-2, Nil, Nil), Nil)),\n    Node (3, Node (2, Node (1, Nil, Nil), Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  3\n  (Node (-3,\n    Node (2, Node (-2, Node (3, Nil, Nil), Nil),\n     Node (0, Node (4, Nil, Nil), Nil)),\n    Node (1, Node (-1, Node (-4, Nil, Nil), Nil), Node (-5, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  0\n  (Node (-1,\n    Node (-2, Node (-5, Node (-4, Nil, Nil), Nil),\n     Node (0, Node (2, Nil, Nil), Nil)),\n    Node (-3, Node (4, Node (1, Nil, Nil), Nil), Node (3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  4\n  (Node (0,\n    Node (-3, Node (-4, Node (-5, Nil, Nil), Nil),\n     Node (-1, Node (-2, Nil, Nil), Nil)),\n    Node (3, Node (2, Node (1, Nil, Nil), Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "add_bst",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "add_bst",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst -1 Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst 3 (Node (-1, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Nil, Node (3, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst 1 (Node (-1, Nil, Node (3, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Nil, Node (3, Node (1, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst 1 (Node (-1, Nil, Node (3, Node (1, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Nil, Node (3, Node (1, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst 3 (Node (-1, Nil, Node (3, Node (1, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Nil, Node (3, Node (1, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst 3 (Node (-1, Nil, Node (3, Node (1, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Nil, Node (3, Node (1, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst 0 (Node (-1, Nil, Node (3, Node (1, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Nil, Node (3, Node (1, Node (0, Nil, Nil), Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst 2 (Node (-1, Nil, Node (3, Node (1, Node (0, Nil, Nil), Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Nil,\n  Node (3, Node (1, Node (0, Nil, Nil), Node (2, Nil, Nil)), Nil)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst\n  -3\n  (Node (-1, Nil,\n    Node (3, Node (1, Node (0, Nil, Nil), Node (2, Nil, Nil)), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Node (-3, Nil, Nil),\n  Node (3, Node (1, Node (0, Nil, Nil), Node (2, Nil, Nil)), Nil)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst\n  -2\n  (Node (-1, Node (-3, Nil, Nil),\n    Node (3, Node (1, Node (0, Nil, Nil), Node (2, Nil, Nil)), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Node (-3, Nil, Node (-2, Nil, Nil)),\n  Node (3, Node (1, Node (0, Nil, Nil), Node (2, Nil, Nil)), Nil)))",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "bst_of_list",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "bst_of_list",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list [3; -3; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-4, Nil, Node (-3, Nil, Node (3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "Nil",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list [-5; -2; -3; -3; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-4, Node (-5, Nil, Nil), Node (-3, Nil, Node (-2, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list [-3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-3, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list [-4; -2; -1; 0; -1; -4; 3; 1; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Node (-4, Nil, Node (-2, Nil, Nil)),\n  Node (1, Node (0, Nil, Nil), Node (3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list [0; -3; 2; 3; -3; 3; 1; -1; 1; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-3, Nil,\n  Node (1, Node (-1, Nil, Node (0, Nil, Nil)),\n   Node (3, Node (2, Nil, Nil), Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list [-1; 1; -3; -1; 3; 2; 1; 4; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-2, Node (-3, Nil, Nil),\n  Node (4, Node (1, Node (-1, Nil, Nil), Node (2, Nil, Node (3, Nil, Nil))),\n   Nil)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list [-1; 0; 0; -2; 3; 0; 2; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-2, Nil,\n  Node (2, Node (0, Node (-1, Nil, Nil), Nil), Node (3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list [-3; 4; 4; 4; 1; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (0, Node (-3, Nil, Nil), Node (1, Nil, Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list [3; -5; 1; 0; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Node (-5, Nil, Nil),\n  Node (0, Nil, Node (1, Nil, Node (3, Nil, Nil)))))",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "bst_of_list_opt",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "bst_of_list_opt",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt [-5; -4; -3; -2; -1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1,\n  Node (-3, Node (-4, Node (-5, Nil, Nil), Nil), Node (-2, Nil, Nil)),\n  Node (3, Node (2, Nil, Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt [-4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-4, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt [-5; -4; -3; -2; -1; 0; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-2, Node (-4, Node (-5, Nil, Nil), Node (-3, Nil, Nil)),\n  Node (0, Node (-1, Nil, Nil), Node (1, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt [-1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt [-2; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (0, Node (-2, Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "Nil",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt [-5; -4; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (0,\n  Node (-3, Node (-4, Node (-5, Nil, Nil), Nil),\n   Node (-1, Node (-2, Nil, Nil), Nil)),\n  Node (3, Node (2, Node (1, Nil, Nil), Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt [-4; -2; -1; 0; 1; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (0, Node (-2, Node (-4, Nil, Nil), Node (-1, Nil, Nil)),\n  Node (3, Node (1, Nil, Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt [-5; -4; -3; 0; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (0, Node (-4, Node (-5, Nil, Nil), Node (-3, Nil, Nil)),\n  Node (3, Node (2, Nil, Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt [-2; -1; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (2, Node (-1, Node (-2, Nil, Nil), Node (1, Nil, Nil)),\n  Node (4, Node (3, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "is_bst",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "is_bst",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst (Node (3, Node (1, Nil, Nil), Node (4, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst (Node (3, Node (3, Nil, Nil), Node (1, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (5, Node (2, Node (1, Nil, Nil), Node (3, Nil, Nil)),\n    Node (7, Node (6, Nil, Nil), Node (8, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst (Node (3, Node (2, Node (1, Nil, Nil), Node (3, Nil, Nil)), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst (Node (3, Nil, Node (4, Node (3, Nil, Nil), Node (5, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (0,\n    Node (-2, Node (-3, Node (-5, Nil, Nil), Nil), Node (-1, Nil, Nil)),\n    Node (3, Node (2, Node (1, Nil, Nil), Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (2,\n    Node (2, Node (3, Node (-5, Nil, Nil), Nil),\n     Node (-1, Node (-4, Nil, Nil), Nil)),\n    Node (2, Node (-4, Node (2, Nil, Nil), Nil), Node (0, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (0,\n    Node (-2, Node (-5, Node (-2, Nil, Nil), Nil),\n     Node (1, Node (0, Nil, Nil), Nil)),\n    Node (-3, Node (3, Node (0, Nil, Nil), Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (-3,\n    Node (-4, Node (3, Node (-4, Nil, Nil), Nil),\n     Node (-5, Node (-5, Nil, Nil), Nil)),\n    Node (2, Node (-2, Node (-4, Nil, Nil), Nil), Node (3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (4,\n    Node (3, Node (-2, Node (2, Nil, Nil), Nil),\n     Node (1, Node (-1, Nil, Nil), Nil)),\n    Node (1, Node (-4, Node (1, Nil, Nil), Nil), Node (-4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (-2,\n    Node (3, Node (3, Node (-4, Nil, Nil), Nil),\n     Node (-1, Node (3, Nil, Nil), Nil)),\n    Node (4, Node (3, Node (2, Nil, Nil), Nil), Node (-3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (-1, Node (-4, Node (-5, Nil, Nil), Node (-2, Nil, Nil)),\n    Node (3, Node (2, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst (Node (-4, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (-2,\n    Node (0, Node (-2, Node (-2, Nil, Nil), Nil),\n     Node (-4, Node (-3, Nil, Nil), Nil)),\n    Node (-4, Node (3, Node (0, Nil, Nil), Nil), Node (-1, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (0,\n    Node (-3, Node (-4, Node (-5, Nil, Nil), Nil),\n     Node (-1, Node (-2, Nil, Nil), Nil)),\n    Node (3, Node (2, Node (1, Nil, Nil), Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1633592441.762423
    },
    "4.3_arbres_poly": {
      "grade": 100,
      "solution": "let rec forall_labels p a =\n  match a with\n  |Nil ->true\n  |Node(n,g,d) when p n -> forall_labels p g && forall_labels p d\n  |Node (n,g,d)->false;;\n\nlet is_uniform x a =\n  forall_labels (fun e-> e=x) a;;\n\nlet rec forall_subtrees pn a =\n  match a with\n  |Nil->true\n  |Node(n,g,d)-> if pn n g d then forall_subtrees pn g && forall_subtrees pn d\n      else false;;\n\nlet is_right_comb a =\n  match a with \n  |Nil->true\n  |Node(x,g,d)->forall_subtrees (fun x g d-> \n      if g=Nil then true \n      else false) a;;\n\nlet sum a =\n  fold_tree (fun x y z-> x+y+z) 0 a;;\n\n\n\n\nlet map_tree f a =\n  let rec fold fn vf a =\n    match a with\n    | Nil -> vf\n    | Node (n, g, d) -> Node (fn n, (fold fn vf g), (fold fn vf d))in \n  fold (fun e-> (f e)) Nil a;;\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "forall_labels",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "forall_labels",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels\n  <fun>\n  (Node ('\\170', Nil, Node (':', Node ('\\246', Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels\n  <fun>\n  (Node ('\\236',\n    Node ('!', Nil, Node ('\\189', Nil, Node ('\\223', Nil, Nil))),\n    Node ('\\003', Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels\n  <fun>\n  (Node ('0', Node ('(', Nil, Node ('\\220', Nil, Nil)),\n    Node ('\\147', Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels\n  <fun>\n  (Node ('p',\n    Node ('N', Nil,\n     Node ('\\221', Node ('\\017', Nil, Node ('X', Nil, Nil)),\n      Node ('\\148', Nil, Nil))),\n    Node ('\\140', Node ('C', Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels\n  <fun>\n  (Node ('\\192', Node ('\\239', Nil, Nil),\n    Node ('\\007', Node ('\\241', Nil, Node ('\\235', Nil, Nil)),\n     Node ('*', Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "forall_labels",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels\n  <fun>\n  (Node (9,\n    Node (-2,\n     Node (-4, Nil,\n      Node (-1, Node (8, Node (1, Node (0, Nil, Nil), Nil), Nil),\n       Node (-2, Nil, Nil))),\n     Nil),\n    Node (-8, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels\n  <fun>\n  (Node (-8, Node (-4, Nil, Node (-1, Nil, Nil)),\n    Node (2, Node (0, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels\n  <fun>\n  (Node (-6,\n    Node (1, Node (-10, Nil, Node (8, Node (-5, Nil, Nil), Nil)), Nil),\n    Node (8, Node (-1, Nil, Nil), Node (2, Nil, Node (-5, Nil, Nil)))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels\n  <fun>\n  (Node (7, Node (5, Node (8, Nil, Nil), Node (-9, Nil, Nil)), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels\n  <fun>\n  (Node (-4, Node (-7, Nil, Node (-6, Node (6, Nil, Nil), Nil)), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "is_uniform",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "is_uniform",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform 'C' (Node ('C', Nil, Node ('C', Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform 'C' Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform\n  'C'\n  (Node ('C', Nil, Node ('C', Nil, Node ('C', Node ('C', Nil, Nil), Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "is_uniform",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform true (Node (true, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform false Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform false (Node (true, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform false (Node (true, Nil, Node (false, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "is_uniform",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform true Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform true (Node (false, Node (true, Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform false Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform false (Node (true, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "forall_subtrees",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "forall_subtrees",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_subtrees <fun> Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_subtrees <fun> Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_subtrees\n  <fun>\n  (Node ('\\235', Node ('\\191', Nil, Nil), Node ('\\240', Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "forall_subtrees",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_subtrees <fun> Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_subtrees <fun> (Node (true, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "is_right_comb",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "is_right_comb",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_right_comb (Node ((), Nil, Node ((), Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_right_comb\n  (Node ((), Nil, Node ((), Nil, Node ((), Nil, Node ((), Nil, Nil)))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_right_comb (Node ((), Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_right_comb Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "sum",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "sum",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum (Node (-4, Nil, Node (8, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum (Node (2, Nil, Node (5, Node (5, Node (-10, Nil, Nil), Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "map_tree",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "map_tree",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map_tree\n  <fun>\n  (Node ('C', Node ('\\179', Node ('m', Nil, Nil), Node ('\\022', Nil, Nil)),\n    Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (67, Node (179, Node (109, Nil, Nil), Node (22, Nil, Nil)), Nil))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map_tree <fun> (Node ('\\168', Node ('\\249', Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (168, Node (249, Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map_tree <fun> (Node ('\\203', Node ('w', Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (203, Node (119, Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map_tree <fun> (Node ('\\212', Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (212, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map_tree <fun> Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "Nil",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1633595130.895027
    },
    "5.1_calcul_prop": {
      "grade": 100,
      "solution": "let rec string_of_formula f =\n  match f with \n  |Prop p-> p\n  |Neg (phi)->\"Neg \"^ string_of_formula phi\n  |And(phi1,phi2)->\"(\"^ string_of_formula phi1 ^\" And \"^string_of_formula phi2^ \")\"\n  |Or(phi1,phi2)->\"(\"^ string_of_formula phi1 ^\" Or \"^string_of_formula phi2^ \")\";;\nstring_of_formula (And (Prop \"p\", Neg (Or (Prop \"q\", Prop \"r\"))));;\nstring_of_formula (Or (Prop \"a\", Prop \"b\"));;\n\nlet rec list_of_props f =\n  \n  \n  match f with \n  |Prop p-> [p]\n  |Neg(phi1)->list_of_props phi1\n  |And(phi1,phi2)->union_sorted (list_of_props phi1)(list_of_props phi2)\n  |Or(phi1,phi2)->union_sorted (list_of_props phi1)(list_of_props phi2);;\n\n\nlet rec eval_formula f l =\n  match f with \n  |Prop p->(match List.assoc p l with \n      |false->false\n      |true->  true\n    )\n  |Neg phi->not(eval_formula phi l)\n  |And(phi1,phi2)->  (eval_formula phi1 l && eval_formula phi2 l)\n  |Or(phi1,phi2)->  (eval_formula phi1 l || eval_formula phi2 l);;                    \n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "string_of_formula",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "string_of_formula",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Neg\n    (And\n      (And\n        (Neg\n          (Neg\n            (And (And (Prop \"f\", Prop \"c\"),\n              And\n               (Neg\n                 (And\n                   (Or (Or (Or (Prop \"b\", Prop \"w\"), Neg (Prop \"b\")),\n                     Prop \"q\"),\n                   And (Prop \"h\", Prop \"l\"))),\n               Or (Or (Prop \"q\", Prop \"z\"), Or (Prop \"c\", Prop \"z\")))))),\n        Neg (Prop \"h\")),\n      And (Neg (Prop \"i\"),\n       Or (Or (And (Neg (Prop \"x\"), Prop \"d\"), Prop \"u\"), Prop \"s\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"Neg ((Neg Neg ((f And c) And (Neg ((((b Or w) Or Neg b) Or q) And (h And l)) And ((q Or z) Or (c Or z)))) And Neg h) And (Neg i And (((Neg x And d) Or u) Or s)))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula (Neg (And (Prop \"p\", Prop \"e\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"Neg (p And e)\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (And\n    (Neg\n      (And (Neg (And (Prop \"w\", Or (Prop \"d\", Prop \"k\"))),\n        Neg\n         (Neg\n           (And (Or (Prop \"f\", Neg (Prop \"i\")),\n             Or (Neg (And (Prop \"m\", Prop \"g\")),\n              Neg (And (Prop \"s\", And (Prop \"k\", Prop \"b\"))))))))),\n    Neg\n     (Or (Neg (And (Prop \"r\", And (Prop \"z\", Prop \"q\"))),\n       And (Prop \"x\", Or (Prop \"m\", Prop \"q\"))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(Neg (Neg (w And (d Or k)) And Neg Neg ((f Or Neg i) And (Neg (m And g) Or Neg (s And (k And b))))) And Neg (Neg (r And (z And q)) Or (x And (m Or q))))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (And (And (Or (Or (Prop \"r\", Prop \"u\"), Prop \"c\"), Prop \"w\"),\n    Or (Prop \"t\", Prop \"k\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"((((r Or u) Or c) And w) And (t Or k))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Or (Prop \"j\",\n    Or\n     (And (Prop \"p\",\n       Neg\n        (And (And (Prop \"f\", Or (Prop \"b\", Prop \"j\")),\n          And (And (Prop \"m\", Prop \"k\"), Prop \"u\")))),\n     And (And (Prop \"e\", Neg (Or (Prop \"d\", Prop \"l\"))), Prop \"h\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(j Or ((p And Neg ((f And (b Or j)) And ((m And k) And u))) Or ((e And Neg (d Or l)) And h)))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula (Neg (And (Prop \"f\", Prop \"q\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"Neg (f And q)\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Neg\n    (Neg\n      (Or (Prop \"z\",\n        Neg\n         (And\n           (Or (And (Or (Prop \"z\", Prop \"i\"), Prop \"p\"),\n             Or (Or (Prop \"e\", Prop \"y\"), Prop \"r\")),\n           And\n            (Neg\n              (Neg (And (Or (Or (Prop \"n\", Prop \"m\"), Prop \"v\"), Prop \"h\"))),\n            Prop \"b\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"Neg Neg (z Or Neg ((((z Or i) And p) Or ((e Or y) Or r)) And (Neg Neg (((n Or m) Or v) And h) And b)))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Neg\n    (Neg\n      (Or (And (Prop \"n\", Prop \"b\"),\n        Neg\n         (Neg\n           (Neg\n             (Neg\n               (Or (Neg (Prop \"z\"),\n                 Or\n                  (Neg (Neg (Or (Prop \"h\", And (Neg (Prop \"p\"), Prop \"g\")))),\n                  And\n                   (And (And (Prop \"d\", Prop \"q\"),\n                     Neg (And (Prop \"l\", Prop \"y\"))),\n                   Or (Or (Prop \"w\", Prop \"r\"),\n                    And (Prop \"d\", Neg (Prop \"x\"))))))))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"Neg Neg ((n And b) Or Neg Neg Neg Neg (Neg z Or (Neg Neg (h Or (Neg p And g)) Or (((d And q) And Neg (l And y)) And ((w Or r) Or (d And Neg x))))))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Neg\n    (And\n      (And\n        (And (Prop \"t\",\n          Neg\n           (And (Or (Prop \"x\", Or (Or (Prop \"e\", Prop \"w\"), Prop \"j\")),\n             Prop \"p\"))),\n        Or (Prop \"j\", Prop \"s\")),\n      Neg (Prop \"s\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"Neg (((t And Neg ((x Or ((e Or w) Or j)) And p)) And (j Or s)) And Neg s)\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Or\n    (Neg\n      (And\n        (Or (Or (Or (Neg (Prop \"z\"), Prop \"c\"), Prop \"b\"),\n          And (Neg (Prop \"u\"), And (Prop \"z\", Prop \"u\"))),\n        Or (Prop \"a\", Prop \"p\"))),\n    And (Or (Or (Prop \"i\", Prop \"s\"), Prop \"t\"), Neg (Neg (Prop \"k\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(Neg ((((Neg z Or c) Or b) Or (Neg u And (z And u))) And (a Or p)) Or (((i Or s) Or t) And Neg Neg k))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (And (And (Prop \"l\", Prop \"a\"),\n    Or (Neg (Neg (Neg (And (Prop \"m\", Prop \"l\")))), Or (Prop \"a\", Prop \"j\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"((l And a) And (Neg Neg Neg (m And l) Or (a Or j)))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Neg\n    (Neg\n      (Neg\n        (Neg\n          (Or (And (Or (Prop \"c\", Prop \"n\"), Or (Neg (Prop \"f\"), Prop \"q\")),\n            Neg\n             (Neg\n               (And (And (Or (Neg (Prop \"i\"), Prop \"g\"), Neg (Prop \"a\")),\n                 Or (Prop \"l\", Or (Prop \"w\", Prop \"v\")))))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"Neg Neg Neg Neg (((c Or n) And (Neg f Or q)) Or Neg Neg (((Neg i Or g) And Neg a) And (l Or (w Or v))))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Or\n    (Or\n      (And (Neg (And (Prop \"t\", Or (Prop \"h\", Prop \"z\"))),\n        Neg\n         (Or (Neg (Neg (Neg (Neg (Neg (Or (Prop \"g\", Neg (Prop \"c\"))))))),\n           Or (Prop \"a\", Neg (Prop \"b\"))))),\n      And (Neg (Or (Prop \"t\", Prop \"s\")),\n       Neg (And (Neg (Prop \"f\"), Neg (Prop \"v\"))))),\n    Neg (Prop \"n\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(((Neg (t And (h Or z)) And Neg (Neg Neg Neg Neg Neg (g Or Neg c) Or (a Or Neg b))) Or (Neg (t Or s) And Neg (Neg f And Neg v))) Or Neg n)\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula (Or (And (Prop \"p\", Neg (Prop \"b\")), Prop \"g\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"((p And Neg b) Or g)\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (And (Prop \"e\",\n    Or\n     (Or (Prop \"k\",\n       And (Prop \"x\",\n        Neg\n         (Neg (Or (Or (And (Prop \"p\", Prop \"b\"), Neg (Prop \"g\")), Prop \"i\"))))),\n     Or (Neg (Prop \"l\"),\n      Or (Or (And (Prop \"a\", Prop \"m\"), Neg (Prop \"e\")),\n       Neg\n        (Neg (Neg (Or (And (Prop \"o\", Prop \"j\"), And (Prop \"v\", Prop \"h\"))))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(e And ((k Or (x And Neg Neg (((p And b) Or Neg g) Or i))) Or (Neg l Or (((a And m) Or Neg e) Or Neg Neg Neg ((o And j) Or (v And h))))))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (And (Or (Prop \"q\", Neg (And (Prop \"i\", Prop \"s\"))),\n    Neg\n     (Or\n       (Neg\n         (Or (Prop \"e\",\n           Or (Prop \"m\",\n            Or (Or (Prop \"k\", Prop \"v\"),\n             And (And (Prop \"k\", Or (Prop \"z\", Prop \"o\")), Prop \"l\"))))),\n       And (Neg (Or (Prop \"c\", And (Prop \"m\", And (Prop \"t\", Prop \"y\")))),\n        And (Or (Neg (Prop \"g\"), Or (Prop \"z\", Prop \"t\")),\n         And (And (Neg (Prop \"l\"), Prop \"g\"), Prop \"g\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"((q Or Neg (i And s)) And Neg (Neg (e Or (m Or ((k Or v) Or ((k And (z Or o)) And l)))) Or (Neg (c Or (m And (t And y))) And ((Neg g Or (z Or t)) And ((Neg l And g) And g)))))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Neg\n    (And\n      (Or (Prop \"c\",\n        And (Or (Prop \"m\", And (Prop \"e\", Neg (Prop \"z\"))),\n         Neg\n          (Or (Neg (Prop \"v\"),\n            Neg (Or (Prop \"k\", Neg (Neg (Neg (Neg (Neg (Prop \"v\"))))))))))),\n      Neg\n       (Neg\n         (Or (Neg (Or (Prop \"q\", Prop \"q\")),\n           Or (Neg (Prop \"z\"),\n            And (Neg (Or (Prop \"w\", Prop \"i\")), And (Prop \"d\", Prop \"b\")))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"Neg ((c Or ((m Or (e And Neg z)) And Neg (Neg v Or Neg (k Or Neg Neg Neg Neg Neg v)))) And Neg Neg (Neg (q Or q) Or (Neg z Or (Neg (w Or i) And (d And b)))))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Or (Or (Neg (Neg (Or (Prop \"a\", Neg (Neg (Prop \"n\"))))), Prop \"u\"),\n    Or\n     (And (Neg (Neg (Or (Neg (Or (Prop \"t\", Prop \"x\")), Prop \"l\"))),\n       Prop \"d\"),\n     Or (Or (Prop \"p\", Prop \"f\"),\n      Or (Or (Prop \"y\", Prop \"r\"), Neg (Or (Neg (Prop \"m\"), Prop \"f\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"((Neg Neg (a Or Neg Neg n) Or u) Or ((Neg Neg (Neg (t Or x) Or l) And d) Or ((p Or f) Or ((y Or r) Or Neg (Neg m Or f)))))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (And\n    (Neg\n      (And (And (Prop \"w\", Prop \"q\"),\n        Neg\n         (And (Or (Prop \"k\", Prop \"a\"),\n           Neg\n            (Or (Neg (Neg (And (Prop \"f\", Prop \"v\"))),\n              Or (Neg (Prop \"t\"),\n               Neg\n                (Or\n                  (And (Prop \"n\",\n                    And (Prop \"f\",\n                     Or (Prop \"a\", And (Prop \"e\", Or (Prop \"e\", Prop \"v\"))))),\n                  Prop \"t\"))))))))),\n    Or (Neg (Prop \"p\"), Prop \"o\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(Neg ((w And q) And Neg ((k Or a) And Neg (Neg Neg (f And v) Or (Neg t Or Neg ((n And (f And (a Or (e And (e Or v))))) Or t))))) And (Neg p Or o))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Or (And (Neg (Prop \"t\"), And (Prop \"i\", Prop \"b\")), Prop \"d\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"((Neg t And (i And b)) Or d)\"",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "list_of_props",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "list_of_props",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props (And (Or (And (Prop \"k\", Prop \"p\"), Prop \"s\"), Prop \"z\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"k\"; \"p\"; \"s\"; \"z\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props\n  (And\n    (Neg\n      (Or (Or (Prop \"n\", Prop \"f\"),\n        Or (And (Prop \"b\", Neg (Neg (Neg (Or (Prop \"u\", Neg (Prop \"j\")))))),\n         Prop \"q\"))),\n    Prop \"r\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"b\"; \"f\"; \"j\"; \"n\"; \"q\"; \"r\"; \"u\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props\n  (Or\n    (Or (Prop \"i\", And (And (Prop \"p\", Prop \"q\"), And (Prop \"q\", Prop \"h\"))),\n    And (Or (Prop \"u\", Neg (Or (Prop \"g\", Prop \"c\"))), Neg (Prop \"f\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"c\"; \"f\"; \"g\"; \"h\"; \"i\"; \"p\"; \"q\"; \"u\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props\n  (Or (Neg (And (Or (Prop \"q\", Prop \"j\"), Neg (Neg (Prop \"d\")))),\n    Neg (Neg (Or (Neg (Neg (Prop \"e\")), And (Prop \"j\", Prop \"b\"))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"b\"; \"d\"; \"e\"; \"j\"; \"q\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props\n  (And (Neg (And (Neg (Prop \"n\"), Or (Prop \"z\", Neg (Prop \"r\")))),\n    And (Prop \"g\", Prop \"j\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"g\"; \"j\"; \"n\"; \"r\"; \"z\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props\n  (Or\n    (Or\n      (And (Or (Prop \"t\", And (Prop \"j\", Prop \"t\")), Or (Prop \"o\", Prop \"u\")),\n      Or (Or (And (Prop \"g\", Prop \"u\"), And (Prop \"n\", Prop \"m\")),\n       Neg (Prop \"j\"))),\n    Neg\n     (Neg\n       (And (And (And (Prop \"y\", Prop \"c\"), Neg (Prop \"w\")), Neg (Prop \"o\"))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"c\"; \"g\"; \"j\"; \"m\"; \"n\"; \"o\"; \"t\"; \"u\"; \"w\"; \"y\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props (And (And (Neg (Prop \"m\"), Prop \"o\"), Neg (Prop \"u\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"m\"; \"o\"; \"u\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props\n  (Neg\n    (And\n      (Neg\n        (And\n          (Neg\n            (And\n              (Or (Prop \"y\",\n                Neg\n                 (Neg\n                   (And\n                     (Or (Prop \"t\",\n                       And (Neg (Prop \"q\"), Or (Prop \"k\", Prop \"t\"))),\n                     And (Prop \"l\", Prop \"v\"))))),\n              Neg (Or (Or (Prop \"b\", Prop \"t\"), Prop \"t\")))),\n          Neg (Neg (Or (Neg (Prop \"m\"), Prop \"x\"))))),\n      Or (Neg (And (Prop \"l\", Prop \"z\")), Prop \"c\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"b\"; \"c\"; \"k\"; \"l\"; \"m\"; \"q\"; \"t\"; \"v\"; \"x\"; \"y\"; \"z\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props\n  (Neg\n    (Or (Prop \"f\",\n      Or\n       (And (Or (Prop \"m\", Prop \"j\"),\n         And\n          (And (Or (Prop \"n\", And (Prop \"r\", Prop \"u\")),\n            Or (Prop \"j\", Prop \"c\")),\n          And (Prop \"v\", Or (Prop \"j\", Prop \"z\")))),\n       Prop \"f\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"c\"; \"f\"; \"j\"; \"m\"; \"n\"; \"r\"; \"u\"; \"v\"; \"z\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props\n  (And\n    (Or (And (Prop \"p\", Prop \"e\"),\n      Neg (Neg (And (Prop \"p\", And (Prop \"g\", Prop \"n\"))))),\n    And (Neg (Neg (Or (Prop \"h\", And (Prop \"k\", Prop \"w\")))),\n     Or (And (Prop \"h\", Prop \"l\"),\n      Or (And (Neg (Prop \"m\"), Prop \"a\"), Prop \"m\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"a\"; \"e\"; \"g\"; \"h\"; \"k\"; \"l\"; \"m\"; \"n\"; \"p\"; \"w\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props\n  (Neg\n    (Neg\n      (Neg\n        (Neg\n          (Neg\n            (Neg\n              (Or\n                (Neg\n                  (And (Prop \"m\",\n                    Or\n                     (And\n                       (Neg\n                         (Or (And (Prop \"o\", Prop \"u\"),\n                           And (Or (Prop \"m\", Prop \"b\"), Prop \"e\"))),\n                       And (Or (Prop \"g\", Neg (Prop \"o\")), Prop \"q\")),\n                     Prop \"o\"))),\n                Neg\n                 (Or (Neg (Or (Prop \"b\", Neg (Prop \"c\"))),\n                   And (Neg (Prop \"v\"), Or (Prop \"m\", Prop \"l\"))))))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"b\"; \"c\"; \"e\"; \"g\"; \"l\"; \"m\"; \"o\"; \"q\"; \"u\"; \"v\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props\n  (Neg\n    (And\n      (Or (Neg (Prop \"n\"),\n        Or (And (Prop \"y\", Or (And (Prop \"c\", Prop \"q\"), Prop \"n\")),\n         And\n          (Neg\n            (And (Neg (Or (Neg (Prop \"k\"), And (Prop \"k\", Prop \"o\"))),\n              Prop \"z\")),\n          Prop \"k\"))),\n      And\n       (And\n         (Or\n           (And (Prop \"e\",\n             Or (Neg (Or (Prop \"f\", Or (Prop \"v\", Prop \"m\"))), Prop \"h\")),\n           Prop \"s\"),\n         Neg (Prop \"v\")),\n       Or (Prop \"u\", Prop \"d\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"c\"; \"d\"; \"e\"; \"f\"; \"h\"; \"k\"; \"m\"; \"n\"; \"o\"; \"q\"; \"s\"; \"u\"; \"v\"; \"y\"; \"z\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props\n  (Neg\n    (Neg\n      (Or\n        (Neg\n          (Neg\n            (Or\n              (And (Or (Or (Prop \"c\", Prop \"c\"), And (Prop \"j\", Prop \"s\")),\n                Or (Prop \"o\",\n                 Or\n                  (And (And (And (Prop \"x\", Prop \"b\"), Prop \"h\"), Prop \"a\"),\n                  And (And (Prop \"c\", Prop \"v\"),\n                   And (Or (Prop \"h\", Prop \"t\"), Prop \"e\"))))),\n              Prop \"w\"))),\n        Or (Prop \"l\",\n         Neg\n          (And (Neg (Prop \"n\"),\n            And (Neg (Prop \"s\"), Neg (Or (Prop \"w\", Prop \"d\"))))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"a\"; \"b\"; \"c\"; \"d\"; \"e\"; \"h\"; \"j\"; \"l\"; \"n\"; \"o\"; \"s\"; \"t\"; \"v\"; \"w\"; \"x\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props\n  (Or (Neg (Prop \"y\"), Or (Prop \"s\", Or (Neg (Prop \"v\"), Prop \"i\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"i\"; \"s\"; \"v\"; \"y\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props (Neg (Neg (Or (Prop \"d\", Or (Prop \"v\", Prop \"c\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"c\"; \"d\"; \"v\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props\n  (And (Prop \"r\",\n    Or (Prop \"m\",\n     Neg\n      (Or\n        (And (And (Prop \"m\", And (Neg (Prop \"m\"), Prop \"o\")),\n          Or\n           (Or (Or (Prop \"e\", And (And (Prop \"l\", Prop \"r\"), Prop \"u\")),\n             Prop \"p\"),\n           Or (Prop \"w\", Prop \"b\"))),\n        And (And (Or (Prop \"v\", Prop \"p\"), Or (Prop \"h\", Prop \"t\")),\n         And (Or (And (Neg (Prop \"j\"), Or (Prop \"p\", Prop \"z\")), Prop \"q\"),\n          And (Prop \"l\", Prop \"q\"))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"b\"; \"e\"; \"h\"; \"j\"; \"l\"; \"m\"; \"o\"; \"p\"; \"q\"; \"r\"; \"t\"; \"u\"; \"v\"; \"w\"; \"z\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props\n  (And\n    (And\n      (Or (Or (Prop \"w\", Neg (And (Prop \"m\", Prop \"j\"))),\n        And (Or (Prop \"v\", Prop \"w\"),\n         And (Or (Prop \"x\", And (Prop \"w\", Prop \"b\")),\n          And (Prop \"e\", Or (Prop \"c\", Prop \"t\"))))),\n      Neg\n       (Neg\n         (Or\n           (And\n             (And (Prop \"v\", Neg (And (Or (Prop \"t\", Prop \"n\"), Prop \"r\"))),\n             Or (Prop \"q\", Or (Prop \"t\", Prop \"r\"))),\n           Prop \"y\")))),\n    And (Neg (Prop \"l\"), Prop \"k\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"b\"; \"c\"; \"e\"; \"j\"; \"k\"; \"l\"; \"m\"; \"n\"; \"q\"; \"r\"; \"t\"; \"v\"; \"w\"; \"x\"; \"y\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props (Neg (Neg (And (And (Prop \"m\", Prop \"c\"), Prop \"q\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"c\"; \"m\"; \"q\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props\n  (Or\n    (Neg\n      (And (Neg (Or (Prop \"x\", Prop \"t\")),\n        Neg (Or (Prop \"f\", Neg (And (Prop \"t\", Prop \"w\")))))),\n    And\n     (And (Or (Prop \"z\", Prop \"s\"),\n       And (Neg (And (And (Prop \"x\", Prop \"d\"), Or (Prop \"s\", Prop \"m\"))),\n        And\n         (And (Prop \"i\",\n           Or (Neg (And (Or (Prop \"i\", Prop \"p\"), Prop \"j\")),\n            And (Neg (Prop \"y\"), Prop \"l\"))),\n         Neg (Or (Prop \"z\", Prop \"h\"))))),\n     Prop \"z\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"d\"; \"f\"; \"h\"; \"i\"; \"j\"; \"l\"; \"m\"; \"p\"; \"s\"; \"t\"; \"w\"; \"x\"; \"y\"; \"z\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_props\n  (Or (Prop \"y\",\n    Neg\n     (And (Neg (Prop \"m\"),\n       Or (Or (Prop \"f\", Prop \"d\"),\n        Neg (And (Neg (Neg (Prop \"r\")), Prop \"z\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"d\"; \"f\"; \"m\"; \"r\"; \"y\"; \"z\"]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "eval_formula",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "eval_formula",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (Neg\n    (And (Neg (Or (Prop \"u\", Prop \"t\")),\n      Neg\n       (Or (Neg (Prop \"h\"),\n         Neg\n          (And\n            (Or (And (And (Prop \"f\", Prop \"a\"), And (Prop \"i\", Prop \"v\")),\n              Or (Prop \"z\", Prop \"x\")),\n            Neg (And (Neg (Prop \"f\"), And (Prop \"q\", Prop \"o\"))))))))))\n  [(\"a\", false); (\"f\", false); (\"h\", false); (\"i\", false); (\"o\", false);\n   (\"q\", true); (\"t\", false); (\"u\", false); (\"v\", true); (\"x\", true);\n   (\"z\", false)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (And\n    (Neg\n      (Or (And (Prop \"z\", Prop \"h\"),\n        Or (Neg (Prop \"z\"),\n         Neg\n          (And\n            (Neg\n              (Or (And (Or (And (Prop \"v\", Prop \"d\"), Prop \"x\"), Prop \"y\"),\n                Prop \"o\")),\n            Prop \"q\"))))),\n    Neg\n     (And (Neg (And (Neg (Or (Prop \"s\", Prop \"u\")), Prop \"o\")),\n       Or\n        (Neg\n          (And (And (Or (Prop \"t\", Prop \"y\"), Prop \"j\"),\n            Neg (And (Or (Prop \"k\", Prop \"u\"), Prop \"o\")))),\n        Or (And (Prop \"w\", Prop \"t\"), Prop \"s\"))))))\n  [(\"d\", true); (\"h\", true); (\"j\", false); (\"k\", false); (\"o\", false);\n   (\"q\", true); (\"s\", true); (\"t\", false); (\"u\", false); (\"v\", true);\n   (\"w\", true); (\"x\", false); (\"y\", false); (\"z\", true)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (Neg\n    (And (Neg (Neg (And (Prop \"i\", Prop \"y\"))),\n      Neg\n       (Neg\n         (And\n           (Or\n             (Neg\n               (Neg\n                 (And (Prop \"d\",\n                   Neg (And (And (Prop \"y\", Prop \"j\"), Prop \"z\"))))),\n             Prop \"q\"),\n           Neg\n            (Or (And (And (Prop \"a\", Prop \"n\"), Prop \"k\"),\n              Neg\n               (Or (Or (And (Prop \"j\", Or (Prop \"g\", Prop \"s\")), Prop \"e\"),\n                 Prop \"j\"))))))))))\n  [(\"a\", false); (\"d\", false); (\"e\", false); (\"g\", true); (\"i\", false);\n   (\"j\", true); (\"k\", false); (\"n\", false); (\"q\", true); (\"s\", false);\n   (\"y\", true); (\"z\", true)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (Neg\n    (And (Or (And (Prop \"e\", Neg (Neg (Prop \"l\"))), Neg (Prop \"z\")),\n      Prop \"u\")))\n  [(\"e\", false); (\"l\", false); (\"u\", false); (\"z\", true)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (And (Or (Neg (Prop \"x\"), Prop \"f\"),\n    Neg (And (Prop \"n\", Or (Prop \"m\", Or (Prop \"r\", Neg (Prop \"p\")))))))\n  [(\"f\", false); (\"m\", false); (\"n\", true); (\"p\", true); (\"r\", true);\n   (\"x\", false)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (And\n    (And (Prop \"b\",\n      And (Or (Prop \"x\", Or (Prop \"u\", Prop \"w\")),\n       And (Neg (Prop \"h\"), Prop \"u\"))),\n    And (Prop \"u\", Neg (Neg (Prop \"i\")))))\n  [(\"b\", false); (\"h\", false); (\"i\", true); (\"u\", false); (\"w\", true);\n   (\"x\", true)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (Neg\n    (Neg\n      (And\n        (Neg\n          (And (Neg (Neg (Prop \"l\")),\n            And\n             (And (Prop \"k\",\n               And (And (Prop \"e\", Neg (And (Prop \"p\", Prop \"z\"))), Prop \"z\")),\n             Or (Neg (And (Prop \"v\", Prop \"s\")),\n              Or (Or (Prop \"o\", Prop \"x\"), Or (Neg (Prop \"y\"), Prop \"s\")))))),\n        Or (Neg (And (Prop \"c\", Prop \"z\")), Neg (Neg (Neg (Prop \"l\"))))))))\n  [(\"c\", false); (\"e\", false); (\"k\", false); (\"l\", false); (\"o\", true);\n   (\"p\", false); (\"s\", true); (\"v\", true); (\"x\", false); (\"y\", false);\n   (\"z\", true)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (Or\n    (Neg\n      (Neg\n        (Neg\n          (Neg\n            (Neg\n              (And\n                (And (And (Prop \"a\", Prop \"d\"),\n                  And (Prop \"f\", Neg (Prop \"t\"))),\n                Prop \"i\")))))),\n    Neg (And (Prop \"d\", Prop \"g\"))))\n  [(\"a\", false); (\"d\", false); (\"f\", false); (\"g\", true); (\"i\", true);\n   (\"t\", true)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (Neg\n    (Neg\n      (Neg\n        (Or\n          (Or\n            (And (Prop \"r\",\n              Or (Prop \"m\",\n               Neg\n                (Or (Prop \"h\",\n                  Neg\n                   (And (Or (Prop \"f\", Prop \"p\"), Or (Prop \"t\", Prop \"x\"))))))),\n            Or\n             (And (Neg (Neg (Neg (Neg (Or (Prop \"b\", Prop \"f\"))))),\n               And (And (Prop \"l\", Or (Prop \"t\", Prop \"j\")),\n                And (Prop \"w\", Prop \"k\"))),\n             And (And (Or (Prop \"k\", Prop \"a\"), And (Prop \"p\", Prop \"b\")),\n              Prop \"c\"))),\n          Or (Prop \"f\", Prop \"k\"))))))\n  [(\"a\", true); (\"b\", true); (\"c\", false); (\"f\", false); (\"h\", false);\n   (\"j\", false); (\"k\", false); (\"l\", false); (\"m\", true); (\"p\", false);\n   (\"r\", false); (\"t\", false); (\"w\", true); (\"x\", true)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (Neg\n    (Neg\n      (Or (Or (Neg (Prop \"p\"), Or (Prop \"q\", Or (Prop \"w\", Neg (Prop \"r\")))),\n        Prop \"p\"))))\n  [(\"p\", false); (\"q\", false); (\"r\", false); (\"w\", true)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1633933919.198566
    },
    "5.2_formules_satisfiables": {
      "grade": 100,
      "solution": "let add_to_all x ll =\n  List.map (fun l -> x::l) ll;;\n\nlet rec interpretations_props l =\n  match l with \n  |[]->[[]] \n  |p::l-> let a= interpretations_props l in (add_to_all (p,false) a) @ (add_to_all (p,true) a) ;;\n\n\nlet interpretations f = \n  interpretations_props (list_of_props f) ;;\n  \n\nlet satisfiable f =\n  let inter= interpretations f in\n  List.exists(eval_formula f) (inter);;\n\nlet tautology f =\n  let inter= interpretations f in\n  List.for_all(eval_formula f) (inter);;\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "add_to_all",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "add_to_all",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all 0 []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all 8 [[]; [2; 3]; [2]; [5; 5]; []]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[8]; [8; 2; 3]; [8; 2]; [8; 5; 5]; [8]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all 1 [[2; 7]; [1; 9; 5; 5]; [7; 3; 4]; []]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[1; 2; 7]; [1; 1; 9; 5; 5]; [1; 7; 3; 4]; [1]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all 6 [[]; [1; 3; 8; 2]; [0; 5]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[6]; [6; 1; 3; 8; 2]; [6; 0; 5]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all 4 [[8; 8]; []; [8; 6; 9]; [0; 4]; [0; 1]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[4; 8; 8]; [4]; [4; 8; 6; 9]; [4; 0; 4]; [4; 0; 1]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all 2 [[7]; [2; 2; 6; 5]; [3]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[2; 7]; [2; 2; 2; 6; 5]; [2; 3]]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "interpretations_props",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "interpretations_props",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interpretations_props []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interpretations_props [\"a\"; \"b\"; \"c\"]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"a\", false); (\"b\", false); (\"c\", false)];\n [(\"a\", false); (\"b\", false); (\"c\", true)];\n [(\"a\", false); (\"b\", true); (\"c\", false)];\n [(\"a\", false); (\"b\", true); (\"c\", true)];\n [(\"a\", true); (\"b\", false); (\"c\", false)];\n [(\"a\", true); (\"b\", false); (\"c\", true)];\n [(\"a\", true); (\"b\", true); (\"c\", false)];\n [(\"a\", true); (\"b\", true); (\"c\", true)]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interpretations_props [\"a\"]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"a\", false)]; [(\"a\", true)]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interpretations_props [\"a\"; \"b\"; \"c\"; \"d\"]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"a\", false); (\"b\", false); (\"c\", false); (\"d\", false)];\n [(\"a\", false); (\"b\", false); (\"c\", false); (\"d\", true)];\n [(\"a\", false); (\"b\", false); (\"c\", true); (\"d\", false)];\n [(\"a\", false); (\"b\", false); (\"c\", true); (\"d\", true)];\n [(\"a\", false); (\"b\", true); (\"c\", false); (\"d\", false)];\n [(\"a\", false); (\"b\", true); (\"c\", false); (\"d\", true)];\n [(\"a\", false); (\"b\", true); (\"c\", true); (\"d\", false)];\n [(\"a\", false); (\"b\", true); (\"c\", true); (\"d\", true)];\n [(\"a\", true); (\"b\", false); (\"c\", false); (\"d\", false)];\n [(\"a\", true); (\"b\", false); (\"c\", false); (\"d\", true)];\n [(\"a\", true); (\"b\", false); (\"c\", true); (\"d\", false)];\n [(\"a\", true); (\"b\", false); (\"c\", true); (\"d\", true)];\n [(\"a\", true); (\"b\", true); (\"c\", false); (\"d\", false)];\n [(\"a\", true); (\"b\", true); (\"c\", false); (\"d\", true)];\n [(\"a\", true); (\"b\", true); (\"c\", true); (\"d\", false)];\n [(\"a\", true); (\"b\", true); (\"c\", true); (\"d\", true)]]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "interpretations",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "interpretations",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interpretations\n  (Or (And (Prop \"t\", Prop \"x\"), Neg (And (Prop \"b\", Prop \"o\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"b\", false); (\"o\", false); (\"t\", false); (\"x\", false)];\n [(\"b\", false); (\"o\", false); (\"t\", false); (\"x\", true)];\n [(\"b\", false); (\"o\", false); (\"t\", true); (\"x\", false)];\n [(\"b\", false); (\"o\", false); (\"t\", true); (\"x\", true)];\n [(\"b\", false); (\"o\", true); (\"t\", false); (\"x\", false)];\n [(\"b\", false); (\"o\", true); (\"t\", false); (\"x\", true)];\n [(\"b\", false); (\"o\", true); (\"t\", true); (\"x\", false)];\n [(\"b\", false); (\"o\", true); (\"t\", true); (\"x\", true)];\n [(\"b\", true); (\"o\", false); (\"t\", false); (\"x\", false)];\n [(\"b\", true); (\"o\", false); (\"t\", false); (\"x\", true)];\n [(\"b\", true); (\"o\", false); (\"t\", true); (\"x\", false)];\n [(\"b\", true); (\"o\", false); (\"t\", true); (\"x\", true)];\n [(\"b\", true); (\"o\", true); (\"t\", false); (\"x\", false)];\n [(\"b\", true); (\"o\", true); (\"t\", false); (\"x\", true)];\n [(\"b\", true); (\"o\", true); (\"t\", true); (\"x\", false)];\n [(\"b\", true); (\"o\", true); (\"t\", true); (\"x\", true)]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interpretations\n  (Or (Prop \"g\", And (Or (Prop \"t\", Prop \"t\"), Or (Prop \"i\", Prop \"d\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"d\", false); (\"g\", false); (\"i\", false); (\"t\", false)];\n [(\"d\", false); (\"g\", false); (\"i\", false); (\"t\", true)];\n [(\"d\", false); (\"g\", false); (\"i\", true); (\"t\", false)];\n [(\"d\", false); (\"g\", false); (\"i\", true); (\"t\", true)];\n [(\"d\", false); (\"g\", true); (\"i\", false); (\"t\", false)];\n [(\"d\", false); (\"g\", true); (\"i\", false); (\"t\", true)];\n [(\"d\", false); (\"g\", true); (\"i\", true); (\"t\", false)];\n [(\"d\", false); (\"g\", true); (\"i\", true); (\"t\", true)];\n [(\"d\", true); (\"g\", false); (\"i\", false); (\"t\", false)];\n [(\"d\", true); (\"g\", false); (\"i\", false); (\"t\", true)];\n [(\"d\", true); (\"g\", false); (\"i\", true); (\"t\", false)];\n [(\"d\", true); (\"g\", false); (\"i\", true); (\"t\", true)];\n [(\"d\", true); (\"g\", true); (\"i\", false); (\"t\", false)];\n [(\"d\", true); (\"g\", true); (\"i\", false); (\"t\", true)];\n [(\"d\", true); (\"g\", true); (\"i\", true); (\"t\", false)];\n [(\"d\", true); (\"g\", true); (\"i\", true); (\"t\", true)]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interpretations\n  (Or\n    (Or (Or (Or (Prop \"x\", And (Prop \"f\", Neg (Prop \"w\"))), Neg (Prop \"h\")),\n      And (Prop \"s\", Prop \"c\")),\n    And (Prop \"v\", Neg (Or (Prop \"b\", Prop \"r\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"b\", false); (\"c\", false); (\"f\", false); (\"h\", false); (\"r\", false);\n  (\"s\", false); (\"v\", false); (\"w\", false); (\"x\", false)];\n [(\"b\", false); (\"c\", false); (\"f\", false); (\"h\", false); (\"r\", false);\n  (\"s\", false); (\"v\", false); (\"w\", false); (\"x\", true)];\n [(\"b\", false); (\"c\", false); (\"f\", false); (\"h\", false); (\"r\", false);\n  (\"s\", false); (\"v\", false); (\"w\", true); (\"x\", false)];\n [(\"b\", false); (\"c\", false); (\"f\", false); (\"h\", false); (\"r\", false);\n  (\"s\", false); (\"v\", false); (\"w\", true); (\"x\", true)];\n [(\"b\", false); (\"c\", false); (\"f\", false); (\"h\", false); (\"r\", false);\n  (\"s\", false); (\"v\", true); (\"w\", false); (\"x\", false)];\n [(\"b\", false); (\"c\", false); (\"f\", false); (\"h\", false); (\"r\", false);\n  (\"s\", false); (\"v\", true); (\"w\", false); (\"x\", true)];\n [(\"b\", false); (\"c\", false); (\"f\", false); (\"h\", false); (\"r\", false);\n  (\"s\", false); (\"v\", true); (\"w\", true); (\"x\", false)];\n [(\"b\", false); (\"c\", false); (\"f\", false); (\"h\", false); (\"r\", false);\n  (\"s\", false); (\"v\", true); (\"w\", true); (\"x\", true)];\n [(\"b\", false); (\"c\", false); (\"f\", false); (\"h\", false); (\"r\", false);\n  (\"s\", true); (\"v\", false); (\"w\", false); (\"x\", false)];\n [(\"b\", false); (\"c\", false); (\"f\", false); (\"h\", false); (\"r\", false);\n  (\"s\", true); (\"v\", false); (\"w\", false); (\"x\", true)];\n [(\"b\", false); (\"c\", false); (\"f\", false); (\"h\", false); (\"r\", false);\n  (\"s\", true); ...];\n ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interpretations\n  (Or (Or (Or (Prop \"n\", Prop \"g\"), And (Prop \"s\", Prop \"r\")), Prop \"q\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"g\", false); (\"n\", false); (\"q\", false); (\"r\", false); (\"s\", false)];\n [(\"g\", false); (\"n\", false); (\"q\", false); (\"r\", false); (\"s\", true)];\n [(\"g\", false); (\"n\", false); (\"q\", false); (\"r\", true); (\"s\", false)];\n [(\"g\", false); (\"n\", false); (\"q\", false); (\"r\", true); (\"s\", true)];\n [(\"g\", false); (\"n\", false); (\"q\", true); (\"r\", false); (\"s\", false)];\n [(\"g\", false); (\"n\", false); (\"q\", true); (\"r\", false); (\"s\", true)];\n [(\"g\", false); (\"n\", false); (\"q\", true); (\"r\", true); (\"s\", false)];\n [(\"g\", false); (\"n\", false); (\"q\", true); (\"r\", true); (\"s\", true)];\n [(\"g\", false); (\"n\", true); (\"q\", false); (\"r\", false); (\"s\", false)];\n [(\"g\", false); (\"n\", true); (\"q\", false); (\"r\", false); (\"s\", true)];\n [(\"g\", false); (\"n\", true); (\"q\", false); (\"r\", true); (\"s\", false)];\n [(\"g\", false); (\"n\", true); (\"q\", false); (\"r\", true); (\"s\", true)];\n [(\"g\", false); (\"n\", true); (\"q\", true); (\"r\", false); (\"s\", false)];\n [(\"g\", false); (\"n\", true); (\"q\", true); (\"r\", false); (\"s\", true)];\n [(\"g\", false); (\"n\", true); (\"q\", true); (\"r\", true); (\"s\", false)];\n [(\"g\", false); (\"n\", true); (\"q\", true); (\"r\", true); (\"s\", true)];\n [(\"g\", true); (\"n\", false); (\"q\", false); (\"r\", false); (\"s\", false)];\n [(\"g\", true); (\"n\", false); (\"q\", false); (\"r\", false); (\"s\", true)];\n [(\"g\", true); (\"n\", false); (\"q\", false); (...); ...]; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interpretations\n  (Or\n    (Or (Or (Prop \"q\", Prop \"p\"),\n      And (Prop \"c\", And (Prop \"q\", Neg (Neg (Or (Prop \"r\", Prop \"a\")))))),\n    Or (Or (Or (Prop \"i\", Prop \"m\"), Neg (Prop \"w\")), Neg (Prop \"a\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"a\", false); (\"c\", false); (\"i\", false); (\"m\", false); (\"p\", false);\n  (\"q\", false); (\"r\", false); (\"w\", false)];\n [(\"a\", false); (\"c\", false); (\"i\", false); (\"m\", false); (\"p\", false);\n  (\"q\", false); (\"r\", false); (\"w\", true)];\n [(\"a\", false); (\"c\", false); (\"i\", false); (\"m\", false); (\"p\", false);\n  (\"q\", false); (\"r\", true); (\"w\", false)];\n [(\"a\", false); (\"c\", false); (\"i\", false); (\"m\", false); (\"p\", false);\n  (\"q\", false); (\"r\", true); (\"w\", true)];\n [(\"a\", false); (\"c\", false); (\"i\", false); (\"m\", false); (\"p\", false);\n  (\"q\", true); (\"r\", false); (\"w\", false)];\n [(\"a\", false); (\"c\", false); (\"i\", false); (\"m\", false); (\"p\", false);\n  (\"q\", true); (\"r\", false); (\"w\", true)];\n [(\"a\", false); (\"c\", false); (\"i\", false); (\"m\", false); (\"p\", false);\n  (\"q\", true); (\"r\", true); (\"w\", false)];\n [(\"a\", false); (\"c\", false); (\"i\", false); (\"m\", false); (\"p\", false);\n  (\"q\", true); (\"r\", true); (\"w\", true)];\n [(\"a\", false); (\"c\", false); (\"i\", false); (\"m\", false); (\"p\", true);\n  (\"q\", false); (\"r\", false); (\"w\", false)];\n [(\"a\", false); (\"c\", false); (\"i\", false); (\"m\", false); (\"p\", true);\n  (\"q\", false); (\"r\", false); (\"w\", true)];\n [(\"a\", false); (\"c\", false); (\"i\", false); (\"m\", false); (\"p\", true);\n  (\"q\", false); (\"r\", true); (\"w\", false)];\n [(\"a\", false); (\"c\", false); (\"i\", false); (\"m\", false); (\"p\", true);\n  (\"q\", false); (\"r\", true); (\"\"... (* string length 1; truncated *), ...);\n  ...];\n ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interpretations\n  (Or (Prop \"b\",\n    And (Or (Prop \"e\", Prop \"j\"), Or (And (Prop \"c\", Prop \"g\"), Prop \"n\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"b\", false); (\"c\", false); (\"e\", false); (\"g\", false); (\"j\", false);\n  (\"n\", false)];\n [(\"b\", false); (\"c\", false); (\"e\", false); (\"g\", false); (\"j\", false);\n  (\"n\", true)];\n [(\"b\", false); (\"c\", false); (\"e\", false); (\"g\", false); (\"j\", true);\n  (\"n\", false)];\n [(\"b\", false); (\"c\", false); (\"e\", false); (\"g\", false); (\"j\", true);\n  (\"n\", true)];\n [(\"b\", false); (\"c\", false); (\"e\", false); (\"g\", true); (\"j\", false);\n  (\"n\", false)];\n [(\"b\", false); (\"c\", false); (\"e\", false); (\"g\", true); (\"j\", false);\n  (\"n\", true)];\n [(\"b\", false); (\"c\", false); (\"e\", false); (\"g\", true); (\"j\", true);\n  (\"n\", false)];\n [(\"b\", false); (\"c\", false); (\"e\", false); (\"g\", true); (\"j\", true);\n  (\"n\", true)];\n [(\"b\", false); (\"c\", false); (\"e\", true); (\"g\", false); (\"j\", false);\n  (\"n\", false)];\n [(\"b\", false); (\"c\", false); (\"e\", true); (\"g\", false); (\"j\", false);\n  (\"n\", true)];\n [(\"b\", false); (\"c\", false); (\"e\", true); (\"g\", false); (\"j\", true);\n  (\"n\", false)];\n [(\"b\", false); (\"c\", false); (\"e\", true); (\"g\", false); (\"j\", true);\n  (\"n\", true)];\n [(\"b\", false); (\"c\", false); (\"e\", true); (\"g\", true); (\"j\", false);\n  (\"n\", false)];\n [(\"b\", false); (\"c\", false); (\"e\", true); (\"g\", true); (\"j\", false);\n  (\"n\", true)];\n [(\"b\", false); (\"c\", false); (\"e\", true); (\"g\", true); (\"j\", true);\n  (\"n\", false)];\n [(\"b\", false); (\"c\", false); (\"e\", true); (\"g\", true); (...); ...]; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interpretations\n  (And\n    (Or\n      (Neg\n        (Neg\n          (Or (Or (Prop \"m\", Neg (And (Prop \"e\", Neg (Prop \"c\")))),\n            And (Or (Or (Neg (Prop \"p\"), Prop \"r\"), Prop \"x\"),\n             And (Or (Prop \"f\", Prop \"i\"), Prop \"p\"))))),\n      Or (Prop \"y\", Neg (Prop \"q\"))),\n    And (Prop \"p\", And (Prop \"d\", Prop \"o\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"c\", false); (\"d\", false); (\"e\", false); (\"f\", false); (\"i\", false);\n  (\"m\", false); (\"o\", false); (\"p\", false); (\"q\", false); (\"r\", false);\n  (\"x\", false); (\"y\", false)];\n [(\"c\", false); (\"d\", false); (\"e\", false); (\"f\", false); (\"i\", false);\n  (\"m\", false); (\"o\", false); (\"p\", false); (\"q\", false); (\"r\", false);\n  (\"x\", false); (\"y\", true)];\n [(\"c\", false); (\"d\", false); (\"e\", false); (\"f\", false); (\"i\", false);\n  (\"m\", false); (\"o\", false); (\"p\", false); (\"q\", false); (\"r\", false);\n  (\"x\", true); (\"y\", false)];\n [(\"c\", false); (\"d\", false); (\"e\", false); (\"f\", false); (\"i\", false);\n  (\"m\", false); (\"o\", false); (\"p\", false); (\"q\", false); (\"r\", false);\n  (\"x\", true); (\"y\", true)];\n [(\"c\", false); (\"d\", false); (\"e\", false); (\"f\", false); (\"i\", false);\n  (\"m\", false); (\"o\", false); (\"p\", false); (\"q\", false); (\"r\", true);\n  (\"x\", false); (\"y\", false)];\n [(\"c\", false); (\"d\", false); (\"e\", false); (\"f\", false); (\"i\", false);\n  (\"m\", false); (\"o\", false); (\"p\", false); (\"q\", false); (\"r\", true);\n  (\"x\", false); (\"y\", true)];\n [(\"c\", false); (\"d\", false); (\"e\", false); (\"f\", false); (\"i\", false);\n  (\"m\", false); (\"o\", false); (\"p\", false); (\"q\", false); (\"r\", true);\n  (\"x\", true); (\"y\", false)];\n [(\"c\", false); (\"d\", false); (\"e\", false); (\"f\", false); (\"i\", false);\n  (\"m\", false); (\"o\", false); (\"p\", false); (\"q\", false); (\"r\", true);\n  (\"x\", true); (\"y\", true)];\n [(\"\"... (* string length 1; truncated *), ...); ...]; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interpretations\n  (And\n    (Neg\n      (And (Or (And (Prop \"v\", Neg (Prop \"i\")), Prop \"x\"),\n        Or\n         (Neg\n           (And (Neg (Prop \"a\"),\n             And (Or (Prop \"p\", Prop \"h\"), And (Prop \"r\", Prop \"r\")))),\n         And (Prop \"s\", Or (Or (Prop \"q\", Prop \"u\"), Prop \"g\"))))),\n    Or (Neg (Prop \"k\"), Prop \"h\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"a\", false); (\"g\", false); (\"h\", false); (\"i\", false); (\"k\", false);\n  (\"p\", false); (\"q\", false); (\"r\", false); (\"s\", false); (\"u\", false);\n  (\"v\", false); (\"x\", false)];\n [(\"a\", false); (\"g\", false); (\"h\", false); (\"i\", false); (\"k\", false);\n  (\"p\", false); (\"q\", false); (\"r\", false); (\"s\", false); (\"u\", false);\n  (\"v\", false); (\"x\", true)];\n [(\"a\", false); (\"g\", false); (\"h\", false); (\"i\", false); (\"k\", false);\n  (\"p\", false); (\"q\", false); (\"r\", false); (\"s\", false); (\"u\", false);\n  (\"v\", true); (\"x\", false)];\n [(\"a\", false); (\"g\", false); (\"h\", false); (\"i\", false); (\"k\", false);\n  (\"p\", false); (\"q\", false); (\"r\", false); (\"s\", false); (\"u\", false);\n  (\"v\", true); (\"x\", true)];\n [(\"a\", false); (\"g\", false); (\"h\", false); (\"i\", false); (\"k\", false);\n  (\"p\", false); (\"q\", false); (\"r\", false); (\"s\", false); (\"u\", true);\n  (\"v\", false); (\"x\", false)];\n [(\"a\", false); (\"g\", false); (\"h\", false); (\"i\", false); (\"k\", false);\n  (\"p\", false); (\"q\", false); (\"r\", false); (\"s\", false); (\"u\", true);\n  (\"v\", false); (\"x\", true)];\n [(\"a\", false); (\"g\", false); (\"h\", false); (\"i\", false); (\"k\", false);\n  (\"p\", false); (\"q\", false); (\"r\", false); (\"s\", false); (\"u\", true);\n  (\"v\", true); (\"x\", false)];\n [(\"a\", false); (\"g\", false); (\"h\", false); (\"i\", false); (\"k\", false);\n  (\"p\", false); (\"q\", false); (\"r\", false); (\"s\", false); (\"u\", true);\n  (\"v\", true); (\"x\", true)];\n [(\"\"... (* string length 1; truncated *), ...); ...]; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interpretations (Neg (And (Prop \"c\", Prop \"c\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"c\", false)]; [(\"c\", true)]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interpretations (And (Neg (Prop \"e\"), Prop \"s\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"e\", false); (\"s\", false)]; [(\"e\", false); (\"s\", true)];\n [(\"e\", true); (\"s\", false)]; [(\"e\", true); (\"s\", true)]]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "satisfiable",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "satisfiable",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "satisfiable (Or (Neg (Prop \"p\"), Prop \"p\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "satisfiable (And (Neg (Prop \"p\"), Prop \"p\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "satisfiable (Neg (Or (Neg (Prop \"p\"), Prop \"p\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "satisfiable (Neg (And (Neg (Prop \"p\"), Prop \"p\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "satisfiable (Or (Neg (Prop \"p\"), And (Prop \"p\", Neg (Prop \"p\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "satisfiable (And (Neg (Prop \"p\"), Or (Prop \"p\", Neg (Prop \"p\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "satisfiable\n  (Or (And (Or (Prop \"v\", Prop \"g\"), And (Prop \"i\", Prop \"i\")),\n    Or (Or (Prop \"r\", Prop \"d\"),\n     Or (And (Prop \"j\", Prop \"s\"),\n      Or (And (Or (Prop \"n\", Neg (Prop \"q\")), Neg (Prop \"p\")), Prop \"q\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "satisfiable\n  (Neg\n    (Or\n      (Neg\n        (Neg\n          (And\n            (And\n              (Or (Neg (Prop \"z\"),\n                Or (Prop \"w\", Or (Prop \"a\", And (Prop \"s\", Prop \"f\")))),\n              Neg (And (Prop \"d\", Prop \"f\"))),\n            Neg (Prop \"k\")))),\n      Or (And (Or (Prop \"e\", Prop \"l\"), Prop \"q\"), And (Prop \"p\", Prop \"e\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "satisfiable\n  (Or (And (Or (Prop \"e\", Prop \"t\"), Or (Prop \"b\", Prop \"y\")),\n    Neg\n     (Or (Neg (Prop \"r\"),\n       And\n        (Neg\n          (Or (Or (Or (Prop \"l\", Prop \"a\"), And (Prop \"e\", Prop \"d\")),\n            And (Prop \"u\", Prop \"r\"))),\n        Or (Prop \"m\", Neg (Prop \"b\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "satisfiable (Neg (Or (Prop \"f\", Or (Prop \"o\", Prop \"q\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "satisfiable\n  (Or\n    (Neg\n      (And (Neg (Neg (And (Neg (Prop \"s\"), Prop \"u\"))),\n        Or\n         (Or\n           (Or (Neg (Prop \"i\"),\n             Or (Prop \"v\", And (Prop \"r\", Neg (Prop \"d\")))),\n           Neg (Prop \"q\")),\n         Prop \"a\"))),\n    Or (Prop \"t\", And (Prop \"p\", Or (Prop \"z\", Prop \"y\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "satisfiable\n  (And\n    (And\n      (And\n        (Or\n          (Or (Or (Or (Prop \"q\", Or (Prop \"h\", Prop \"s\")), Prop \"y\"),\n            Prop \"o\"),\n          And (Prop \"r\", Prop \"p\")),\n        And (Prop \"k\", And (Prop \"e\", Neg (Prop \"a\")))),\n      Neg (And (Prop \"c\", Prop \"x\"))),\n    Neg (Or (Prop \"b\", Or (Neg (Prop \"y\"), Prop \"r\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "satisfiable\n  (And\n    (Neg\n      (Neg\n        (And (Neg (And (Prop \"b\", Prop \"v\")),\n          Neg\n           (And\n             (And (And (Or (Prop \"l\", Prop \"c\"), Neg (Prop \"b\")),\n               And (Neg (And (And (Prop \"a\", Prop \"n\"), Prop \"f\")),\n                Neg (Prop \"z\"))),\n             And (Prop \"t\", Prop \"z\")))))),\n    Prop \"i\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "satisfiable (Neg (Neg (Neg (And (Prop \"e\", Or (Prop \"r\", Prop \"h\"))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "satisfiable\n  (Neg\n    (Or (Prop \"g\",\n      And (Neg (Neg (And (Or (Prop \"y\", Prop \"m\"), Prop \"q\"))), Prop \"p\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "satisfiable\n  (Neg\n    (Neg\n      (And (Or (Prop \"k\", Or (Prop \"u\", Prop \"g\")),\n        Or\n         (Or (Neg (And (Prop \"x\", Prop \"p\")),\n           And (Neg (Neg (Prop \"z\")), Prop \"z\")),\n         Or (Or (Prop \"x\", Prop \"q\"), Prop \"m\"))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "tautology",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "tautology",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "tautology (Or (Neg (Prop \"p\"), Prop \"p\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "tautology (And (Neg (Prop \"p\"), Prop \"p\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "tautology (Neg (Or (Neg (Prop \"p\"), Prop \"p\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "tautology (Neg (And (Neg (Prop \"p\"), Prop \"p\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "tautology (Or (Neg (Prop \"p\"), And (Prop \"p\", Neg (Prop \"p\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "tautology (And (Neg (Prop \"p\"), Or (Prop \"p\", Neg (Prop \"p\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "tautology\n  (And\n    (Neg\n      (And (And (Prop \"r\", Prop \"z\"),\n        And (Or (Prop \"z\", Prop \"z\"), And (Prop \"k\", Neg (Prop \"l\"))))),\n    And (Prop \"h\", Or (Or (Prop \"d\", Neg (Prop \"h\")), Prop \"y\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "tautology\n  (And\n    (And (Neg (Prop \"v\"),\n      Neg\n       (And (Prop \"y\",\n         Or (Or (And (Prop \"e\", Prop \"e\"), And (Prop \"o\", Prop \"c\")),\n          Prop \"m\")))),\n    And (And (Prop \"e\", And (Prop \"s\", Prop \"d\")), Prop \"u\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "tautology\n  (Neg (Neg (Neg (Neg (And (Prop \"g\", And (Neg (Prop \"m\"), Prop \"m\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "tautology\n  (And (Or (Or (Prop \"g\", Prop \"x\"), Neg (And (Prop \"k\", Prop \"i\"))),\n    And\n     (Neg\n       (Neg\n         (Neg\n           (Or (And (Prop \"t\", And (Prop \"t\", Or (Prop \"y\", Prop \"d\"))),\n             Neg (Prop \"n\"))))),\n     And (Or (Prop \"v\", Prop \"j\"), Neg (Or (Prop \"z\", Prop \"w\"))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "tautology\n  (Neg\n    (Or (Or (Prop \"f\", Prop \"y\"),\n      And (And (Prop \"s\", Neg (Neg (Prop \"s\"))),\n       And (Prop \"y\", Neg (And (Neg (And (Prop \"t\", Prop \"h\")), Prop \"f\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "tautology\n  (And\n    (And (Prop \"n\", Or (And (Prop \"c\", Prop \"q\"), Or (Prop \"z\", Prop \"i\"))),\n    Or\n     (Or (And (Prop \"l\", Neg (Neg (Prop \"j\"))),\n       Or (And (Neg (Prop \"n\"), Prop \"g\"), Prop \"f\")),\n     Neg\n      (Or (And (And (Prop \"g\", And (Prop \"m\", Prop \"d\")), Prop \"x\"),\n        And (Prop \"c\", Prop \"j\"))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "tautology\n  (Neg\n    (Neg (Or (Prop \"h\", Or (Neg (Prop \"c\"), And (Prop \"n\", Neg (Prop \"l\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "tautology\n  (And (Prop \"o\",\n    And (Or (Prop \"c\", Prop \"i\"), And (Prop \"b\", Neg (Neg (Prop \"t\"))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "tautology (Or (Prop \"c\", And (Prop \"i\", Prop \"k\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "tautology\n  (Or\n    (And (Or (Prop \"z\", And (Prop \"b\", Prop \"z\")),\n      Neg (Or (Prop \"z\", Neg (Prop \"r\")))),\n    Neg\n     (And (Or (Prop \"a\", Prop \"k\"), And (And (Prop \"c\", Prop \"l\"), Prop \"u\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1633936667.312886
    },
    "5.3_equivalentes": {
      "grade": 100,
      "solution": "let is_consequence f g =\n  tautology (Or(Neg f,g));;\n\nlet are_equivalent f g =\n  tautology (And(Or(Neg f,g),Or(Neg g, f)));;\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "is_consequence",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "is_consequence",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (And (Or (Or (Prop \"g\", Or (Prop \"h\", Or (Prop \"a\", Prop \"b\"))), Prop \"a\"),\n    Or (Or (Prop \"e\", Prop \"c\"),\n     Neg\n      (And (Neg (And (Prop \"i\", Prop \"i\")),\n        And (Neg (Prop \"b\"), Neg (Neg (And (Prop \"b\", Prop \"a\")))))))))\n  (And\n    (Or (Or (Prop \"g\", Neg (Neg (Or (Prop \"h\", Or (Prop \"a\", Prop \"b\"))))),\n      Neg (Neg (Prop \"a\"))),\n    Or (Or (Prop \"e\", Prop \"c\"),\n     Neg\n      (And (Neg (Neg (Neg (And (Prop \"i\", Prop \"i\")))),\n        And (Neg (Neg (Neg (Prop \"b\"))),\n         Neg (Neg (Neg (Neg (And (Prop \"b\", Prop \"a\")))))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (And\n    (And\n      (Neg\n        (Or (Prop \"a\", Or (Neg (Or (Prop \"b\", Prop \"h\")), Neg (Prop \"d\")))),\n      Neg (Neg (Prop \"c\"))),\n    Or (Or (Or (Prop \"d\", Prop \"d\"), Or (Prop \"f\", Prop \"i\")),\n     Or (Prop \"j\", Prop \"d\"))))\n  (Or\n    (Neg\n      (Neg\n        (Neg\n          (Neg\n            (Or (Or (And (Prop \"f\", Prop \"e\"), Prop \"g\"),\n              And (Neg (Or (Prop \"j\", Or (Prop \"b\", Prop \"d\"))),\n               Or (Prop \"g\", Prop \"a\"))))))),\n    And\n     (Neg\n       (Or (Prop \"a\",\n         Neg (Neg (Or (Neg (Or (Prop \"b\", Prop \"h\")), Neg (Prop \"d\")))))),\n     Neg (Neg (Neg (Neg (Prop \"c\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (Or (Or (Prop \"b\", Or (Or (Prop \"e\", Prop \"j\"), Neg (Prop \"d\"))),\n    Neg\n     (Neg\n       (Or (Neg (Prop \"d\"),\n         Neg\n          (Neg\n            (Or\n              (And (Or (Prop \"c\", Prop \"i\"),\n                Neg (Or (Prop \"f\", And (And (Prop \"h\", Prop \"c\"), Prop \"h\")))),\n              Prop \"j\"))))))))\n  (And (And (Prop \"f\", Prop \"f\"), Prop \"f\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (Or\n    (Or (And (Neg (Prop \"b\"), Or (And (Prop \"a\", Prop \"f\"), Neg (Prop \"d\"))),\n      Prop \"g\"),\n    Neg (Or (Prop \"d\", And (Prop \"j\", Prop \"h\")))))\n  (Neg\n    (Neg\n      (Or\n        (Or\n          (And (Neg (Prop \"b\"),\n            Or (And (Prop \"a\", Prop \"f\"), Neg (Prop \"d\"))),\n          Prop \"g\"),\n        Neg (Or (Prop \"d\", And (Prop \"j\", Prop \"h\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (And\n    (Neg\n      (Or (And (Neg (Prop \"a\"), Neg (Prop \"j\")),\n        Or (Prop \"j\", Neg (Prop \"b\")))),\n    Or (Neg (And (And (Or (Prop \"e\", Prop \"b\"), Prop \"h\"), Prop \"a\")),\n     Or\n      (And (Neg (Neg (And (Prop \"h\", Prop \"a\"))),\n        And (Or (Prop \"f\", Prop \"f\"), Or (Prop \"d\", Prop \"j\"))),\n      Neg (Prop \"c\")))))\n  (Or (Neg (Neg (And (Neg (Prop \"e\"), Prop \"j\"))),\n    Neg\n     (Or (Neg (Neg (And (Neg (Prop \"a\"), Neg (Prop \"j\")))),\n       Or (Neg (Neg (Prop \"j\")), Neg (Neg (Neg (Prop \"b\"))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (And\n    (And (Or (Prop \"i\", Prop \"c\"),\n      And (Neg (Neg (Prop \"h\")),\n       Neg\n        (And (And (Prop \"i\", Prop \"e\"),\n          Neg (And (Or (Prop \"b\", Prop \"f\"), Prop \"e\")))))),\n    Neg\n     (And (And (Prop \"a\", Neg (Neg (Prop \"f\"))),\n       Or (And (Prop \"c\", And (Prop \"b\", Prop \"c\")),\n        Or (Prop \"h\", Neg (Prop \"b\")))))))\n  (Or\n    (Neg\n      (Or (Neg (Neg (Prop \"i\")),\n        Neg\n         (Neg\n           (And\n             (And (And (Prop \"j\", And (Prop \"i\", Prop \"b\")),\n               Or (Or (Prop \"g\", Prop \"f\"),\n                Neg (Or (Neg (Prop \"c\"), Prop \"d\")))),\n             Prop \"b\"))))),\n    And (Neg (Neg (Or (Prop \"i\", Prop \"c\"))),\n     Neg\n      (Neg\n        (And (Neg (Neg (Prop \"h\")),\n          Neg\n           (And (And (Prop \"i\", Prop \"e\"),\n             Neg (And (Or (Prop \"b\", Prop \"f\"), Prop \"e\"))))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (Neg\n    (Neg\n      (Neg\n        (And\n          (And (Neg (Neg (Or (Prop \"j\", Prop \"j\"))), Or (Prop \"f\", Prop \"g\")),\n          Neg\n           (Neg\n             (Or (And (Prop \"h\", Prop \"a\"),\n               Or (Neg (Neg (Prop \"h\")), Prop \"i\")))))))))\n  (Neg\n    (Or (And (And (Prop \"d\", Prop \"b\"), Prop \"a\"), Or (Prop \"j\", Prop \"i\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (Neg\n    (And\n      (Or (And (Prop \"c\", Prop \"b\"),\n        Neg\n         (And (Prop \"a\",\n           Neg (And (And (Neg (Prop \"a\"), Prop \"d\"), Prop \"g\"))))),\n      Or (Prop \"d\", Prop \"b\"))))\n  (Or\n    (Or (And (Prop \"e\", Prop \"f\"),\n      And (And (Or (Prop \"e\", Prop \"d\"), Or (Prop \"g\", Prop \"e\")), Prop \"e\")),\n    Or (Or (Prop \"f\", Prop \"g\"), Prop \"h\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (And\n    (Neg\n      (And (And (Prop \"i\", Or (Prop \"e\", Prop \"h\")),\n        Or\n         (And (Neg (And (Prop \"b\", Or (Prop \"c\", Or (Prop \"e\", Prop \"g\")))),\n           And (Or (Prop \"e\", Prop \"b\"), Prop \"i\")),\n         Prop \"b\"))),\n    And (And (Prop \"i\", Prop \"f\"),\n     And (Prop \"g\",\n      And\n       (Neg\n         (And (Or (Or (And (Prop \"g\", Prop \"h\"), Prop \"f\"), Prop \"f\"),\n           Neg (Prop \"a\"))),\n       And (Prop \"d\", Prop \"a\"))))))\n  (Or\n    (Neg\n      (Neg\n        (Neg\n          (Or\n            (And (Neg (Neg (Or (Prop \"i\", Prop \"b\"))),\n              Or (Prop \"i\", Neg (Prop \"f\"))),\n            Neg (Prop \"e\"))))),\n    Neg\n     (Neg\n       (Neg\n         (And (And (Prop \"i\", Or (Prop \"e\", Prop \"h\")),\n           Or\n            (And\n              (Neg (And (Prop \"b\", Or (Prop \"c\", Or (Prop \"e\", Prop \"g\")))),\n              And (Or (Prop \"e\", Prop \"b\"), Prop \"i\")),\n            Prop \"b\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (Neg (Neg (Or (Prop \"i\", Neg (Or (Prop \"b\", And (Prop \"i\", Prop \"c\")))))))\n  (Neg\n    (And\n      (Neg\n        (Or (And (Neg (Prop \"f\"), Prop \"f\"),\n          Or (And (Prop \"a\", Prop \"b\"), Neg (Or (Prop \"e\", Prop \"j\"))))),\n      Neg (Neg (Prop \"f\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (And (And (Neg (Neg (Prop \"h\")), Prop \"j\"),\n    Or (Neg (Prop \"h\"),\n     And (And (And (Prop \"h\", Prop \"i\"), Prop \"j\"),\n      Or (Prop \"j\",\n       And\n        (Or (Neg (Neg (And (Neg (Prop \"j\"), Or (Prop \"b\", Prop \"j\")))),\n          Prop \"e\"),\n        Neg (Prop \"c\")))))))\n  (Neg\n    (Neg\n      (And (And (Neg (Neg (Prop \"h\")), Prop \"j\"),\n        Or (Neg (Prop \"h\"),\n         And (And (And (Prop \"h\", Prop \"i\"), Prop \"j\"),\n          Or (Prop \"j\",\n           And\n            (Or (Neg (Neg (And (Neg (Prop \"j\"), Or (Prop \"b\", Prop \"j\")))),\n              Prop \"e\"),\n            Neg (Prop \"c\")))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (And\n    (Neg\n      (And (Or (Prop \"f\", Or (Prop \"b\", And (Prop \"b\", Prop \"i\"))),\n        And (And (Prop \"b\", Prop \"a\"), Prop \"d\"))),\n    And (Prop \"a\", Neg (Or (Prop \"j\", Prop \"c\")))))\n  (Neg\n    (Neg\n      (And\n        (Neg\n          (And (Or (Prop \"f\", Or (Prop \"b\", And (Prop \"b\", Prop \"i\"))),\n            And (And (Prop \"b\", Prop \"a\"), Prop \"d\"))),\n        And (Prop \"a\", Neg (Or (Prop \"j\", Prop \"c\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (Neg\n    (Or (And (Or (Neg (Prop \"j\"), Prop \"h\"), Neg (Prop \"i\")),\n      And (Or (Prop \"b\", Neg (Neg (Prop \"g\"))), Neg (Prop \"b\")))))\n  (Neg\n    (Neg\n      (Neg\n        (Or (And (Or (Neg (Prop \"j\"), Prop \"h\"), Neg (Prop \"i\")),\n          And (Or (Prop \"b\", Neg (Neg (Prop \"g\"))), Neg (Prop \"b\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (And\n    (Neg\n      (Or\n        (And (And (And (Prop \"h\", Prop \"i\"), Prop \"e\"),\n          Or (Prop \"h\", Prop \"f\")),\n        And\n         (And (Prop \"g\",\n           Neg\n            (Neg\n              (Or (Neg (Neg (And (Prop \"d\", And (Prop \"d\", Prop \"j\")))),\n                And (Prop \"c\", Prop \"g\"))))),\n         And (Or (Prop \"e\", Prop \"j\"), Prop \"j\")))),\n    Or (Prop \"f\", Or (And (Prop \"b\", Prop \"i\"), Prop \"j\"))))\n  (Or\n    (And\n      (Or\n        (Neg (Neg (And (Prop \"h\", And (Prop \"g\", Or (Prop \"i\", Prop \"c\"))))),\n        Neg (Neg (Neg (Prop \"c\")))),\n      Neg\n       (Neg\n         (Neg\n           (And (And (Prop \"f\", Or (And (Prop \"h\", Prop \"f\"), Prop \"i\")),\n             And (And (Prop \"f\", Prop \"a\"), Neg (Prop \"i\"))))))),\n    Neg\n     (Neg\n       (Neg\n         (Or\n           (And (And (And (Prop \"h\", Prop \"i\"), Prop \"e\"),\n             Or (Prop \"h\", Prop \"f\")),\n           And\n            (And (Prop \"g\",\n              Neg\n               (Neg\n                 (Or (Neg (Neg (And (Prop \"d\", And (Prop \"d\", Prop \"j\")))),\n                   And (Prop \"c\", Prop \"g\"))))),\n            And (Or (Prop \"e\", Prop \"j\"), Prop \"j\"))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (Neg\n    (And (Or (Prop \"c\", Or (Prop \"d\", Prop \"h\")), And (Prop \"a\", Prop \"i\"))))\n  (Or\n    (And (Neg (And (Prop \"d\", Or (Prop \"h\", Prop \"b\"))),\n      Neg\n       (And (And (Or (Prop \"f\", Prop \"a\"), Or (Prop \"i\", Prop \"j\")),\n         Prop \"f\"))),\n    Neg (Or (Or (Prop \"f\", Prop \"a\"), Prop \"b\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (Or\n    (Or\n      (And\n        (And (And (Neg (Neg (Prop \"j\")), And (Prop \"a\", Prop \"g\")),\n          Neg (Prop \"e\")),\n        And (Prop \"a\", Prop \"e\")),\n      Neg (Neg (Prop \"i\"))),\n    Or (Or (Neg (Or (Prop \"g\", Prop \"d\")), Or (Prop \"j\", Prop \"a\")),\n     Or (Prop \"d\", Prop \"i\"))))\n  (And (And (Or (Prop \"a\", Prop \"j\"), And (Prop \"j\", Prop \"a\")),\n    Neg\n     (And (Or (Prop \"e\", Neg (Prop \"g\")),\n       And (Prop \"c\",\n        And (Or (Prop \"g\", Prop \"a\"),\n         Neg (Or (Or (Prop \"a\", Prop \"i\"), Prop \"i\"))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (Neg\n    (Or (Or (Prop \"d\", Or (Prop \"e\", Prop \"j\")),\n      And\n       (Neg\n         (Or\n           (Neg\n             (And (Or (Prop \"g\", Neg (And (Prop \"f\", Prop \"g\"))), Prop \"b\")),\n           Prop \"f\")),\n       Neg (Or (Prop \"b\", Or (Or (Prop \"d\", Prop \"a\"), Prop \"j\")))))))\n  (Or (Prop \"j\", Neg (Prop \"j\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (And\n    (Or (Or (And (Prop \"i\", And (Prop \"i\", Prop \"d\")), Prop \"b\"),\n      And (Neg (Neg (Prop \"a\")),\n       Or\n        (Or\n          (And (Neg (And (Prop \"g\", And (Prop \"a\", Prop \"a\"))),\n            Or (Prop \"h\", Prop \"g\")),\n          Neg (Prop \"i\")),\n        Prop \"c\"))),\n    Or\n     (And\n       (Or (Neg (Prop \"d\"),\n         And (And (Prop \"e\", Prop \"b\"), Or (Prop \"e\", Prop \"f\"))),\n       And (Prop \"j\", Prop \"g\")),\n     Neg (Neg (Prop \"g\")))))\n  (Or\n    (Neg\n      (Neg\n        (Or\n          (And\n            (And (Prop \"f\",\n              And (Or (Prop \"j\", Or (Prop \"j\", Or (Prop \"e\", Prop \"f\"))),\n               Or (Prop \"e\", Prop \"d\"))),\n            Neg (Prop \"e\")),\n          Neg\n           (And (Or (Prop \"d\", Prop \"c\"),\n             And (And (Prop \"e\", Prop \"a\"), Prop \"d\")))))),\n    Or (Neg (Neg (Or (And (Prop \"i\", And (Prop \"i\", Prop \"d\")), Prop \"b\"))),\n     And (Neg (Neg (Neg (Neg (Prop \"a\")))),\n      Neg\n       (Neg\n         (Or\n           (Or\n             (And (Neg (And (Prop \"g\", And (Prop \"a\", Prop \"a\"))),\n               Or (Prop \"h\", Prop \"g\")),\n             Neg (Prop \"i\")),\n           Prop \"c\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (Or (And (Prop \"f\", Or (Prop \"d\", Prop \"g\")),\n    Neg (Neg (Neg (Neg (Or (Prop \"j\", And (Prop \"g\", Prop \"i\"))))))))\n  (Neg\n    (Neg\n      (Or (And (Prop \"f\", Or (Prop \"d\", Prop \"g\")),\n        Neg (Neg (Neg (Neg (Or (Prop \"j\", And (Prop \"g\", Prop \"i\"))))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_consequence\n  (Neg\n    (And (Or (Prop \"j\", And (Prop \"e\", Prop \"f\")),\n      Or\n       (Or (Neg (Neg (Or (Prop \"c\", Neg (Prop \"e\")))),\n         Neg (Neg (Neg (And (Prop \"c\", Prop \"j\"))))),\n       Or (And (Prop \"a\", Prop \"a\"), And (Prop \"c\", Prop \"b\"))))))\n  (Or (And (Prop \"a\", Prop \"b\"),\n    And (Prop \"c\", And (Prop \"a\", Neg (Prop \"h\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "are_equivalent",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "are_equivalent",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (Or (Neg (And (Or (Prop \"g\", Or (Prop \"d\", Prop \"d\")), Prop \"c\")),\n    Neg (Prop \"i\")))\n  (Neg (Neg (And (Neg (Prop \"a\"), Or (Prop \"a\", Prop \"e\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (And\n    (And (And (Prop \"f\", Prop \"f\"),\n      Neg\n       (Neg\n         (Neg\n           (Neg\n             (And\n               (And (Or (Neg (And (Prop \"h\", Prop \"d\")), Prop \"g\"),\n                 Neg (Prop \"f\")),\n               Prop \"d\")))))),\n    Neg\n     (And (And (Prop \"h\", Prop \"j\"), Or (Prop \"b\", And (Prop \"e\", Prop \"g\"))))))\n  (Neg\n    (Neg\n      (And\n        (And (And (Prop \"f\", Prop \"f\"),\n          Neg\n           (Neg\n             (Neg\n               (Neg\n                 (And\n                   (And (Or (Neg (And (Prop \"h\", Prop \"d\")), Prop \"g\"),\n                     Neg (Prop \"f\")),\n                   Prop \"d\")))))),\n        Neg\n         (And (And (Prop \"h\", Prop \"j\"),\n           Or (Prop \"b\", And (Prop \"e\", Prop \"g\"))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (And\n    (Neg\n      (Neg\n        (Or (And (Prop \"d\", Neg (Prop \"j\")),\n          Or\n           (Or (And (Or (And (Prop \"h\", Prop \"h\"), Prop \"i\"), Prop \"e\"),\n             And (Prop \"c\", And (Neg (Prop \"f\"), Neg (Prop \"b\")))),\n           Neg (And (Prop \"i\", Prop \"a\")))))),\n    Or (And (And (Prop \"a\", Prop \"f\"), Prop \"h\"),\n     And (Or (Prop \"h\", Neg (Or (Or (Prop \"f\", Prop \"c\"), Prop \"j\"))),\n      And (Prop \"d\", Prop \"g\")))))\n  (Or\n    (Or\n      (Neg\n        (Neg\n          (Neg\n            (Neg\n              (Neg\n                (Neg (And (And (Prop \"i\", Neg (Neg (Prop \"h\"))), Prop \"a\"))))))),\n      Neg (Neg (Neg (And (Prop \"j\", And (Prop \"a\", Prop \"d\")))))),\n    Neg\n     (Neg\n       (Neg\n         (Neg\n           (Or (And (Prop \"d\", Neg (Prop \"j\")),\n             Or\n              (Or (And (Or (And (Prop \"h\", Prop \"h\"), Prop \"i\"), Prop \"e\"),\n                And (Prop \"c\", And (Neg (Prop \"f\"), Neg (Prop \"b\")))),\n              Neg (And (Prop \"i\", Prop \"a\"))))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (Or (And (Neg (Prop \"b\"), Prop \"j\"),\n    And (And (Prop \"j\", Prop \"b\"), Prop \"d\")))\n  (Neg\n    (Neg\n      (Or (And (Neg (Prop \"b\"), Prop \"j\"),\n        And (And (Prop \"j\", Prop \"b\"), Prop \"d\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (Neg\n    (Or\n      (And\n        (Or (And (Neg (Or (Prop \"h\", Prop \"d\")), Or (Prop \"g\", Prop \"j\")),\n          Prop \"j\"),\n        Neg (Neg (Or (Prop \"h\", Prop \"h\")))),\n      Neg\n       (And\n         (Or (Neg (Prop \"i\"),\n           And (And (Prop \"d\", Prop \"f\"), Or (Prop \"h\", Neg (Prop \"j\")))),\n         Prop \"b\")))))\n  (Neg\n    (And (Prop \"b\",\n      Neg\n       (And (And (Or (And (Prop \"j\", Prop \"g\"), Prop \"h\"), Prop \"e\"),\n         Neg (And (Prop \"g\", Prop \"j\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (And (And (Prop \"j\", And (And (Prop \"e\", Prop \"b\"), Prop \"d\")),\n    And (Neg (Prop \"f\"),\n     And (Or (And (Prop \"a\", Prop \"e\"), Prop \"h\"), And (Prop \"g\", Prop \"h\")))))\n  (And (Neg (Neg (And (Prop \"j\", And (And (Prop \"e\", Prop \"b\"), Prop \"d\")))),\n    And (Neg (Neg (Neg (Prop \"f\"))),\n     Neg\n      (Neg\n        (And (Or (And (Prop \"a\", Prop \"e\"), Prop \"h\"),\n          And (Prop \"g\", Prop \"h\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (Or\n    (Or (And (Or (Prop \"a\", Prop \"i\"), And (Prop \"f\", Neg (Prop \"b\"))),\n      Prop \"c\"),\n    Neg\n     (Or (And (Prop \"e\", Prop \"j\"),\n       Or (Prop \"f\", Or (And (Prop \"a\", Prop \"h\"), Or (Prop \"j\", Prop \"f\")))))))\n  (Neg\n    (Neg\n      (Or\n        (Or (And (Or (Prop \"a\", Prop \"i\"), And (Prop \"f\", Neg (Prop \"b\"))),\n          Prop \"c\"),\n        Neg\n         (Or (And (Prop \"e\", Prop \"j\"),\n           Or (Prop \"f\",\n            Or (And (Prop \"a\", Prop \"h\"), Or (Prop \"j\", Prop \"f\")))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (And\n    (And\n      (And\n        (Neg\n          (Or (Prop \"a\", Or (Neg (Neg (Or (Prop \"f\", Prop \"c\"))), Prop \"i\"))),\n        Neg (And (Prop \"b\", Prop \"d\"))),\n      And\n       (And (Neg (And (And (Prop \"h\", Prop \"h\"), Neg (Prop \"f\"))), Prop \"c\"),\n       Neg (Prop \"b\"))),\n    And\n     (Or (And (Prop \"f\", Prop \"f\"),\n       And (And (Neg (Prop \"b\"), And (Or (Prop \"b\", Prop \"g\"), Prop \"e\")),\n        Or (Or (Prop \"h\", And (Neg (Prop \"a\"), Prop \"e\")), Prop \"c\"))),\n     Neg (Neg (Neg (Or (Prop \"a\", Prop \"h\")))))))\n  (Or\n    (Neg\n      (Neg\n        (And\n          (And\n            (Neg\n              (Or\n                (Neg\n                  (Neg\n                    (And\n                      (Neg (Or (Neg (And (Prop \"d\", Prop \"d\")), Prop \"a\")),\n                      Prop \"a\"))),\n                Prop \"i\")),\n            Prop \"a\"),\n          And (And (Prop \"d\", Prop \"b\"), Prop \"i\")))),\n    Neg\n     (Neg\n       (And\n         (And\n           (Neg\n             (Or (Prop \"a\",\n               Or (Neg (Neg (Or (Prop \"f\", Prop \"c\"))), Prop \"i\"))),\n           Neg (And (Prop \"b\", Prop \"d\"))),\n         And\n          (And (Neg (And (And (Prop \"h\", Prop \"h\"), Neg (Prop \"f\"))),\n            Prop \"c\"),\n          Neg (Prop \"b\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (And (Neg (Neg (Neg (Prop \"g\"))),\n    And\n     (And (Neg (And (Prop \"g\", Or (Prop \"f\", Prop \"j\"))),\n       Or (And (Prop \"c\", Prop \"g\"),\n        And (And (Neg (Prop \"d\"), Prop \"g\"), Prop \"a\"))),\n     Or (And (Prop \"a\", Prop \"b\"), Prop \"j\"))))\n  (Or\n    (And (And (Prop \"a\", Prop \"g\"),\n      And\n       (Neg\n         (Neg\n           (Neg\n             (Neg (Or (Or (And (Prop \"c\", Prop \"b\"), Prop \"e\"), Prop \"j\"))))),\n       Neg\n        (Neg\n          (And (Neg (Neg (And (Prop \"e\", Neg (Neg (Neg (Neg (Prop \"c\"))))))),\n            Prop \"d\"))))),\n    Neg (Neg (Neg (Neg (Neg (Prop \"g\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (Neg\n    (Neg\n      (Or (Or (Prop \"d\", Prop \"e\"),\n        Neg (Or (Prop \"a\", Neg (Or (Prop \"a\", Prop \"g\"))))))))\n  (Neg\n    (Neg\n      (Or (Or (Neg (Neg (Prop \"d\")), Neg (Neg (Prop \"e\"))),\n        Neg (Neg (Neg (Or (Prop \"a\", Neg (Or (Prop \"a\", Prop \"g\"))))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (And (Neg (Neg (Or (Or (Prop \"h\", Prop \"j\"), Prop \"h\"))),\n    Neg (And (Neg (Or (Prop \"d\", Prop \"g\")), Neg (Neg (Prop \"c\"))))))\n  (Or\n    (Or (And (Or (Prop \"e\", Prop \"e\"), Neg (Or (Prop \"f\", Prop \"c\"))),\n      Prop \"g\"),\n    Neg\n     (And (And (And (Prop \"i\", Prop \"d\"), Neg (Prop \"a\")),\n       Or\n        (Or (And (Prop \"f\", Prop \"c\"),\n          Neg (And (Prop \"h\", Or (Prop \"e\", Prop \"f\")))),\n        Or (Prop \"b\", Prop \"h\"))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (Neg (Neg (Or (Prop \"b\", Prop \"h\"))))\n  (Neg (Neg (Neg (Neg (Or (Prop \"b\", Prop \"h\"))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (Or\n    (And\n      (Or\n        (And (Prop \"f\", And (Prop \"c\", Neg (Neg (Or (Prop \"d\", Prop \"a\"))))),\n        And (Prop \"a\", Prop \"i\")),\n      Neg (Or (Prop \"e\", Neg (Or (Prop \"a\", Prop \"g\"))))),\n    Or (Prop \"e\", Prop \"d\")))\n  (Neg\n    (Neg\n      (Or\n        (And\n          (Or\n            (And (Prop \"f\",\n              And (Prop \"c\", Neg (Neg (Or (Prop \"d\", Prop \"a\"))))),\n            And (Prop \"a\", Prop \"i\")),\n          Neg (Or (Prop \"e\", Neg (Or (Prop \"a\", Prop \"g\"))))),\n        Or (Prop \"e\", Prop \"d\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (Or (Or (Prop \"i\", Or (Prop \"i\", Or (Prop \"j\", Prop \"c\"))),\n    Or (Prop \"e\", Neg (And (Neg (Prop \"g\"), Prop \"c\")))))\n  (Or\n    (Or (Neg (Neg (Prop \"i\")),\n      Neg (Neg (Or (Prop \"i\", Or (Prop \"j\", Prop \"c\"))))),\n    Or (Neg (Neg (Prop \"e\")),\n     Neg (And (Neg (Neg (Neg (Prop \"g\"))), Prop \"c\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (And\n    (Neg\n      (Or (Or (Prop \"e\", Prop \"a\"),\n        Or (And (Prop \"f\", Prop \"a\"),\n         Neg\n          (And (Neg (Or (And (Prop \"h\", Prop \"a\"), Or (Prop \"e\", Prop \"j\"))),\n            And (Prop \"g\", And (Prop \"b\", Prop \"b\"))))))),\n    Or\n     (Or\n       (Neg\n         (Or\n           (Or (Or (Prop \"c\", And (And (Prop \"b\", Prop \"i\"), Prop \"b\")),\n             And (Prop \"h\", Prop \"a\")),\n           Prop \"i\")),\n       Or (Or (Prop \"a\", Prop \"h\"), Prop \"i\")),\n     Or (Neg (Neg (Neg (Neg (Or (Prop \"d\", Prop \"g\"))))), Prop \"g\"))))\n  (Or\n    (And\n      (Neg\n        (Neg\n          (Or (Neg (Or (Prop \"g\", Prop \"e\")),\n            Neg (And (And (Neg (Prop \"b\"), Prop \"a\"), Prop \"c\"))))),\n      Neg\n       (Neg\n         (And\n           (Or (And (Neg (Prop \"h\"), Prop \"a\"),\n             Neg (And (Or (Prop \"b\", Prop \"e\"), Prop \"i\"))),\n           Or (Prop \"d\", Prop \"d\"))))),\n    Neg\n     (Neg\n       (Neg\n         (Or (Or (Prop \"e\", Prop \"a\"),\n           Or (And (Prop \"f\", Prop \"a\"),\n            Neg\n             (And\n               (Neg (Or (And (Prop \"h\", Prop \"a\"), Or (Prop \"e\", Prop \"j\"))),\n               And (Prop \"g\", And (Prop \"b\", Prop \"b\")))))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (Or (Prop \"i\",\n    And\n     (And (Neg (Prop \"j\"),\n       Or (Neg (Or (Prop \"e\", Or (Or (Prop \"j\", Neg (Prop \"h\")), Prop \"g\"))),\n        Prop \"h\")),\n     Prop \"c\")))\n  (Neg\n    (Or (Or (Or (Prop \"i\", Prop \"j\"), Prop \"f\"),\n      Neg (Neg (Or (Prop \"i\", Prop \"h\"))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (And\n    (And\n      (And (Or (Prop \"b\", Neg (Or (Prop \"i\", Prop \"g\"))),\n        And (Or (Prop \"b\", Prop \"f\"), Prop \"j\")),\n      And (Neg (And (Prop \"g\", Or (Prop \"j\", Prop \"b\"))),\n       Or (Or (Prop \"d\", Prop \"d\"), Prop \"h\"))),\n    Or\n     (Or\n       (And (Neg (And (Prop \"d\", Or (Prop \"i\", Prop \"i\"))),\n         Or (Prop \"b\", Prop \"g\")),\n       Or (Prop \"g\", Or (Neg (Neg (Prop \"h\")), Or (Prop \"i\", Prop \"d\")))),\n     And (Or (Prop \"d\", Prop \"g\"),\n      Or (And (Prop \"f\", Or (Prop \"c\", Prop \"c\")),\n       And (Prop \"f\", Or (Prop \"d\", Prop \"f\")))))))\n  (Or (Neg (Neg (Neg (Or (Neg (Prop \"i\"), Prop \"b\")))),\n    And\n     (And (Neg (Neg (Or (Prop \"b\", Neg (Or (Prop \"i\", Prop \"g\"))))),\n       And (Neg (Neg (Or (Prop \"b\", Prop \"f\"))), Neg (Neg (Prop \"j\")))),\n     And (Neg (Neg (Neg (And (Prop \"g\", Or (Prop \"j\", Prop \"b\"))))),\n      Neg (Neg (Or (Or (Prop \"d\", Prop \"d\"), Prop \"h\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (Or (Neg (Or (Or (Neg (Prop \"f\"), Prop \"g\"), Prop \"h\")),\n    And (And (Prop \"h\", Prop \"a\"),\n     And\n      (Or (And (Prop \"c\", And (Prop \"e\", And (Prop \"c\", Prop \"b\"))),\n        Prop \"j\"),\n      Prop \"j\"))))\n  (Or (Prop \"a\",\n    Neg\n     (And\n       (Or (Prop \"d\",\n         Or (And (Prop \"i\", Prop \"i\"), Neg (And (Prop \"b\", Prop \"c\")))),\n       Or (Prop \"d\", Or (Prop \"c\", Or (Or (Prop \"j\", Prop \"g\"), Prop \"j\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (And\n    (Neg\n      (Neg\n        (Neg\n          (Neg\n            (Or (Neg (Or (Or (Prop \"i\", Prop \"j\"), Neg (Prop \"g\"))),\n              Or\n               (Neg\n                 (Neg\n                   (Or (Prop \"d\",\n                     And (And (Prop \"b\", And (Prop \"b\", Prop \"c\")), Prop \"a\")))),\n               Or (Prop \"a\", Or (Prop \"i\", Prop \"h\")))))))),\n    Neg\n     (Neg\n       (And (Or (Prop \"a\", Prop \"j\"),\n         Or (And (And (Prop \"a\", Prop \"j\"), Prop \"h\"),\n          And (Neg (Prop \"e\"),\n           And (Or (And (Prop \"d\", Neg (Prop \"e\")), Prop \"a\"),\n            Or (Prop \"f\", Prop \"b\")))))))))\n  (Or (Neg (Neg (Neg (Neg (And (Or (Prop \"f\", Prop \"a\"), Prop \"b\"))))),\n    Neg\n     (Neg\n       (Neg\n         (Neg\n           (Neg\n             (Neg\n               (Or (Neg (Or (Or (Prop \"i\", Prop \"j\"), Neg (Prop \"g\"))),\n                 Or\n                  (Neg\n                    (Neg\n                      (Or (Prop \"d\",\n                        And (And (Prop \"b\", And (Prop \"b\", Prop \"c\")),\n                         Prop \"a\")))),\n                  Or (Prop \"a\", Or (Prop \"i\", Prop \"h\"))))))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "are_equivalent\n  (And (Or (Prop \"e\", Prop \"c\"),\n    Neg\n     (Neg\n       (And (Prop \"d\",\n         And (Prop \"c\", And (And (Prop \"i\", Prop \"f\"), Prop \"i\")))))))\n  (And\n    (Or (And (Neg (Prop \"c\"), Neg (Neg (Neg (Prop \"b\")))),\n      Or (Neg (Neg (Prop \"e\")), Neg (Prop \"g\"))),\n    And (Prop \"d\",\n     Or (And (Prop \"i\", Prop \"e\"), Neg (Neg (Or (Prop \"d\", Prop \"b\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1633937722.334893
    },
    "5.4_CNF": {
      "grade": 100,
      "solution": "let rec desc_neg f =\n  match f with \n  |Prop p-> Prop p \n  |Neg(Prop p)->Neg(Prop p) \n  |Neg(Neg phi)-> desc_neg phi \n  |And(phi1,phi2)->And(desc_neg phi1,desc_neg phi2)\n  |Or(phi1,phi2)-> Or(desc_neg phi1, desc_neg phi2) \n  |Neg(And(phi1,phi2))->Or(desc_neg (Neg phi1),desc_neg(Neg phi2))\n  |Neg(Or(phi1,phi2))-> And(desc_neg(Neg phi1),desc_neg (Neg  phi2)) ;;\n\nlet rec desc_or f =\n  match f with \n  |Prop p->Prop p\n  |Neg phi->Neg (desc_or(phi)) \n  |And(phi1,phi2)->And(desc_or phi1,desc_or phi2) \n  |Or(phi1,phi2)-> (let psi1= desc_or(phi1) in let psi2=desc_or (phi2) in \n                    match (psi1,psi2) with \n                    |(And(p,q),r)-> desc_or(And (Or(p,r),(Or(q,r))))\n                    |(r,And(p,q))-> desc_or(And (Or(r,p),(Or(r,q))))\n                    |(_,_)->Or(psi1,psi2));;\n     \n\nlet cnf f =\n  desc_or(desc_neg f);;  \n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "desc_neg",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "desc_neg",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (Or (Or (And (Prop \"r\", Prop \"g\"), Neg (Prop \"v\")),\n    And (And (Prop \"z\", Prop \"i\"), Or (Prop \"a\", Prop \"a\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Or (Or (And (Prop \"r\", Prop \"g\"), Neg (Prop \"v\")),\n  And (And (Prop \"z\", Prop \"i\"), Or (Prop \"a\", Prop \"a\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (And (Or (Neg (Prop \"l\"), Neg (Prop \"b\")),\n    And (And (Prop \"i\", Prop \"v\"), Or (Prop \"v\", Prop \"h\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Or (Neg (Prop \"l\"), Neg (Prop \"b\")),\n  And (And (Prop \"i\", Prop \"v\"), Or (Prop \"v\", Prop \"h\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (And (And (And (Prop \"b\", Prop \"b\"), Neg (Prop \"q\")),\n    And (Or (Prop \"m\", Prop \"h\"), And (Prop \"n\", Prop \"f\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (And (And (Prop \"b\", Prop \"b\"), Neg (Prop \"q\")),\n  And (Or (Prop \"m\", Prop \"h\"), And (Prop \"n\", Prop \"f\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (Or (And (And (Prop \"e\", Prop \"l\"), And (Prop \"q\", Prop \"t\")),\n    Or (And (Prop \"g\", Prop \"b\"), And (Prop \"u\", Prop \"y\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Or (And (And (Prop \"e\", Prop \"l\"), And (Prop \"q\", Prop \"t\")),\n  Or (And (Prop \"g\", Prop \"b\"), And (Prop \"u\", Prop \"y\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (And (Neg (Or (Prop \"i\", Prop \"j\")),\n    And (And (Prop \"l\", Prop \"y\"), Neg (Prop \"o\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (And (Neg (Prop \"i\"), Neg (Prop \"j\")),\n  And (And (Prop \"l\", Prop \"y\"), Neg (Prop \"o\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (Or (Neg (Neg (Prop \"z\")),\n    And (Or (Prop \"f\", Prop \"q\"), And (Prop \"n\", Prop \"s\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Or (Prop \"z\", And (Or (Prop \"f\", Prop \"q\"), And (Prop \"n\", Prop \"s\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg (And (And (Prop \"f\", Prop \"w\"), Neg (Prop \"p\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (And (Prop \"f\", Prop \"w\"), Neg (Prop \"p\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (And (And (Neg (Prop \"i\"), Or (Prop \"u\", Prop \"z\")),\n    Or (Or (Prop \"l\", Prop \"m\"), Or (Prop \"i\", Prop \"p\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (And (Neg (Prop \"i\"), Or (Prop \"u\", Prop \"z\")),\n  Or (Or (Prop \"l\", Prop \"m\"), Or (Prop \"i\", Prop \"p\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (Or\n    (Or (And (Neg (Prop \"x\"), Or (Prop \"q\", Prop \"h\")),\n      Or (Or (Prop \"k\", Prop \"k\"), Or (Prop \"x\", Prop \"x\"))),\n    Neg (Neg (And (Prop \"b\", Prop \"o\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Or\n  (Or (And (Neg (Prop \"x\"), Or (Prop \"q\", Prop \"h\")),\n    Or (Or (Prop \"k\", Prop \"k\"), Or (Prop \"x\", Prop \"x\"))),\n  And (Prop \"b\", Prop \"o\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (Or\n    (Or (Or (Neg (Prop \"g\"), Neg (Prop \"m\")), Neg (Or (Prop \"v\", Prop \"i\"))),\n    Neg (Or (And (Prop \"a\", Prop \"x\"), And (Prop \"m\", Prop \"d\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Or\n  (Or (Or (Neg (Prop \"g\"), Neg (Prop \"m\")),\n    And (Neg (Prop \"v\"), Neg (Prop \"i\"))),\n  And (Or (Neg (Prop \"a\"), Neg (Prop \"x\")),\n   Or (Neg (Prop \"m\"), Neg (Prop \"d\")))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg (Neg (Neg (And (Or (Prop \"q\", Prop \"r\"), Or (Prop \"i\", Prop \"h\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Or (Prop \"q\", Prop \"r\"), Or (Prop \"i\", Prop \"h\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (Or (And (And (Prop \"v\", Prop \"r\"), Or (Prop \"n\", Prop \"v\")),\n    Neg (Or (Prop \"j\", Prop \"y\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Or (And (And (Prop \"v\", Prop \"r\"), Or (Prop \"n\", Prop \"v\")),\n  And (Neg (Prop \"j\"), Neg (Prop \"y\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg (Neg (Or (Prop \"u\", Prop \"d\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Neg (Prop \"u\"), Neg (Prop \"d\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg (And (Or (Prop \"b\", Prop \"l\"), Neg (Prop \"b\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Or (Prop \"b\", Prop \"l\"), Neg (Prop \"b\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (And (Or (Neg (Neg (Prop \"w\")), Neg (Neg (Prop \"r\"))),\n    And (And (And (Prop \"s\", Prop \"g\"), And (Prop \"v\", Prop \"c\")),\n     Neg (Neg (Prop \"w\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Or (Prop \"w\", Prop \"r\"),\n  And (And (And (Prop \"s\", Prop \"g\"), And (Prop \"v\", Prop \"c\")), Prop \"w\")))",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "desc_or",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "desc_or",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or\n  (And (Or (And (Prop \"w\", Prop \"v\"), And (Prop \"n\", Prop \"q\")),\n    And (Or (Prop \"e\", Prop \"q\"), Neg (Prop \"m\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And (And (Or (Prop \"w\", Prop \"n\"), Or (Prop \"w\", Prop \"q\")),\n    And (Or (Prop \"v\", Prop \"n\"), Or (Prop \"v\", Prop \"q\"))),\n  And (Or (Prop \"e\", Prop \"q\"), Neg (Prop \"m\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or (Neg (Prop \"d\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Neg (Prop \"d\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or\n  (And (Or (Neg (Prop \"o\"), Neg (Prop \"j\")),\n    And (Neg (Prop \"m\"), Neg (Prop \"g\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Or (Neg (Prop \"o\"), Neg (Prop \"j\")),\n  And (Neg (Prop \"m\"), Neg (Prop \"g\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or\n  (Or\n    (And (And (Neg (Prop \"u\"), Neg (Prop \"n\")),\n      Or (Neg (Prop \"s\"), Neg (Prop \"f\"))),\n    Neg (Prop \"h\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And (Or (Neg (Prop \"u\"), Neg (Prop \"h\")),\n    Or (Neg (Prop \"n\"), Neg (Prop \"h\"))),\n  Or (Or (Neg (Prop \"s\"), Neg (Prop \"f\")), Neg (Prop \"h\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or\n  (Or (And (Neg (Prop \"w\"), Neg (Prop \"o\")),\n    And (Or (Prop \"r\", Prop \"w\"), Neg (Prop \"k\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And (Or (Neg (Prop \"w\"), Or (Prop \"r\", Prop \"w\")),\n    Or (Neg (Prop \"w\"), Neg (Prop \"k\"))),\n  And (Or (Neg (Prop \"o\"), Or (Prop \"r\", Prop \"w\")),\n   Or (Neg (Prop \"o\"), Neg (Prop \"k\")))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or (Or (And (Prop \"m\", Prop \"d\"), And (Prop \"g\", Prop \"f\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (And (Or (Prop \"m\", Prop \"g\"), Or (Prop \"m\", Prop \"f\")),\n  And (Or (Prop \"d\", Prop \"g\"), Or (Prop \"d\", Prop \"f\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or (Or (And (Prop \"w\", Prop \"k\"), Or (Prop \"t\", Prop \"r\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Or (Prop \"w\", Or (Prop \"t\", Prop \"r\")),\n  Or (Prop \"k\", Or (Prop \"t\", Prop \"r\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or\n  (And (Or (Or (Neg (Prop \"u\"), Neg (Prop \"j\")), Prop \"g\"),\n    Or (And (Or (Prop \"x\", Prop \"j\"), Neg (Prop \"b\")),\n     Or (And (Prop \"l\", Prop \"g\"), Or (Prop \"r\", Prop \"f\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Or (Or (Neg (Prop \"u\"), Neg (Prop \"j\")), Prop \"g\"),\n  And\n   (And\n     (Or (Or (Prop \"x\", Prop \"j\"), Or (Prop \"l\", Or (Prop \"r\", Prop \"f\"))),\n     Or (Or (Prop \"x\", Prop \"j\"), Or (Prop \"g\", Or (Prop \"r\", Prop \"f\")))),\n   And (Or (Neg (Prop \"b\"), Or (Prop \"l\", Or (Prop \"r\", Prop \"f\"))),\n    Or (Neg (Prop \"b\"), Or (Prop \"g\", Or (Prop \"r\", Prop \"f\")))))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or (Or (Neg (Prop \"v\"), Neg (Prop \"l\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Or (Neg (Prop \"v\"), Neg (Prop \"l\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or (And (Prop \"z\", And (Neg (Prop \"v\"), Neg (Prop \"t\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Prop \"z\", And (Neg (Prop \"v\"), Neg (Prop \"t\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or\n  (Or\n    (Or (Or (Neg (Prop \"j\"), Neg (Prop \"u\")),\n      And (Neg (Prop \"i\"), And (Prop \"z\", Prop \"u\"))),\n    Or (And (And (Prop \"y\", Prop \"x\"), And (Prop \"h\", Prop \"x\")),\n     And (And (Prop \"a\", Prop \"e\"), Neg (Prop \"q\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And\n    (And\n      (And\n        (And\n          (Or (Or (Or (Neg (Prop \"j\"), Neg (Prop \"u\")), Neg (Prop \"i\")),\n            Or (Prop \"y\", Prop \"a\")),\n          Or (Or (Or (Neg (Prop \"j\"), Neg (Prop \"u\")), Neg (Prop \"i\")),\n           Or (Prop \"y\", Prop \"e\"))),\n        Or (Or (Or (Neg (Prop \"j\"), Neg (Prop \"u\")), Neg (Prop \"i\")),\n         Or (Prop \"y\", Neg (Prop \"q\")))),\n      And\n       (And\n         (Or (Or (Or (Neg (Prop \"j\"), Neg (Prop \"u\")), Neg (Prop \"i\")),\n           Or (Prop \"x\", Prop \"a\")),\n         Or (Or (Or (Neg (Prop \"j\"), Neg (Prop \"u\")), Neg (Prop \"i\")),\n          Or (Prop \"x\", Prop \"e\"))),\n       Or (Or (Or (Neg (Prop \"j\"), Neg (Prop \"u\")), Neg (Prop \"i\")),\n        Or (Prop \"x\", Neg (Prop \"q\"))))),\n    And\n     (And\n       (And\n         (Or (Or (Or (Neg (Prop \"j\"), Neg (Prop \"u\")), Neg (Prop \"i\")),\n           Or (Prop \"h\", Prop \"a\")),\n         Or (Or (Or (Neg (Prop \"j\"), Neg (Prop \"u\")), Neg (Prop \"i\")),\n          Or (Prop \"h\", Prop \"e\"))),\n       Or (Or (Or (Neg (Prop \"j\"), Neg (Prop \"u\")), Neg (Prop \"i\")),\n        Or (Prop \"h\", Neg (Prop \"q\")))),\n     And\n      (And\n        (Or (Or (Or (Neg (Prop \"j\"), Neg (Prop \"u\")), Neg (Prop \"i\")),\n          Or (Prop \"x\", Prop \"a\")),\n        Or (Or (Or (Neg (Prop \"j\"), Neg (Prop \"u\")), Neg (Prop \"i\")),\n         Or (Prop \"x\", Prop \"e\"))),\n      Or (Or (Or (Neg (Prop \"j\"), Neg (Prop \"u\")), Neg (Prop \"i\")),\n       Or (Prop \"x\", Neg (Prop \"q\")))))),\n  And\n   (And\n     (And\n       (And\n         (And\n           (Or (Or (Or (Neg (Prop \"j\"), Neg (Prop \"u\")), Prop \"z\"),\n             Or (Prop \"y\", Prop \"a\")),\n           Or (Or (Or (Neg (Prop \"j\"), Neg (Prop \"u\")), Prop \"z\"),\n            Or (Prop \"y\", Prop \"e\"))),\n         Or (Or (Or (Neg (Prop \"j\"), Neg (Prop \"u\")), Prop \"z\"),\n          Or (Prop \"y\", Neg (Prop \"q\")))),\n       And\n        (And\n          (Or (Or (Or (Neg (Prop \"j\"), Neg (Prop \"u\")), Prop \"z\"),\n            Or (Prop \"x\", Prop \"a\")),\n          Or (Or (Or (Neg (Prop \"j\"), Neg (Prop ...)), ...), ...)), ...)),\n       ...),\n     ...)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or (And (Prop \"w\", And (Neg (Prop \"p\"), Neg (Prop \"n\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Prop \"w\", And (Neg (Prop \"p\"), Neg (Prop \"n\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or\n  (Or\n    (And (Or (Or (Prop \"p\", Prop \"c\"), Neg (Prop \"j\")),\n      Or (Neg (Prop \"q\"), And (Prop \"r\", Prop \"c\"))),\n    And (Or (Neg (Prop \"j\"), And (Prop \"x\", Prop \"n\")),\n     Or (Neg (Prop \"s\"), Or (Prop \"n\", Prop \"h\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And\n    (And\n      (Or (Or (Or (Prop \"p\", Prop \"c\"), Neg (Prop \"j\")),\n        Or (Neg (Prop \"j\"), Prop \"x\")),\n      Or (Or (Or (Prop \"p\", Prop \"c\"), Neg (Prop \"j\")),\n       Or (Neg (Prop \"j\"), Prop \"n\"))),\n    Or (Or (Or (Prop \"p\", Prop \"c\"), Neg (Prop \"j\")),\n     Or (Neg (Prop \"s\"), Or (Prop \"n\", Prop \"h\")))),\n  And\n   (And\n     (And (Or (Or (Neg (Prop \"q\"), Prop \"r\"), Or (Neg (Prop \"j\"), Prop \"x\")),\n       Or (Or (Neg (Prop \"q\"), Prop \"r\"), Or (Neg (Prop \"j\"), Prop \"n\"))),\n     Or (Or (Neg (Prop \"q\"), Prop \"r\"),\n      Or (Neg (Prop \"s\"), Or (Prop \"n\", Prop \"h\")))),\n   And\n    (And (Or (Or (Neg (Prop \"q\"), Prop \"c\"), Or (Neg (Prop \"j\"), Prop \"x\")),\n      Or (Or (Neg (Prop \"q\"), Prop \"c\"), Or (Neg (Prop \"j\"), Prop \"n\"))),\n    Or (Or (Neg (Prop \"q\"), Prop \"c\"),\n     Or (Neg (Prop \"s\"), Or (Prop \"n\", Prop \"h\")))))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or\n  (Or (And (Neg (Prop \"w\"), Neg (Prop \"u\")),\n    And (Neg (Prop \"b\"), Neg (Prop \"o\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And (Or (Neg (Prop \"w\"), Neg (Prop \"b\")),\n    Or (Neg (Prop \"w\"), Neg (Prop \"o\"))),\n  And (Or (Neg (Prop \"u\"), Neg (Prop \"b\")),\n   Or (Neg (Prop \"u\"), Neg (Prop \"o\")))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or\n  (Or (And (Prop \"d\", Prop \"n\"),\n    And (Or (Neg (Prop \"c\"), Neg (Prop \"z\")), Prop \"b\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And (Or (Prop \"d\", Or (Neg (Prop \"c\"), Neg (Prop \"z\"))),\n    Or (Prop \"d\", Prop \"b\")),\n  And (Or (Prop \"n\", Or (Neg (Prop \"c\"), Neg (Prop \"z\"))),\n   Or (Prop \"n\", Prop \"b\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "cnf",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "cnf",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf (Neg (Neg (And (And (Prop \"v\", Prop \"y\"), Neg (Prop \"k\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (And (Prop \"v\", Prop \"y\"), Neg (Prop \"k\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf\n  (Or (And (And (Prop \"k\", Prop \"s\"), And (Prop \"j\", Prop \"x\")),\n    Neg (And (Prop \"e\", Prop \"u\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And (Or (Prop \"k\", Or (Neg (Prop \"e\"), Neg (Prop \"u\"))),\n    Or (Prop \"s\", Or (Neg (Prop \"e\"), Neg (Prop \"u\")))),\n  And (Or (Prop \"j\", Or (Neg (Prop \"e\"), Neg (Prop \"u\"))),\n   Or (Prop \"x\", Or (Neg (Prop \"e\"), Neg (Prop \"u\"))))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf\n  (Or\n    (Or (And (And (Prop \"w\", Prop \"j\"), Neg (Prop \"y\")),\n      And (And (Prop \"l\", Prop \"q\"), Neg (Prop \"n\"))),\n    Or (Or (Or (Prop \"b\", Prop \"b\"), Or (Prop \"e\", Prop \"j\")),\n     Neg (Neg (Prop \"i\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And\n    (And\n      (And\n        (Or (Or (Prop \"w\", Prop \"l\"),\n          Or (Or (Or (Prop \"b\", Prop \"b\"), Or (Prop \"e\", Prop \"j\")),\n           Prop \"i\")),\n        Or (Or (Prop \"w\", Prop \"q\"),\n         Or (Or (Or (Prop \"b\", Prop \"b\"), Or (Prop \"e\", Prop \"j\")), Prop \"i\"))),\n      Or (Or (Prop \"w\", Neg (Prop \"n\")),\n       Or (Or (Or (Prop \"b\", Prop \"b\"), Or (Prop \"e\", Prop \"j\")), Prop \"i\"))),\n    And\n     (And\n       (Or (Or (Prop \"j\", Prop \"l\"),\n         Or (Or (Or (Prop \"b\", Prop \"b\"), Or (Prop \"e\", Prop \"j\")), Prop \"i\")),\n       Or (Or (Prop \"j\", Prop \"q\"),\n        Or (Or (Or (Prop \"b\", Prop \"b\"), Or (Prop \"e\", Prop \"j\")), Prop \"i\"))),\n     Or (Or (Prop \"j\", Neg (Prop \"n\")),\n      Or (Or (Or (Prop \"b\", Prop \"b\"), Or (Prop \"e\", Prop \"j\")), Prop \"i\")))),\n  And\n   (And\n     (Or (Or (Neg (Prop \"y\"), Prop \"l\"),\n       Or (Or (Or (Prop \"b\", Prop \"b\"), Or (Prop \"e\", Prop \"j\")), Prop \"i\")),\n     Or (Or (Neg (Prop \"y\"), Prop \"q\"),\n      Or (Or (Or (Prop \"b\", Prop \"b\"), Or (Prop \"e\", Prop \"j\")), Prop \"i\"))),\n   Or (Or (Neg (Prop \"y\"), Neg (Prop \"n\")),\n    Or (Or (Or (Prop \"b\", Prop \"b\"), Or (Prop \"e\", Prop \"j\")), Prop \"i\")))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf\n  (And (And (Neg (Prop \"x\"), Neg (Prop \"k\")),\n    And (And (Prop \"y\", Prop \"h\"), Neg (Prop \"i\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (And (Neg (Prop \"x\"), Neg (Prop \"k\")),\n  And (And (Prop \"y\", Prop \"h\"), Neg (Prop \"i\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf (Or (Neg (Prop \"e\"), Or (Prop \"f\", Prop \"r\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Or (Neg (Prop \"e\"), Or (Prop \"f\", Prop \"r\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf\n  (Or (And (Or (Prop \"u\", Prop \"y\"), Neg (Prop \"l\")),\n    Or (Or (Prop \"s\", Prop \"h\"), And (Prop \"m\", Prop \"j\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And (Or (Or (Prop \"u\", Prop \"y\"), Or (Or (Prop \"s\", Prop \"h\"), Prop \"m\")),\n    Or (Or (Prop \"u\", Prop \"y\"), Or (Or (Prop \"s\", Prop \"h\"), Prop \"j\"))),\n  And (Or (Neg (Prop \"l\"), Or (Or (Prop \"s\", Prop \"h\"), Prop \"m\")),\n   Or (Neg (Prop \"l\"), Or (Or (Prop \"s\", Prop \"h\"), Prop \"j\")))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf\n  (Or (And (And (Prop \"j\", Prop \"l\"), Neg (Prop \"t\")),\n    And (Or (Prop \"n\", Prop \"y\"), Neg (Prop \"d\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And\n    (And (Or (Prop \"j\", Or (Prop \"n\", Prop \"y\")),\n      Or (Prop \"j\", Neg (Prop \"d\"))),\n    And (Or (Prop \"l\", Or (Prop \"n\", Prop \"y\")),\n     Or (Prop \"l\", Neg (Prop \"d\")))),\n  And (Or (Neg (Prop \"t\"), Or (Prop \"n\", Prop \"y\")),\n   Or (Neg (Prop \"t\"), Neg (Prop \"d\")))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf\n  (Neg\n    (Or (And (Neg (Prop \"c\"), And (Prop \"f\", Prop \"u\")),\n      Or (Neg (Prop \"l\"), Or (Prop \"l\", Prop \"m\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Or (Prop \"c\", Or (Neg (Prop \"f\"), Neg (Prop \"u\"))),\n  And (Prop \"l\", And (Neg (Prop \"l\"), Neg (Prop \"m\")))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf\n  (Or\n    (And (Or (Or (Prop \"z\", Prop \"n\"), Neg (Prop \"u\")),\n      Neg (And (Prop \"m\", Prop \"d\"))),\n    And (Neg (Neg (Prop \"v\")),\n     And (And (Prop \"l\", Prop \"r\"), Neg (Prop \"n\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And (Or (Or (Or (Prop \"z\", Prop \"n\"), Neg (Prop \"u\")), Prop \"v\"),\n    And\n     (And (Or (Or (Or (Prop \"z\", Prop \"n\"), Neg (Prop \"u\")), Prop \"l\"),\n       Or (Or (Or (Prop \"z\", Prop \"n\"), Neg (Prop \"u\")), Prop \"r\")),\n     Or (Or (Or (Prop \"z\", Prop \"n\"), Neg (Prop \"u\")), Neg (Prop \"n\")))),\n  And (Or (Or (Neg (Prop \"m\"), Neg (Prop \"d\")), Prop \"v\"),\n   And\n    (And (Or (Or (Neg (Prop \"m\"), Neg (Prop \"d\")), Prop \"l\"),\n      Or (Or (Neg (Prop \"m\"), Neg (Prop \"d\")), Prop \"r\")),\n    Or (Or (Neg (Prop \"m\"), Neg (Prop \"d\")), Neg (Prop \"n\"))))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf (And (Or (Prop \"n\", Prop \"f\"), Or (Prop \"c\", Prop \"r\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Or (Prop \"n\", Prop \"f\"), Or (Prop \"c\", Prop \"r\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf (Neg (Neg (Or (And (Prop \"r\", Prop \"i\"), And (Prop \"d\", Prop \"w\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (And (Or (Prop \"r\", Prop \"d\"), Or (Prop \"r\", Prop \"w\")),\n  And (Or (Prop \"i\", Prop \"d\"), Or (Prop \"i\", Prop \"w\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf\n  (Or (Or (Or (Prop \"r\", Prop \"t\"), And (Prop \"y\", Prop \"p\")),\n    And (Or (Prop \"r\", Prop \"s\"), Or (Prop \"d\", Prop \"r\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And (Or (Or (Or (Prop \"r\", Prop \"t\"), Prop \"y\"), Or (Prop \"r\", Prop \"s\")),\n    Or (Or (Or (Prop \"r\", Prop \"t\"), Prop \"y\"), Or (Prop \"d\", Prop \"r\"))),\n  And (Or (Or (Or (Prop \"r\", Prop \"t\"), Prop \"p\"), Or (Prop \"r\", Prop \"s\")),\n   Or (Or (Or (Prop \"r\", Prop \"t\"), Prop \"p\"), Or (Prop \"d\", Prop \"r\")))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf (Neg (Neg (Prop \"c\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Prop \"c\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf (Neg (Or (Prop \"a\", Prop \"l\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Neg (Prop \"a\"), Neg (Prop \"l\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf\n  (Or (And (Neg (Prop \"i\"), Neg (Prop \"w\")),\n    And (Or (Prop \"j\", Prop \"o\"), Neg (Prop \"e\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And (Or (Neg (Prop \"i\"), Or (Prop \"j\", Prop \"o\")),\n    Or (Neg (Prop \"i\"), Neg (Prop \"e\"))),\n  And (Or (Neg (Prop \"w\"), Or (Prop \"j\", Prop \"o\")),\n   Or (Neg (Prop \"w\"), Neg (Prop \"e\")))))",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1634032034.506564
    },
    "6.1_rec_terminale": {
      "grade": 100,
      "solution": "let listn1 n =\n  let rec listenTail n acc list=\n    if n=acc then n::list\n    else listenTail (n+1) acc (n::list) in listenTail 0 n [] ;;\n        \n\nlet length1 l =\n  let rec lengTail l aux=\n    match l with \n    |[]->aux\n    |_::l'-> lengTail(l')(1+aux) in lengTail l 0;;\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "listn1",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "listn1",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "listn1 1000",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1000; 999; 998; 997; 996; 995; 994; 993; 992; 991; 990; 989; 988; 987; 986;\n 985; 984; 983; 982; 981; 980; 979; 978; 977; 976; 975; 974; 973; 972; 971;\n 970; 969; 968; 967; 966; 965; 964; 963; 962; 961; 960; 959; 958; 957; 956;\n 955; 954; 953; 952; 951; 950; 949; 948; 947; 946; 945; 944; 943; 942; 941;\n 940; 939; 938; 937; 936; 935; 934; 933; 932; 931; 930; 929; 928; 927; 926;\n 925; 924; 923; 922; 921; 920; 919; 918; 917; 916; 915; 914; 913; 912; 911;\n 910; 909; 908; 907; 906; 905; 904; 903; 902; 901; 900; 899; 898; 897; 896;\n 895; 894; 893; 892; 891; 890; 889; 888; 887; 886; 885; 884; 883; 882; 881;\n 880; 879; 878; 877; 876; 875; 874; 873; 872; 871; 870; 869; 868; 867; 866;\n 865; 864; 863; 862; 861; 860; 859; 858; 857; 856; 855; 854; 853; 852; 851;\n 850; 849; 848; 847; 846; 845; 844; 843; 842; 841; 840; 839; 838; 837; 836;\n 835; 834; 833; 832; 831; 830; 829; 828; 827; 826; 825; 824; 823; 822; 821;\n 820; 819; 818; 817; 816; 815; 814; 813; 812; 811; 810; 809; 808; 807; 806;\n 805; 804; 803; 802; 801; 800; 799; 798; 797; 796; 795; 794; 793; 792; 791;\n 790; 789; 788; 787; 786; 785; 784; 783; 782; 781; 780; 779; 778; 777; 776;\n 775; 774; 773; 772; 771; 770; 769; 768; 767; 766; 765; 764; 763; 762; 761;\n 760; 759; 758; 757; 756; 755; 754; 753; 752; 751; 750; 749; 748; 747; 746;\n 745; 744; 743; 742; 741; 740; 739; 738; 737; 736; 735; 734; 733; 732; 731;\n 730; 729; 728; 727; 726; 725; 724; 723; 722; 721; 720; 719; 718; 717; 716;\n 715; 714; 713; 712; 711; 710; 709; 708; 707; 706; 705; 704; 703; 702; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "listn1 100000",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[100000; 99999; 99998; 99997; 99996; 99995; 99994; 99993; 99992; 99991;\n 99990; 99989; 99988; 99987; 99986; 99985; 99984; 99983; 99982; 99981; 99980;\n 99979; 99978; 99977; 99976; 99975; 99974; 99973; 99972; 99971; 99970; 99969;\n 99968; 99967; 99966; 99965; 99964; 99963; 99962; 99961; 99960; 99959; 99958;\n 99957; 99956; 99955; 99954; 99953; 99952; 99951; 99950; 99949; 99948; 99947;\n 99946; 99945; 99944; 99943; 99942; 99941; 99940; 99939; 99938; 99937; 99936;\n 99935; 99934; 99933; 99932; 99931; 99930; 99929; 99928; 99927; 99926; 99925;\n 99924; 99923; 99922; 99921; 99920; 99919; 99918; 99917; 99916; 99915; 99914;\n 99913; 99912; 99911; 99910; 99909; 99908; 99907; 99906; 99905; 99904; 99903;\n 99902; 99901; 99900; 99899; 99898; 99897; 99896; 99895; 99894; 99893; 99892;\n 99891; 99890; 99889; 99888; 99887; 99886; 99885; 99884; 99883; 99882; 99881;\n 99880; 99879; 99878; 99877; 99876; 99875; 99874; 99873; 99872; 99871; 99870;\n 99869; 99868; 99867; 99866; 99865; 99864; 99863; 99862; 99861; 99860; 99859;\n 99858; 99857; 99856; 99855; 99854; 99853; 99852; 99851; 99850; 99849; 99848;\n 99847; 99846; 99845; 99844; 99843; 99842; 99841; 99840; 99839; 99838; 99837;\n 99836; 99835; 99834; 99833; 99832; 99831; 99830; 99829; 99828; 99827; 99826;\n 99825; 99824; 99823; 99822; 99821; 99820; 99819; 99818; 99817; 99816; 99815;\n 99814; 99813; 99812; 99811; 99810; 99809; 99808; 99807; 99806; 99805; 99804;\n 99803; 99802; 99801; 99800; 99799; 99798; 99797; 99796; 99795; 99794; 99793;\n 99792; 99791; 99790; 99789; 99788; 99787; 99786; 99785; 99784; 99783; 99782;\n 99781; 99780; 99779; 99778; 99777; 99776; 99775; 99774; 99773; 99772; 99771;\n 99770; 99769; 99768; 99767; 99766; 99765; 99764; 99763; 99762; 99761; 99760;\n 99759; 99758; 99757; 99756; 99755; 99754; 99753; 99752; 99751; 99750; 99749;\n 99748; 99747; 99746; 99745; 99744; 99743; 99742; 99741; 99740; 99739; 99738;\n 99737; 99736; 99735; 99734; 99733; 99732; 99731; 99730; 99729; 99728; 99727;\n 99726; 99725; 99724; 99723; 99722; 99721; 99720; 99719; 99718; 99717; 99716;\n 99715; 99714; 99713; 99712; 99711; 99710; 99709; 99708; 99707; 99706; 99705;\n 99704; 99703; 99702; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "listn1 1000000",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1000000; 999999; 999998; 999997; 999996; 999995; 999994; 999993; 999992;\n 999991; 999990; 999989; 999988; 999987; 999986; 999985; 999984; 999983;\n 999982; 999981; 999980; 999979; 999978; 999977; 999976; 999975; 999974;\n 999973; 999972; 999971; 999970; 999969; 999968; 999967; 999966; 999965;\n 999964; 999963; 999962; 999961; 999960; 999959; 999958; 999957; 999956;\n 999955; 999954; 999953; 999952; 999951; 999950; 999949; 999948; 999947;\n 999946; 999945; 999944; 999943; 999942; 999941; 999940; 999939; 999938;\n 999937; 999936; 999935; 999934; 999933; 999932; 999931; 999930; 999929;\n 999928; 999927; 999926; 999925; 999924; 999923; 999922; 999921; 999920;\n 999919; 999918; 999917; 999916; 999915; 999914; 999913; 999912; 999911;\n 999910; 999909; 999908; 999907; 999906; 999905; 999904; 999903; 999902;\n 999901; 999900; 999899; 999898; 999897; 999896; 999895; 999894; 999893;\n 999892; 999891; 999890; 999889; 999888; 999887; 999886; 999885; 999884;\n 999883; 999882; 999881; 999880; 999879; 999878; 999877; 999876; 999875;\n 999874; 999873; 999872; 999871; 999870; 999869; 999868; 999867; 999866;\n 999865; 999864; 999863; 999862; 999861; 999860; 999859; 999858; 999857;\n 999856; 999855; 999854; 999853; 999852; 999851; 999850; 999849; 999848;\n 999847; 999846; 999845; 999844; 999843; 999842; 999841; 999840; 999839;\n 999838; 999837; 999836; 999835; 999834; 999833; 999832; 999831; 999830;\n 999829; 999828; 999827; 999826; 999825; 999824; 999823; 999822; 999821;\n 999820; 999819; 999818; 999817; 999816; 999815; 999814; 999813; 999812;\n 999811; 999810; 999809; 999808; 999807; 999806; 999805; 999804; 999803;\n 999802; 999801; 999800; 999799; 999798; 999797; 999796; 999795; 999794;\n 999793; 999792; 999791; 999790; 999789; 999788; 999787; 999786; 999785;\n 999784; 999783; 999782; 999781; 999780; 999779; 999778; 999777; 999776;\n 999775; 999774; 999773; 999772; 999771; 999770; 999769; 999768; 999767;\n 999766; 999765; 999764; 999763; 999762; 999761; 999760; 999759; 999758;\n 999757; 999756; 999755; 999754; 999753; 999752; 999751; 999750; 999749;\n 999748; 999747; 999746; 999745; 999744; 999743; 999742; 999741; 999740;\n 999739; 999738; 999737; 999736; 999735; 999734; 999733; 999732; 999731;\n 999730; 999729; 999728; 999727; 999726; 999725; 999724; 999723; 999722;\n 999721; 999720; 999719; 999718; 999717; 999716; 999715; 999714; 999713;\n 999712; 999711; 999710; 999709; 999708; 999707; 999706; 999705; 999704;\n 999703; 999702; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "listn1 6",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[6; 5; 4; 3; 2; 1; 0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "listn1 7",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[7; 6; 5; 4; 3; 2; 1; 0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "listn1 5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[5; 4; 3; 2; 1; 0]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "length1",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "length1",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "length1\n  [1000; 999; 998; 997; 996; 995; 994; 993; 992; 991; 990; 989; 988; 987;\n   986; 985; 984; 983; 982; 981; 980; 979; 978; 977; 976; 975; 974; 973; 972;\n   971; 970; 969; 968; 967; 966; 965; 964; 963; 962; 961; 960; 959; 958; 957;\n   956; 955; 954; 953; 952; 951; 950; 949; 948; 947; 946; 945; 944; 943; 942;\n   941; 940; 939; 938; 937; 936; 935; 934; 933; 932; 931; 930; 929; 928; 927;\n   926; 925; 924; 923; 922; 921; 920; 919; 918; 917; 916; 915; 914; 913; 912;\n   911; 910; 909; 908; 907; 906; 905; 904; 903; 902; 901; 900; 899; 898; 897;\n   896; 895; 894; 893; 892; 891; 890; 889; 888; 887; 886; 885; 884; 883; 882;\n   881; 880; 879; 878; 877; 876; 875; 874; 873; 872; 871; 870; 869; 868; 867;\n   866; 865; 864; 863; 862; 861; 860; 859; 858; 857; 856; 855; 854; 853; 852;\n   851; 850; 849; 848; 847; 846; 845; 844; 843; 842; 841; 840; 839; 838; 837;\n   836; 835; 834; 833; 832; 831; 830; 829; 828; 827; 826; 825; 824; 823; 822;\n   821; 820; 819; 818; 817; 816; 815; 814; 813; 812; 811; 810; 809; 808; 807;\n   806; 805; 804; 803; 802; 801; 800; 799; 798; 797; 796; 795; 794; 793; 792;\n   791; 790; 789; 788; 787; 786; 785; 784; 783; 782; 781; 780; 779; 778; 777;\n   776; 775; 774; 773; 772; 771; 770; 769; 768; 767; 766; 765; 764; 763; 762;\n   761; 760; 759; 758; 757; 756; 755; 754; 753; 752; 751; 750; 749; 748; 747;\n   746; 745; 744; 743; 742; 741; 740; 739; 738; 737; 736; 735; 734; 733; 732;\n   731; 730; 729; 728; 727; 726; 725; 724; 723; 722; 721; 720; 719; 718; 717;\n   716; 715; 714; 713; 712; 711; 710; 709; 708; 707; 706; 705; 704; 703; 702;\n   ...]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1001",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "length1\n  [100000; 99999; 99998; 99997; 99996; 99995; 99994; 99993; 99992; 99991;\n   99990; 99989; 99988; 99987; 99986; 99985; 99984; 99983; 99982; 99981;\n   99980; 99979; 99978; 99977; 99976; 99975; 99974; 99973; 99972; 99971;\n   99970; 99969; 99968; 99967; 99966; 99965; 99964; 99963; 99962; 99961;\n   99960; 99959; 99958; 99957; 99956; 99955; 99954; 99953; 99952; 99951;\n   99950; 99949; 99948; 99947; 99946; 99945; 99944; 99943; 99942; 99941;\n   99940; 99939; 99938; 99937; 99936; 99935; 99934; 99933; 99932; 99931;\n   99930; 99929; 99928; 99927; 99926; 99925; 99924; 99923; 99922; 99921;\n   99920; 99919; 99918; 99917; 99916; 99915; 99914; 99913; 99912; 99911;\n   99910; 99909; 99908; 99907; 99906; 99905; 99904; 99903; 99902; 99901;\n   99900; 99899; 99898; 99897; 99896; 99895; 99894; 99893; 99892; 99891;\n   99890; 99889; 99888; 99887; 99886; 99885; 99884; 99883; 99882; 99881;\n   99880; 99879; 99878; 99877; 99876; 99875; 99874; 99873; 99872; 99871;\n   99870; 99869; 99868; 99867; 99866; 99865; 99864; 99863; 99862; 99861;\n   99860; 99859; 99858; 99857; 99856; 99855; 99854; 99853; 99852; 99851;\n   99850; 99849; 99848; 99847; 99846; 99845; 99844; 99843; 99842; 99841;\n   99840; 99839; 99838; 99837; 99836; 99835; 99834; 99833; 99832; 99831;\n   99830; 99829; 99828; 99827; 99826; 99825; 99824; 99823; 99822; 99821;\n   99820; 99819; 99818; 99817; 99816; 99815; 99814; 99813; 99812; 99811;\n   99810; 99809; 99808; 99807; 99806; 99805; 99804; 99803; 99802; 99801;\n   99800; 99799; 99798; 99797; 99796; 99795; 99794; 99793; 99792; 99791;\n   99790; 99789; 99788; 99787; 99786; 99785; 99784; 99783; 99782; 99781;\n   99780; 99779; 99778; 99777; 99776; 99775; 99774; 99773; 99772; 99771;\n   99770; 99769; 99768; 99767; 99766; 99765; 99764; 99763; 99762; 99761;\n   99760; 99759; 99758; 99757; 99756; 99755; 99754; 99753; 99752; 99751;\n   99750; 99749; 99748; 99747; 99746; 99745; 99744; 99743; 99742; 99741;\n   99740; 99739; 99738; 99737; 99736; 99735; 99734; 99733; 99732; 99731;\n   99730; 99729; 99728; 99727; 99726; 99725; 99724; 99723; 99722; 99721;\n   99720; 99719; 99718; 99717; 99716; 99715; 99714; 99713; 99712; 99711;\n   99710; 99709; 99708; 99707; 99706; 99705; 99704; 99703; 99702; ...]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "100001",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "length1\n  [1000000; 999999; 999998; 999997; 999996; 999995; 999994; 999993; 999992;\n   999991; 999990; 999989; 999988; 999987; 999986; 999985; 999984; 999983;\n   999982; 999981; 999980; 999979; 999978; 999977; 999976; 999975; 999974;\n   999973; 999972; 999971; 999970; 999969; 999968; 999967; 999966; 999965;\n   999964; 999963; 999962; 999961; 999960; 999959; 999958; 999957; 999956;\n   999955; 999954; 999953; 999952; 999951; 999950; 999949; 999948; 999947;\n   999946; 999945; 999944; 999943; 999942; 999941; 999940; 999939; 999938;\n   999937; 999936; 999935; 999934; 999933; 999932; 999931; 999930; 999929;\n   999928; 999927; 999926; 999925; 999924; 999923; 999922; 999921; 999920;\n   999919; 999918; 999917; 999916; 999915; 999914; 999913; 999912; 999911;\n   999910; 999909; 999908; 999907; 999906; 999905; 999904; 999903; 999902;\n   999901; 999900; 999899; 999898; 999897; 999896; 999895; 999894; 999893;\n   999892; 999891; 999890; 999889; 999888; 999887; 999886; 999885; 999884;\n   999883; 999882; 999881; 999880; 999879; 999878; 999877; 999876; 999875;\n   999874; 999873; 999872; 999871; 999870; 999869; 999868; 999867; 999866;\n   999865; 999864; 999863; 999862; 999861; 999860; 999859; 999858; 999857;\n   999856; 999855; 999854; 999853; 999852; 999851; 999850; 999849; 999848;\n   999847; 999846; 999845; 999844; 999843; 999842; 999841; 999840; 999839;\n   999838; 999837; 999836; 999835; 999834; 999833; 999832; 999831; 999830;\n   999829; 999828; 999827; 999826; 999825; 999824; 999823; 999822; 999821;\n   999820; 999819; 999818; 999817; 999816; 999815; 999814; 999813; 999812;\n   999811; 999810; 999809; 999808; 999807; 999806; 999805; 999804; 999803;\n   999802; 999801; 999800; 999799; 999798; 999797; 999796; 999795; 999794;\n   999793; 999792; 999791; 999790; 999789; 999788; 999787; 999786; 999785;\n   999784; 999783; 999782; 999781; 999780; 999779; 999778; 999777; 999776;\n   999775; 999774; 999773; 999772; 999771; 999770; 999769; 999768; 999767;\n   999766; 999765; 999764; 999763; 999762; 999761; 999760; 999759; 999758;\n   999757; 999756; 999755; 999754; 999753; 999752; 999751; 999750; 999749;\n   999748; 999747; 999746; 999745; 999744; 999743; 999742; 999741; 999740;\n   999739; 999738; 999737; 999736; 999735; 999734; 999733; 999732; 999731;\n   999730; 999729; 999728; 999727; 999726; 999725; 999724; 999723; 999722;\n   999721; 999720; 999719; 999718; 999717; 999716; 999715; 999714; 999713;\n   999712; 999711; 999710; 999709; 999708; 999707; 999706; 999705; 999704;\n   999703; 999702; ...]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1000001",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "length1 [1; -2; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "length1 [-4; -5; 0; 4; -5; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "6",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "length1 [0; 2; 4; 0; 1; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "6",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1634538788.908674
    },
    "6.2_recterm_append": {
      "grade": 100,
      "solution": "let rev_append left right =\n  let rec appendTail left acc= \n    match left with \n    |[]-> acc \n    |e::r->appendTail r (e::acc) in appendTail left right;;\n\nlet append left right =\n  rev_append (List.rev(left)) right;;\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "rev_append",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "rev_append",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev_append\n  [100000; 99999; 99998; 99997; 99996; 99995; 99994; 99993; 99992; 99991;\n   99990; 99989; 99988; 99987; 99986; 99985; 99984; 99983; 99982; 99981;\n   99980; 99979; 99978; 99977; 99976; 99975; 99974; 99973; 99972; 99971;\n   99970; 99969; 99968; 99967; 99966; 99965; 99964; 99963; 99962; 99961;\n   99960; 99959; 99958; 99957; 99956; 99955; 99954; 99953; 99952; 99951;\n   99950; 99949; 99948; 99947; 99946; 99945; 99944; 99943; 99942; 99941;\n   99940; 99939; 99938; 99937; 99936; 99935; 99934; 99933; 99932; 99931;\n   99930; 99929; 99928; 99927; 99926; 99925; 99924; 99923; 99922; 99921;\n   99920; 99919; 99918; 99917; 99916; 99915; 99914; 99913; 99912; 99911;\n   99910; 99909; 99908; 99907; 99906; 99905; 99904; 99903; 99902; 99901;\n   99900; 99899; 99898; 99897; 99896; 99895; 99894; 99893; 99892; 99891;\n   99890; 99889; 99888; 99887; 99886; 99885; 99884; 99883; 99882; 99881;\n   99880; 99879; 99878; 99877; 99876; 99875; 99874; 99873; 99872; 99871;\n   99870; 99869; 99868; 99867; 99866; 99865; 99864; 99863; 99862; 99861;\n   99860; 99859; 99858; 99857; 99856; 99855; 99854; 99853; 99852; 99851;\n   99850; 99849; 99848; 99847; 99846; 99845; 99844; 99843; 99842; 99841;\n   99840; 99839; 99838; 99837; 99836; 99835; 99834; 99833; 99832; 99831;\n   99830; 99829; 99828; 99827; 99826; 99825; 99824; 99823; 99822; 99821;\n   99820; 99819; 99818; 99817; 99816; 99815; 99814; 99813; 99812; 99811;\n   99810; 99809; 99808; 99807; 99806; 99805; 99804; 99803; 99802; 99801;\n   99800; 99799; 99798; 99797; 99796; 99795; 99794; 99793; 99792; 99791;\n   99790; 99789; 99788; 99787; 99786; 99785; 99784; 99783; 99782; 99781;\n   99780; 99779; 99778; 99777; 99776; 99775; 99774; 99773; 99772; 99771;\n   99770; 99769; 99768; 99767; 99766; 99765; 99764; 99763; 99762; 99761;\n   99760; 99759; 99758; 99757; 99756; 99755; 99754; 99753; 99752; 99751;\n   99750; 99749; 99748; 99747; 99746; 99745; 99744; 99743; 99742; 99741;\n   99740; 99739; 99738; 99737; 99736; 99735; 99734; 99733; 99732; 99731;\n   99730; 99729; 99728; 99727; 99726; 99725; 99724; 99723; 99722; 99721;\n   99720; 99719; 99718; 99717; 99716; 99715; 99714; 99713; 99712; 99711;\n   99710; 99709; 99708; 99707; 99706; 99705; 99704; 99703; 99702; ...]\n  [1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20;\n 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39;\n 40; 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58;\n 59; 60; 61; 62; 63; 64; 65; 66; 67; 68; 69; 70; 71; 72; 73; 74; 75; 76; 77;\n 78; 79; 80; 81; 82; 83; 84; 85; 86; 87; 88; 89; 90; 91; 92; 93; 94; 95; 96;\n 97; 98; 99; 100; 101; 102; 103; 104; 105; 106; 107; 108; 109; 110; 111; 112;\n 113; 114; 115; 116; 117; 118; 119; 120; 121; 122; 123; 124; 125; 126; 127;\n 128; 129; 130; 131; 132; 133; 134; 135; 136; 137; 138; 139; 140; 141; 142;\n 143; 144; 145; 146; 147; 148; 149; 150; 151; 152; 153; 154; 155; 156; 157;\n 158; 159; 160; 161; 162; 163; 164; 165; 166; 167; 168; 169; 170; 171; 172;\n 173; 174; 175; 176; 177; 178; 179; 180; 181; 182; 183; 184; 185; 186; 187;\n 188; 189; 190; 191; 192; 193; 194; 195; 196; 197; 198; 199; 200; 201; 202;\n 203; 204; 205; 206; 207; 208; 209; 210; 211; 212; 213; 214; 215; 216; 217;\n 218; 219; 220; 221; 222; 223; 224; 225; 226; 227; 228; 229; 230; 231; 232;\n 233; 234; 235; 236; 237; 238; 239; 240; 241; 242; 243; 244; 245; 246; 247;\n 248; 249; 250; 251; 252; 253; 254; 255; 256; 257; 258; 259; 260; 261; 262;\n 263; 264; 265; 266; 267; 268; 269; 270; 271; 272; 273; 274; 275; 276; 277;\n 278; 279; 280; 281; 282; 283; 284; 285; 286; 287; 288; 289; 290; 291; 292;\n 293; 294; 295; 296; 297; 298; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev_append\n  [1; 2; 3]\n  [100000; 99999; 99998; 99997; 99996; 99995; 99994; 99993; 99992; 99991;\n   99990; 99989; 99988; 99987; 99986; 99985; 99984; 99983; 99982; 99981;\n   99980; 99979; 99978; 99977; 99976; 99975; 99974; 99973; 99972; 99971;\n   99970; 99969; 99968; 99967; 99966; 99965; 99964; 99963; 99962; 99961;\n   99960; 99959; 99958; 99957; 99956; 99955; 99954; 99953; 99952; 99951;\n   99950; 99949; 99948; 99947; 99946; 99945; 99944; 99943; 99942; 99941;\n   99940; 99939; 99938; 99937; 99936; 99935; 99934; 99933; 99932; 99931;\n   99930; 99929; 99928; 99927; 99926; 99925; 99924; 99923; 99922; 99921;\n   99920; 99919; 99918; 99917; 99916; 99915; 99914; 99913; 99912; 99911;\n   99910; 99909; 99908; 99907; 99906; 99905; 99904; 99903; 99902; 99901;\n   99900; 99899; 99898; 99897; 99896; 99895; 99894; 99893; 99892; 99891;\n   99890; 99889; 99888; 99887; 99886; 99885; 99884; 99883; 99882; 99881;\n   99880; 99879; 99878; 99877; 99876; 99875; 99874; 99873; 99872; 99871;\n   99870; 99869; 99868; 99867; 99866; 99865; 99864; 99863; 99862; 99861;\n   99860; 99859; 99858; 99857; 99856; 99855; 99854; 99853; 99852; 99851;\n   99850; 99849; 99848; 99847; 99846; 99845; 99844; 99843; 99842; 99841;\n   99840; 99839; 99838; 99837; 99836; 99835; 99834; 99833; 99832; 99831;\n   99830; 99829; 99828; 99827; 99826; 99825; 99824; 99823; 99822; 99821;\n   99820; 99819; 99818; 99817; 99816; 99815; 99814; 99813; 99812; 99811;\n   99810; 99809; 99808; 99807; 99806; 99805; 99804; 99803; 99802; 99801;\n   99800; 99799; 99798; 99797; 99796; 99795; 99794; 99793; 99792; 99791;\n   99790; 99789; 99788; 99787; 99786; 99785; 99784; 99783; 99782; 99781;\n   99780; 99779; 99778; 99777; 99776; 99775; 99774; 99773; 99772; 99771;\n   99770; 99769; 99768; 99767; 99766; 99765; 99764; 99763; 99762; 99761;\n   99760; 99759; 99758; 99757; 99756; 99755; 99754; 99753; 99752; 99751;\n   99750; 99749; 99748; 99747; 99746; 99745; 99744; 99743; 99742; 99741;\n   99740; 99739; 99738; 99737; 99736; 99735; 99734; 99733; 99732; 99731;\n   99730; 99729; 99728; 99727; 99726; 99725; 99724; 99723; 99722; 99721;\n   99720; 99719; 99718; 99717; 99716; 99715; 99714; 99713; 99712; 99711;\n   99710; 99709; 99708; 99707; 99706; 99705; 99704; 99703; 99702; ...]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; 2; 1; 100000; 99999; 99998; 99997; 99996; 99995; 99994; 99993; 99992;\n 99991; 99990; 99989; 99988; 99987; 99986; 99985; 99984; 99983; 99982; 99981;\n 99980; 99979; 99978; 99977; 99976; 99975; 99974; 99973; 99972; 99971; 99970;\n 99969; 99968; 99967; 99966; 99965; 99964; 99963; 99962; 99961; 99960; 99959;\n 99958; 99957; 99956; 99955; 99954; 99953; 99952; 99951; 99950; 99949; 99948;\n 99947; 99946; 99945; 99944; 99943; 99942; 99941; 99940; 99939; 99938; 99937;\n 99936; 99935; 99934; 99933; 99932; 99931; 99930; 99929; 99928; 99927; 99926;\n 99925; 99924; 99923; 99922; 99921; 99920; 99919; 99918; 99917; 99916; 99915;\n 99914; 99913; 99912; 99911; 99910; 99909; 99908; 99907; 99906; 99905; 99904;\n 99903; 99902; 99901; 99900; 99899; 99898; 99897; 99896; 99895; 99894; 99893;\n 99892; 99891; 99890; 99889; 99888; 99887; 99886; 99885; 99884; 99883; 99882;\n 99881; 99880; 99879; 99878; 99877; 99876; 99875; 99874; 99873; 99872; 99871;\n 99870; 99869; 99868; 99867; 99866; 99865; 99864; 99863; 99862; 99861; 99860;\n 99859; 99858; 99857; 99856; 99855; 99854; 99853; 99852; 99851; 99850; 99849;\n 99848; 99847; 99846; 99845; 99844; 99843; 99842; 99841; 99840; 99839; 99838;\n 99837; 99836; 99835; 99834; 99833; 99832; 99831; 99830; 99829; 99828; 99827;\n 99826; 99825; 99824; 99823; 99822; 99821; 99820; 99819; 99818; 99817; 99816;\n 99815; 99814; 99813; 99812; 99811; 99810; 99809; 99808; 99807; 99806; 99805;\n 99804; 99803; 99802; 99801; 99800; 99799; 99798; 99797; 99796; 99795; 99794;\n 99793; 99792; 99791; 99790; 99789; 99788; 99787; 99786; 99785; 99784; 99783;\n 99782; 99781; 99780; 99779; 99778; 99777; 99776; 99775; 99774; 99773; 99772;\n 99771; 99770; 99769; 99768; 99767; 99766; 99765; 99764; 99763; 99762; 99761;\n 99760; 99759; 99758; 99757; 99756; 99755; 99754; 99753; 99752; 99751; 99750;\n 99749; 99748; 99747; 99746; 99745; 99744; 99743; 99742; 99741; 99740; 99739;\n 99738; 99737; 99736; 99735; 99734; 99733; 99732; 99731; 99730; 99729; 99728;\n 99727; 99726; 99725; 99724; 99723; 99722; 99721; 99720; 99719; 99718; 99717;\n 99716; 99715; 99714; 99713; 99712; 99711; 99710; 99709; 99708; 99707; 99706;\n 99705; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev_append [4; -5; 1; 4; -2; -1; -1; -1] [-5; 4; 2; -3; 4; 1; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; -1; -1; -2; 4; 1; -5; 4; -5; 4; 2; -3; 4; 1; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev_append [3; -3; 3] [-3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; -3; 3; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev_append [] [-4; 1; -4; -1; 4; 4; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; 1; -4; -1; 4; 4; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "append",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "append",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append\n  [100000; 99999; 99998; 99997; 99996; 99995; 99994; 99993; 99992; 99991;\n   99990; 99989; 99988; 99987; 99986; 99985; 99984; 99983; 99982; 99981;\n   99980; 99979; 99978; 99977; 99976; 99975; 99974; 99973; 99972; 99971;\n   99970; 99969; 99968; 99967; 99966; 99965; 99964; 99963; 99962; 99961;\n   99960; 99959; 99958; 99957; 99956; 99955; 99954; 99953; 99952; 99951;\n   99950; 99949; 99948; 99947; 99946; 99945; 99944; 99943; 99942; 99941;\n   99940; 99939; 99938; 99937; 99936; 99935; 99934; 99933; 99932; 99931;\n   99930; 99929; 99928; 99927; 99926; 99925; 99924; 99923; 99922; 99921;\n   99920; 99919; 99918; 99917; 99916; 99915; 99914; 99913; 99912; 99911;\n   99910; 99909; 99908; 99907; 99906; 99905; 99904; 99903; 99902; 99901;\n   99900; 99899; 99898; 99897; 99896; 99895; 99894; 99893; 99892; 99891;\n   99890; 99889; 99888; 99887; 99886; 99885; 99884; 99883; 99882; 99881;\n   99880; 99879; 99878; 99877; 99876; 99875; 99874; 99873; 99872; 99871;\n   99870; 99869; 99868; 99867; 99866; 99865; 99864; 99863; 99862; 99861;\n   99860; 99859; 99858; 99857; 99856; 99855; 99854; 99853; 99852; 99851;\n   99850; 99849; 99848; 99847; 99846; 99845; 99844; 99843; 99842; 99841;\n   99840; 99839; 99838; 99837; 99836; 99835; 99834; 99833; 99832; 99831;\n   99830; 99829; 99828; 99827; 99826; 99825; 99824; 99823; 99822; 99821;\n   99820; 99819; 99818; 99817; 99816; 99815; 99814; 99813; 99812; 99811;\n   99810; 99809; 99808; 99807; 99806; 99805; 99804; 99803; 99802; 99801;\n   99800; 99799; 99798; 99797; 99796; 99795; 99794; 99793; 99792; 99791;\n   99790; 99789; 99788; 99787; 99786; 99785; 99784; 99783; 99782; 99781;\n   99780; 99779; 99778; 99777; 99776; 99775; 99774; 99773; 99772; 99771;\n   99770; 99769; 99768; 99767; 99766; 99765; 99764; 99763; 99762; 99761;\n   99760; 99759; 99758; 99757; 99756; 99755; 99754; 99753; 99752; 99751;\n   99750; 99749; 99748; 99747; 99746; 99745; 99744; 99743; 99742; 99741;\n   99740; 99739; 99738; 99737; 99736; 99735; 99734; 99733; 99732; 99731;\n   99730; 99729; 99728; 99727; 99726; 99725; 99724; 99723; 99722; 99721;\n   99720; 99719; 99718; 99717; 99716; 99715; 99714; 99713; 99712; 99711;\n   99710; 99709; 99708; 99707; 99706; 99705; 99704; 99703; 99702; ...]\n  [1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[100000; 99999; 99998; 99997; 99996; 99995; 99994; 99993; 99992; 99991;\n 99990; 99989; 99988; 99987; 99986; 99985; 99984; 99983; 99982; 99981; 99980;\n 99979; 99978; 99977; 99976; 99975; 99974; 99973; 99972; 99971; 99970; 99969;\n 99968; 99967; 99966; 99965; 99964; 99963; 99962; 99961; 99960; 99959; 99958;\n 99957; 99956; 99955; 99954; 99953; 99952; 99951; 99950; 99949; 99948; 99947;\n 99946; 99945; 99944; 99943; 99942; 99941; 99940; 99939; 99938; 99937; 99936;\n 99935; 99934; 99933; 99932; 99931; 99930; 99929; 99928; 99927; 99926; 99925;\n 99924; 99923; 99922; 99921; 99920; 99919; 99918; 99917; 99916; 99915; 99914;\n 99913; 99912; 99911; 99910; 99909; 99908; 99907; 99906; 99905; 99904; 99903;\n 99902; 99901; 99900; 99899; 99898; 99897; 99896; 99895; 99894; 99893; 99892;\n 99891; 99890; 99889; 99888; 99887; 99886; 99885; 99884; 99883; 99882; 99881;\n 99880; 99879; 99878; 99877; 99876; 99875; 99874; 99873; 99872; 99871; 99870;\n 99869; 99868; 99867; 99866; 99865; 99864; 99863; 99862; 99861; 99860; 99859;\n 99858; 99857; 99856; 99855; 99854; 99853; 99852; 99851; 99850; 99849; 99848;\n 99847; 99846; 99845; 99844; 99843; 99842; 99841; 99840; 99839; 99838; 99837;\n 99836; 99835; 99834; 99833; 99832; 99831; 99830; 99829; 99828; 99827; 99826;\n 99825; 99824; 99823; 99822; 99821; 99820; 99819; 99818; 99817; 99816; 99815;\n 99814; 99813; 99812; 99811; 99810; 99809; 99808; 99807; 99806; 99805; 99804;\n 99803; 99802; 99801; 99800; 99799; 99798; 99797; 99796; 99795; 99794; 99793;\n 99792; 99791; 99790; 99789; 99788; 99787; 99786; 99785; 99784; 99783; 99782;\n 99781; 99780; 99779; 99778; 99777; 99776; 99775; 99774; 99773; 99772; 99771;\n 99770; 99769; 99768; 99767; 99766; 99765; 99764; 99763; 99762; 99761; 99760;\n 99759; 99758; 99757; 99756; 99755; 99754; 99753; 99752; 99751; 99750; 99749;\n 99748; 99747; 99746; 99745; 99744; 99743; 99742; 99741; 99740; 99739; 99738;\n 99737; 99736; 99735; 99734; 99733; 99732; 99731; 99730; 99729; 99728; 99727;\n 99726; 99725; 99724; 99723; 99722; 99721; 99720; 99719; 99718; 99717; 99716;\n 99715; 99714; 99713; 99712; 99711; 99710; 99709; 99708; 99707; 99706; 99705;\n 99704; 99703; 99702; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append\n  [1; 2; 3]\n  [100000; 99999; 99998; 99997; 99996; 99995; 99994; 99993; 99992; 99991;\n   99990; 99989; 99988; 99987; 99986; 99985; 99984; 99983; 99982; 99981;\n   99980; 99979; 99978; 99977; 99976; 99975; 99974; 99973; 99972; 99971;\n   99970; 99969; 99968; 99967; 99966; 99965; 99964; 99963; 99962; 99961;\n   99960; 99959; 99958; 99957; 99956; 99955; 99954; 99953; 99952; 99951;\n   99950; 99949; 99948; 99947; 99946; 99945; 99944; 99943; 99942; 99941;\n   99940; 99939; 99938; 99937; 99936; 99935; 99934; 99933; 99932; 99931;\n   99930; 99929; 99928; 99927; 99926; 99925; 99924; 99923; 99922; 99921;\n   99920; 99919; 99918; 99917; 99916; 99915; 99914; 99913; 99912; 99911;\n   99910; 99909; 99908; 99907; 99906; 99905; 99904; 99903; 99902; 99901;\n   99900; 99899; 99898; 99897; 99896; 99895; 99894; 99893; 99892; 99891;\n   99890; 99889; 99888; 99887; 99886; 99885; 99884; 99883; 99882; 99881;\n   99880; 99879; 99878; 99877; 99876; 99875; 99874; 99873; 99872; 99871;\n   99870; 99869; 99868; 99867; 99866; 99865; 99864; 99863; 99862; 99861;\n   99860; 99859; 99858; 99857; 99856; 99855; 99854; 99853; 99852; 99851;\n   99850; 99849; 99848; 99847; 99846; 99845; 99844; 99843; 99842; 99841;\n   99840; 99839; 99838; 99837; 99836; 99835; 99834; 99833; 99832; 99831;\n   99830; 99829; 99828; 99827; 99826; 99825; 99824; 99823; 99822; 99821;\n   99820; 99819; 99818; 99817; 99816; 99815; 99814; 99813; 99812; 99811;\n   99810; 99809; 99808; 99807; 99806; 99805; 99804; 99803; 99802; 99801;\n   99800; 99799; 99798; 99797; 99796; 99795; 99794; 99793; 99792; 99791;\n   99790; 99789; 99788; 99787; 99786; 99785; 99784; 99783; 99782; 99781;\n   99780; 99779; 99778; 99777; 99776; 99775; 99774; 99773; 99772; 99771;\n   99770; 99769; 99768; 99767; 99766; 99765; 99764; 99763; 99762; 99761;\n   99760; 99759; 99758; 99757; 99756; 99755; 99754; 99753; 99752; 99751;\n   99750; 99749; 99748; 99747; 99746; 99745; 99744; 99743; 99742; 99741;\n   99740; 99739; 99738; 99737; 99736; 99735; 99734; 99733; 99732; 99731;\n   99730; 99729; 99728; 99727; 99726; 99725; 99724; 99723; 99722; 99721;\n   99720; 99719; 99718; 99717; 99716; 99715; 99714; 99713; 99712; 99711;\n   99710; 99709; 99708; 99707; 99706; 99705; 99704; 99703; 99702; ...]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1; 2; 3; 100000; 99999; 99998; 99997; 99996; 99995; 99994; 99993; 99992;\n 99991; 99990; 99989; 99988; 99987; 99986; 99985; 99984; 99983; 99982; 99981;\n 99980; 99979; 99978; 99977; 99976; 99975; 99974; 99973; 99972; 99971; 99970;\n 99969; 99968; 99967; 99966; 99965; 99964; 99963; 99962; 99961; 99960; 99959;\n 99958; 99957; 99956; 99955; 99954; 99953; 99952; 99951; 99950; 99949; 99948;\n 99947; 99946; 99945; 99944; 99943; 99942; 99941; 99940; 99939; 99938; 99937;\n 99936; 99935; 99934; 99933; 99932; 99931; 99930; 99929; 99928; 99927; 99926;\n 99925; 99924; 99923; 99922; 99921; 99920; 99919; 99918; 99917; 99916; 99915;\n 99914; 99913; 99912; 99911; 99910; 99909; 99908; 99907; 99906; 99905; 99904;\n 99903; 99902; 99901; 99900; 99899; 99898; 99897; 99896; 99895; 99894; 99893;\n 99892; 99891; 99890; 99889; 99888; 99887; 99886; 99885; 99884; 99883; 99882;\n 99881; 99880; 99879; 99878; 99877; 99876; 99875; 99874; 99873; 99872; 99871;\n 99870; 99869; 99868; 99867; 99866; 99865; 99864; 99863; 99862; 99861; 99860;\n 99859; 99858; 99857; 99856; 99855; 99854; 99853; 99852; 99851; 99850; 99849;\n 99848; 99847; 99846; 99845; 99844; 99843; 99842; 99841; 99840; 99839; 99838;\n 99837; 99836; 99835; 99834; 99833; 99832; 99831; 99830; 99829; 99828; 99827;\n 99826; 99825; 99824; 99823; 99822; 99821; 99820; 99819; 99818; 99817; 99816;\n 99815; 99814; 99813; 99812; 99811; 99810; 99809; 99808; 99807; 99806; 99805;\n 99804; 99803; 99802; 99801; 99800; 99799; 99798; 99797; 99796; 99795; 99794;\n 99793; 99792; 99791; 99790; 99789; 99788; 99787; 99786; 99785; 99784; 99783;\n 99782; 99781; 99780; 99779; 99778; 99777; 99776; 99775; 99774; 99773; 99772;\n 99771; 99770; 99769; 99768; 99767; 99766; 99765; 99764; 99763; 99762; 99761;\n 99760; 99759; 99758; 99757; 99756; 99755; 99754; 99753; 99752; 99751; 99750;\n 99749; 99748; 99747; 99746; 99745; 99744; 99743; 99742; 99741; 99740; 99739;\n 99738; 99737; 99736; 99735; 99734; 99733; 99732; 99731; 99730; 99729; 99728;\n 99727; 99726; 99725; 99724; 99723; 99722; 99721; 99720; 99719; 99718; 99717;\n 99716; 99715; 99714; 99713; 99712; 99711; 99710; 99709; 99708; 99707; 99706;\n 99705; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [] [2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [-1; 3; 3; -1; -4; -4] [4; -3; -2; -1; 1; 4; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; 3; 3; -1; -4; -4; 4; -3; -2; -1; 1; 4; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [3; 0; 4; 4; 1; -4; -5; 2; -2; -2] [-2; 1; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; 0; 4; 4; 1; -4; -5; 2; -2; -2; -2; 1; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1634539104.331769
    },
    "6.3_recterm_arbres": {
      "grade": 100,
      "solution": "let size1 a =\n  let rec aux_size a =\n    match a with \n    |Nil->0\n    |Node(_,fg,fd)->1+aux_size fg+ aux_size fd in aux_size a;; \n\nlet size' l n =\n  let rec aux l n =\n    match l with \n    |[]->n\n    |a::r-> match a with \n      |Nil-> aux r n\n      |Node(_,fg,fd)->aux (List.append ([fg;fd]) (r)) (n+1) in aux l n;;\n                                          \n\n        \nlet size a =\n  size' [a] 0;;\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "size1",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "size1",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size1\n  (Node (-3, Node (0, Nil, Nil),\n    Node (-1, Node (0, Nil, Node (1, Nil, Node (-1, Nil, Nil))),\n     Node (-3, Nil, Node (2, Nil, Nil)))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "8",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size1\n  (Node (-5, Node (2, Nil, Nil),\n    Node (3, Nil,\n     Node (1, Node (-2, Node (2, Nil, Nil), Nil),\n      Node (3, Node (3, Nil, Nil), Nil)))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "8",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size1\n  (Node (-3, Nil,\n    Node (-3, Node (4, Node (-1, Nil, Nil), Node (3, Nil, Nil)),\n     Node (-2, Node (-5, Nil, Node (-4, Nil, Nil)), Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "8",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size1\n  (Node (-5, Nil,\n    Node (-3, Node (1, Node (-3, Nil, Nil), Nil),\n     Node (-3, Node (-2, Node (-2, Nil, Nil), Nil), Node (3, Nil, Nil)))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "8",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "size1",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size1 (Node ('l', Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size1 (Node ('p', Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size1 (Node ('n', Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size1 (Node ('l', Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "size'",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "size'",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size'\n  [Node ('z',\n    Node ('r',\n     Node ('x',\n      Node ('u',\n       Node ('y',\n        Node ('g',\n         Node ('g',\n          Node ('o',\n           Node ('j',\n            Node ('z',\n             Node ('v',\n              Node ('o',\n               Node ('s',\n                Node ('z',\n                 Node ('n',\n                  Node ('l',\n                   Node ('d',\n                    Node ('i',\n                     Node ('y',\n                      Node ('k',\n                       Node ('h',\n                        Node ('q',\n                         Node ('t',\n                          Node ('o',\n                           Node ('n',\n                            Node ('u',\n                             Node ('j',\n                              Node ('a',\n                               Node ('b',\n                                Node ('q',\n                                 Node ('t',\n                                  Node ('i',\n                                   Node ('m',\n                                    Node ('j',\n                                     Node ('x',\n                                      Node ('t',\n                                       Node ('h',\n                                        Node ('n',\n                                         Node ('l',\n                                          Node ('h',\n                                           Node ('m',\n                                            Node ('d',\n                                             Node ('c',\n                                              Node ('l',\n                                               Node ('b',\n                                                Node ('s',\n                                                 Node ('g',\n                                                  Node ('h',\n                                                   Node ('f',\n                                                    Node ('d',\n                                                     Node ('g',\n                                                      Node ('k',\n                                                       Node ('g',\n                                                        Node ('v',\n                                                         Node ('y',\n                                                          Node ('i',\n                                                           Node ('o',\n                                                            Node ('o',\n                                                             Node ('v',\n                                                              Node ('r',\n                                                               Node ('z',\n                                                                Node ('v',\n                                                                 Node ('n',\n                                                                  Node ('l',\n                                                                   Node ('b',\n                                                                    Node\n                                                                    ('t',\n                                                                    Node\n                                                                    ('g',\n                                                                    Node\n                                                                    ('a',\n                                                                    Node\n                                                                    ('h',\n                                                                    Node\n                                                                    ('a',\n                                                                    Node\n                                                                    ('e',\n                                                                    Node\n                                                                    ('j',\n                                                                    Node\n                                                                    ('q',\n                                                                    Node\n                                                                    ('v',\n                                                                    Node\n                                                                    ('g',\n                                                                    Node\n                                                                    ('z',\n                                                                    Node\n                                                                    ('n',\n                                                                    Node\n                                                                    ('v',\n                                                                    Node\n                                                                    ('t',\n                                                                    Node\n                                                                    ('o',\n                                                                    Node\n                                                                    ('k',\n                                                                    Node\n                                                                    ('p',\n                                                                    Node\n                                                                    ('e',\n                                                                    Node\n                                                                    ('m',\n                                                                    Node\n                                                                    ('k',\n                                                                    Node\n                                                                    ('s',\n                                                                    Node\n                                                                    ('t',\n                                                                    Node\n                                                                    ('h',\n                                                                    Node\n                                                                    ('q',\n                                                                    Node\n                                                                    ('p',\n                                                                    Node\n                                                                    ('q',\n                                                                    Node\n                                                                    ('y',\n                                                                    Node\n                                                                    ('d',\n                                                                    Node\n                                                                    ('f',\n                                                                    Node\n                                                                    ('d',\n                                                                    Node\n                                                                    ('u',\n                                                                    Node\n                                                                    ('q',\n                                                                    Node\n                                                                    ('n',\n                                                                    Node\n                                                                    ('j',\n                                                                    Node\n                                                                    (...),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                   Nil),\n                                                                  Nil),\n                                                                 Nil),\n                                                                Nil),\n                                                               Nil),\n                                                              Nil),\n                                                             Nil),\n                                                            Nil),\n                                                           Nil),\n                                                          Nil),\n                                                         Nil),\n                                                        Nil),\n                                                       Nil),\n                                                      Nil),\n                                                     Nil),\n                                                    Nil),\n                                                   Nil),\n                                                  Nil),\n                                                 Nil),\n                                                Nil),\n                                               Nil),\n                                              Nil),\n                                             Nil),\n                                            Nil),\n                                           Nil),\n                                          Nil),\n                                         Nil),\n                                        Nil),\n                                       Nil),\n                                      Nil),\n                                     Nil),\n                                    Nil),\n                                   Nil),\n                                  Nil),\n                                 Nil),\n                                Nil),\n                               Nil),\n                              Nil),\n                             Nil),\n                            Nil),\n                           Nil),\n                          Nil),\n                         Nil),\n                        Nil),\n                       Nil),\n                      Nil),\n                     Nil),\n                    Nil),\n                   Nil),\n                  Nil),\n                 Nil),\n                Nil),\n               Nil),\n              Nil),\n             Nil),\n            Nil),\n           Nil),\n          Nil),\n         Nil),\n        Nil),\n       Nil),\n      Nil),\n     ...),\n    ...);\n   ...]\n  5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "100006",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size'\n  [Node ('o', Nil, Nil); Node ('u', Nil, Nil); Node ('w', Nil, Nil);\n   Node ('r', Nil, Nil); Node ('w', Nil, Nil); Node ('l', Nil, Nil);\n   Node ('z', Nil, Nil); Node ('l', Nil, Nil); Node ('l', Nil, Nil);\n   Node ('k', Nil, Nil); Node ('d', Nil, Nil); Node ('o', Nil, Nil);\n   Node ('t', Nil, Nil); Node ('s', Nil, Nil); Node ('w', Nil, Nil);\n   Node ('s', Nil, Nil); Node ('w', Nil, Nil); Node ('c', Nil, Nil);\n   Node ('k', Nil, Nil); Node ('u', Nil, Nil); Node ('f', Nil, Nil);\n   Node ('x', Nil, Nil); Node ('d', Nil, Nil); Node ('v', Nil, Nil);\n   Node ('d', Nil, Nil); Node ('d', Nil, Nil); Node ('i', Nil, Nil);\n   Node ('n', Nil, Nil); Node ('r', Nil, Nil); Node ('h', Nil, Nil);\n   Node ('b', Nil, Nil); Node ('b', Nil, Nil); Node ('k', Nil, Nil);\n   Node ('q', Nil, Nil); Node ('t', Nil, Nil); Node ('z', Nil, Nil);\n   Node ('d', Nil, Nil); Node ('q', Nil, Nil); Node ('h', Nil, Nil);\n   Node ('z', Nil, Nil); Node ('l', Nil, Nil); Node ('o', Nil, Nil);\n   Node ('h', Nil, Nil); Node ('p', Nil, Nil); Node ('c', Nil, Nil);\n   Node ('p', Nil, Nil); Node ('a', Nil, Nil); Node ('i', Nil, Nil);\n   Node ('t', Nil, Nil); Node ('a', Nil, Nil); Node ('g', Nil, Nil);\n   Node ('i', Nil, Nil); Node ('m', Nil, Nil); Node ('a', Nil, Nil);\n   Node ('j', Nil, Nil); Node ('k', Nil, Nil); Node ('v', Nil, Nil);\n   Node ('k', Nil, Nil); Node ('u', Nil, Nil); Node ('b', Nil, Nil);\n   Node ('y', Nil, Nil); Node ('j', Nil, Nil); Node ('w', Nil, Nil);\n   Node ('h', Nil, Nil); Node ('q', Nil, Nil); Node ('h', Nil, Nil);\n   Node ('u', Nil, Nil); Node ('c', Nil, Nil); Node ('u', Nil, Nil);\n   Node ('w', Nil, Nil); Node ('j', Nil, Nil); Node ('w', Nil, Nil);\n   Node ('e', Nil, Nil); Node ('l', Nil, Nil); Node ('p', Nil, ...); ...]\n  42",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "100043",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size'\n  [Node ('e',\n    Node ('q', Node ('g', Nil, Node ('y', Nil, Nil)),\n     Node ('k', Node ('w', Nil, Nil), Nil)),\n    Node ('c', Nil, Node ('w', Nil, Nil)));\n   Node ('z', Node ('c', Nil, Nil),\n    Node ('e', Node ('t', Nil, Nil),\n     Node ('z', Node ('d', Node ('i', Node ('h', Nil, Nil), Nil), Nil), Nil)))]\n  5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "21",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size'\n  [Node ('a', Nil, Nil); Node ('q', Nil, Nil); Node ('d', Nil, Nil);\n   Node ('q', Nil, Nil); Node ('z', Nil, Nil); Node ('t', Nil, Nil);\n   Node ('m', Nil, Nil)]\n  0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "7",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size'\n  [Node ('p',\n    Node ('m', Nil,\n     Node ('x', Node ('s', Node ('x', Nil, Nil), Node ('j', Nil, Nil)),\n      Node ('r', Nil, Nil))),\n    Node ('m', Nil, Nil))]\n  2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "10",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 :"
            },
            {
              "text": "size",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "size",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size\n  (Node ('y',\n    Node ('z',\n     Node ('p',\n      Node ('z',\n       Node ('x',\n        Node ('v',\n         Node ('l',\n          Node ('h',\n           Node ('l',\n            Node ('d',\n             Node ('n',\n              Node ('v',\n               Node ('t',\n                Node ('i',\n                 Node ('m',\n                  Node ('f',\n                   Node ('z',\n                    Node ('b',\n                     Node ('e',\n                      Node ('m',\n                       Node ('g',\n                        Node ('l',\n                         Node ('f',\n                          Node ('g',\n                           Node ('i',\n                            Node ('j',\n                             Node ('h',\n                              Node ('v',\n                               Node ('k',\n                                Node ('h',\n                                 Node ('g',\n                                  Node ('u',\n                                   Node ('d',\n                                    Node ('w',\n                                     Node ('y',\n                                      Node ('q',\n                                       Node ('p',\n                                        Node ('r',\n                                         Node ('p',\n                                          Node ('q',\n                                           Node ('n',\n                                            Node ('s',\n                                             Node ('j',\n                                              Node ('e',\n                                               Node ('f',\n                                                Node ('c',\n                                                 Node ('e',\n                                                  Node ('q',\n                                                   Node ('d',\n                                                    Node ('o',\n                                                     Node ('p',\n                                                      Node ('r',\n                                                       Node ('m',\n                                                        Node ('y',\n                                                         Node ('k',\n                                                          Node ('w',\n                                                           Node ('x',\n                                                            Node ('j',\n                                                             Node ('p',\n                                                              Node ('m',\n                                                               Node ('s',\n                                                                Node ('r',\n                                                                 Node ('s',\n                                                                  Node ('n',\n                                                                   Node ('m',\n                                                                    Node\n                                                                    ('f',\n                                                                    Node\n                                                                    ('s',\n                                                                    Node\n                                                                    ('z',\n                                                                    Node\n                                                                    ('x',\n                                                                    Node\n                                                                    ('r',\n                                                                    Node\n                                                                    ('f',\n                                                                    Node\n                                                                    ('z',\n                                                                    Node\n                                                                    ('e',\n                                                                    Node\n                                                                    ('c',\n                                                                    Node\n                                                                    ('b',\n                                                                    Node\n                                                                    ('y',\n                                                                    Node\n                                                                    ('l',\n                                                                    Node\n                                                                    ('p',\n                                                                    Node\n                                                                    ('t',\n                                                                    Node\n                                                                    ('w',\n                                                                    Node\n                                                                    ('y',\n                                                                    Node\n                                                                    ('v',\n                                                                    Node\n                                                                    ('u',\n                                                                    Node\n                                                                    ('z',\n                                                                    Node\n                                                                    ('t',\n                                                                    Node\n                                                                    ('u',\n                                                                    Node\n                                                                    ('t',\n                                                                    Node\n                                                                    ('t',\n                                                                    Node\n                                                                    ('q',\n                                                                    Node\n                                                                    ('e',\n                                                                    Node\n                                                                    ('g',\n                                                                    Node\n                                                                    ('z',\n                                                                    Node\n                                                                    ('d',\n                                                                    Node\n                                                                    ('v',\n                                                                    Node\n                                                                    ('w',\n                                                                    Node\n                                                                    ('x',\n                                                                    Node\n                                                                    ('v',\n                                                                    Node\n                                                                    ('u',\n                                                                    Node\n                                                                    ('j',\n                                                                    Node\n                                                                    ('a',\n                                                                    Node\n                                                                    (...),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                   Nil),\n                                                                  Nil),\n                                                                 Nil),\n                                                                Nil),\n                                                               Nil),\n                                                              Nil),\n                                                             Nil),\n                                                            Nil),\n                                                           Nil),\n                                                          Nil),\n                                                         Nil),\n                                                        Nil),\n                                                       Nil),\n                                                      Nil),\n                                                     Nil),\n                                                    Nil),\n                                                   Nil),\n                                                  Nil),\n                                                 Nil),\n                                                Nil),\n                                               Nil),\n                                              Nil),\n                                             Nil),\n                                            Nil),\n                                           Nil),\n                                          Nil),\n                                         Nil),\n                                        Nil),\n                                       Nil),\n                                      Nil),\n                                     Nil),\n                                    Nil),\n                                   Nil),\n                                  Nil),\n                                 Nil),\n                                Nil),\n                               Nil),\n                              Nil),\n                             Nil),\n                            Nil),\n                           Nil),\n                          Nil),\n                         Nil),\n                        Nil),\n                       Nil),\n                      Nil),\n                     Nil),\n                    Nil),\n                   Nil),\n                  Nil),\n                 Nil),\n                Nil),\n               Nil),\n              Nil),\n             Nil),\n            Nil),\n           Nil),\n          Nil),\n         Nil),\n        Nil),\n       ...),\n      ...),\n     ...),\n    ...))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "100001",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size (Node ('z', Node ('p', Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size (Node ('y', Node ('b', Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size (Node ('b', Node ('t', Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1634541102.57459
    },
    "6.4_recterm_listes": {
      "grade": 100,
      "solution": "let insert x l =\n  let rec insert_tail x l acc =\n    match l with \n    |[]->(List.rev_append (acc) [x])\n    |e::r when e=x -> List.rev_append (acc) l\n    |e::r when x>e -> insert_tail x r (e::acc)\n    |e::r-> List.rev_append (acc) (List.append [x;e] r) in insert_tail x l [];;\n\nlet sort l =\n  let rec sort_tail l acc= \n    match l with \n    |[]->acc \n    |x::l'-> sort_tail l' (insert x acc) in sort_tail l [];;\n\nlet union_sorted l1 l2 =\n  let rec union_sorted_tail l1 l2 acc= \n    match l1 with \n    |[]->List.rev_append acc l2\n    |e1::r1-> match l2 with \n      |[]->List.rev_append acc l1\n      |e2::r2 when e1=e2 -> union_sorted_tail r1 r2 (e1::acc)\n      |e2::r2 when e1<e2 -> union_sorted_tail r1 l2 (e1::acc)\n      |e2::r2 -> union_sorted_tail l1 r2 (e2::acc) in union_sorted_tail l1 l2 [];;\n                   \n\nlet inter_sorted l1 l2 =\n  let rec inter_sorted_tail l1 l2 acc= \n    match l1 with \n    |[]->List.rev acc\n    |e1::r1-> match l2 with \n      |[]-> List.rev acc\n      |e2::r2 when e1=e2-> inter_sorted_tail r1 r2 (e1::acc)\n      |e2::r2 when e1<e2 -> inter_sorted_tail r1 l2 acc\n      |e2::r2 -> inter_sorted_tail l1 r2 acc in inter_sorted_tail l1 l2 [];;\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "insert",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "insert",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert 5 []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[5]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert 8 [1; 3; 8; 15]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1; 3; 8; 15]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert\n  200002\n  [0; 2; 4; 6; 8; 10; 12; 14; 16; 18; 20; 22; 24; 26; 28; 30; 32; 34; 36; 38;\n   40; 42; 44; 46; 48; 50; 52; 54; 56; 58; 60; 62; 64; 66; 68; 70; 72; 74;\n   76; 78; 80; 82; 84; 86; 88; 90; 92; 94; 96; 98; 100; 102; 104; 106; 108;\n   110; 112; 114; 116; 118; 120; 122; 124; 126; 128; 130; 132; 134; 136; 138;\n   140; 142; 144; 146; 148; 150; 152; 154; 156; 158; 160; 162; 164; 166; 168;\n   170; 172; 174; 176; 178; 180; 182; 184; 186; 188; 190; 192; 194; 196; 198;\n   200; 202; 204; 206; 208; 210; 212; 214; 216; 218; 220; 222; 224; 226; 228;\n   230; 232; 234; 236; 238; 240; 242; 244; 246; 248; 250; 252; 254; 256; 258;\n   260; 262; 264; 266; 268; 270; 272; 274; 276; 278; 280; 282; 284; 286; 288;\n   290; 292; 294; 296; 298; 300; 302; 304; 306; 308; 310; 312; 314; 316; 318;\n   320; 322; 324; 326; 328; 330; 332; 334; 336; 338; 340; 342; 344; 346; 348;\n   350; 352; 354; 356; 358; 360; 362; 364; 366; 368; 370; 372; 374; 376; 378;\n   380; 382; 384; 386; 388; 390; 392; 394; 396; 398; 400; 402; 404; 406; 408;\n   410; 412; 414; 416; 418; 420; 422; 424; 426; 428; 430; 432; 434; 436; 438;\n   440; 442; 444; 446; 448; 450; 452; 454; 456; 458; 460; 462; 464; 466; 468;\n   470; 472; 474; 476; 478; 480; 482; 484; 486; 488; 490; 492; 494; 496; 498;\n   500; 502; 504; 506; 508; 510; 512; 514; 516; 518; 520; 522; 524; 526; 528;\n   530; 532; 534; 536; 538; 540; 542; 544; 546; 548; 550; 552; 554; 556; 558;\n   560; 562; 564; 566; 568; 570; 572; 574; 576; 578; 580; 582; 584; 586; 588;\n   590; 592; 594; 596; ...]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; 2; 4; 6; 8; 10; 12; 14; 16; 18; 20; 22; 24; 26; 28; 30; 32; 34; 36; 38;\n 40; 42; 44; 46; 48; 50; 52; 54; 56; 58; 60; 62; 64; 66; 68; 70; 72; 74; 76;\n 78; 80; 82; 84; 86; 88; 90; 92; 94; 96; 98; 100; 102; 104; 106; 108; 110;\n 112; 114; 116; 118; 120; 122; 124; 126; 128; 130; 132; 134; 136; 138; 140;\n 142; 144; 146; 148; 150; 152; 154; 156; 158; 160; 162; 164; 166; 168; 170;\n 172; 174; 176; 178; 180; 182; 184; 186; 188; 190; 192; 194; 196; 198; 200;\n 202; 204; 206; 208; 210; 212; 214; 216; 218; 220; 222; 224; 226; 228; 230;\n 232; 234; 236; 238; 240; 242; 244; 246; 248; 250; 252; 254; 256; 258; 260;\n 262; 264; 266; 268; 270; 272; 274; 276; 278; 280; 282; 284; 286; 288; 290;\n 292; 294; 296; 298; 300; 302; 304; 306; 308; 310; 312; 314; 316; 318; 320;\n 322; 324; 326; 328; 330; 332; 334; 336; 338; 340; 342; 344; 346; 348; 350;\n 352; 354; 356; 358; 360; 362; 364; 366; 368; 370; 372; 374; 376; 378; 380;\n 382; 384; 386; 388; 390; 392; 394; 396; 398; 400; 402; 404; 406; 408; 410;\n 412; 414; 416; 418; 420; 422; 424; 426; 428; 430; 432; 434; 436; 438; 440;\n 442; 444; 446; 448; 450; 452; 454; 456; 458; 460; 462; 464; 466; 468; 470;\n 472; 474; 476; 478; 480; 482; 484; 486; 488; 490; 492; 494; 496; 498; 500;\n 502; 504; 506; 508; 510; 512; 514; 516; 518; 520; 522; 524; 526; 528; 530;\n 532; 534; 536; 538; 540; 542; 544; 546; 548; 550; 552; 554; 556; 558; 560;\n 562; 564; 566; 568; 570; 572; 574; 576; 578; 580; 582; 584; 586; 588; 590;\n 592; 594; 596; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert\n  -432\n  [-476; -354; -319; -295; -247; -246; -235; -233; -224; -175; -120; -103;\n   -82; -68; -51; -38; -24; -14; 12; 45; 67; 126; 259; 276; 320; 342; 368;\n   378; 389; 420; 456]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-476; -432; -354; -319; -295; -247; -246; -235; -233; -224; -175; -120;\n -103; -82; -68; -51; -38; -24; -14; 12; 45; 67; 126; 259; 276; 320; 342;\n 368; 378; 389; 420; 456]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert\n  -284\n  [-486; -461; -421; -377; -355; -327; -300; -284; -277; -273; -248; -230;\n   -151; -132; -125; -122; -85; -34; -22; -13; -8; 3; 49; 66; 108; 188; 276;\n   361; 378; 452]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-486; -461; -421; -377; -355; -327; -300; -284; -277; -273; -248; -230;\n -151; -132; -125; -122; -85; -34; -22; -13; -8; 3; 49; 66; 108; 188; 276;\n 361; 378; 452]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert\n  85\n  [-490; -390; -383; -322; -288; -232; -218; -185; -176; -114; -101; -52;\n   -48; -33; -23; -17; 43; 119; 122; 141; 157; 287; 298; 333; 363; 395; 430;\n   431; 468; 481; 490]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-490; -390; -383; -322; -288; -232; -218; -185; -176; -114; -101; -52; -48;\n -33; -23; -17; 43; 85; 119; 122; 141; 157; 287; 298; 333; 363; 395; 430;\n 431; 468; 481; 490]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert\n  325\n  [-486; -451; -436; -405; -304; -209; -166; -87; -82; -49; -46; -29; -18;\n   -2; 59; 123; 157; 209; 217; 246; 262; 299; 306; 315; 332; 366; 444; 460;\n   472; 485; 496]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-486; -451; -436; -405; -304; -209; -166; -87; -82; -49; -46; -29; -18; -2;\n 59; 123; 157; 209; 217; 246; 262; 299; 306; 315; 325; 332; 366; 444; 460;\n 472; 485; 496]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert\n  10\n  [-480; -463; -374; -325; -309; -254; -251; -232; -183; -174; -172; -143;\n   -113; -110; -90; -62; -60; -58; -43; 30; 51; 227; 231; 249; 273; 336; 342;\n   388; 432; 437; 492]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-480; -463; -374; -325; -309; -254; -251; -232; -183; -174; -172; -143;\n -113; -110; -90; -62; -60; -58; -43; 10; 30; 51; 227; 231; 249; 273; 336;\n 342; 388; 432; 437; 492]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert\n  413\n  [-411; -409; -402; -353; -346; -345; -343; -335; -312; -287; -261; -216;\n   -200; -194; -159; -79; -6; -3; 59; 61; 90; 91; 102; 180; 243; 292; 307;\n   378; 417; 441; 476]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-411; -409; -402; -353; -346; -345; -343; -335; -312; -287; -261; -216;\n -200; -194; -159; -79; -6; -3; 59; 61; 90; 91; 102; 180; 243; 292; 307; 378;\n 413; 417; 441; 476]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert\n  -65\n  [-482; -455; -450; -442; -379; -372; -334; -330; -289; -270; -213; -205;\n   -171; -146; -121; -88; -46; -16; 30; 33; 81; 114; 148; 209; 268; 273; 333;\n   383; 424; 474; 487]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-482; -455; -450; -442; -379; -372; -334; -330; -289; -270; -213; -205;\n -171; -146; -121; -88; -65; -46; -16; 30; 33; 81; 114; 148; 209; 268; 273;\n 333; 383; 424; 474; 487]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert\n  61\n  [-480; -446; -443; -389; -385; -342; -219; -208; -201; -194; -168; -137;\n   -93; -59; -47; -34; -30; 16; 82; 137; 139; 141; 173; 200; 261; 330; 346;\n   425; 461; 476]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-480; -446; -443; -389; -385; -342; -219; -208; -201; -194; -168; -137; -93;\n -59; -47; -34; -30; 16; 61; 82; 137; 139; 141; 173; 200; 261; 330; 346; 425;\n 461; 476]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "sort",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "sort",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort\n  [8; 2; 6; 3; 7; -10; -2; 5; -5; 0; -3; -6; 9; -8; 7; 9; 6; 8; -3; 9; 0; 3;\n   -8; 8; -3; 2; -5; -5; 0; -1; -10; 9; 4; -8; 6; -1; 8; -3; -3; -6; 8; -10;\n   -7; -10; -7; 9; -1; -2; -8; -5; 9; 7; 0; -6; 7; 4; -5; -9; 9; 3; 5; -5; 7;\n   -6; -3; 1; 0; -7; -6; -7; 0; -2; 7; 6; 4; -10; 2; -4; -7; 2; -10; 6; -7;\n   -8; -4; -4; 7; 0; 0; -2; 0; -9; -8; 7; -1; -6; -6; 0; -2; -4; 9; -2; -10;\n   -8; -6; 9; -7; 6; -8; -8; 1; -2; -1; -4; -10; -10; 7; 5; -8; -7; -3; 7; 4;\n   6; -10; -8; 1; -3; 7; 8; 8; 0; 2; 7; -8; -3; 3; -9; -5; -7; 4; -4; -4; 0;\n   3; 0; 4; -9; 3; -10; 0; 1; 3; 1; -1; 2; -7; -3; 3; 6; -10; 9; 4; 3; -4;\n   -2; 4; 9; 3; 0; -3; 4; 2; 9; -10; 7; -1; -7; -3; 9; 9; 5; -5; -8; -2; -5;\n   7; 8; 4; -7; -7; 9; -2; -6; 1; 6; 9; 8; -9; -7; -3; 4; -1; -3; -7; 6; 6;\n   1; -6; 5; 9; 1; 5; -1; -8; 2; 0; 6; 2; -10; -1; -7; 0; -3; 0; -1; -8; 2;\n   1; 3; 1; -4; -4; 3; -7; -4; -10; -6; -10; -5; 0; -4; 2; -5; 9; 5; -9; -8;\n   9; -9; -4; -3; -8; 8; 6; -10; 5; -4; 0; 8; 1; -8; 5; 8; -10; -9; -2; -2;\n   2; 9; 9; 7; 7; -2; 9; -9; 6; 0; 9; -4; 8; -9; -2; 4; -10; 8; -3; 1; 4; -2;\n   7; 4; 3; -1; -4; 8; 5; -7; 6; ...]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-10; -9; -8; -7; -6; -5; -4; -3; -2; -1; 0; 1; 2; 3; 4; 5; 6; 7; 8; 9]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [-3; -2; -2; 0; -5; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -3; -2; 0; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [4; 3; -5; 2; -2; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -3; -2; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [1; -2; -1; 2; -5; -4; -3; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -2; -1; 1; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [-1; 2; 1; 3; -5; -2; 1; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -2; -1; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [2; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [-4; 0; 3; -5; 1; -3; -5; 2; -2; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -2; 0; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 :"
            },
            {
              "text": "union_sorted",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "union_sorted",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted\n  [0; 2; 4; 6; 8; 10; 12; 14; 16; 18; 20; 22; 24; 26; 28; 30; 32; 34; 36; 38;\n   40; 42; 44; 46; 48; 50; 52; 54; 56; 58; 60; 62; 64; 66; 68; 70; 72; 74;\n   76; 78; 80; 82; 84; 86; 88; 90; 92; 94; 96; 98; 100; 102; 104; 106; 108;\n   110; 112; 114; 116; 118; 120; 122; 124; 126; 128; 130; 132; 134; 136; 138;\n   140; 142; 144; 146; 148; 150; 152; 154; 156; 158; 160; 162; 164; 166; 168;\n   170; 172; 174; 176; 178; 180; 182; 184; 186; 188; 190; 192; 194; 196; 198;\n   200; 202; 204; 206; 208; 210; 212; 214; 216; 218; 220; 222; 224; 226; 228;\n   230; 232; 234; 236; 238; 240; 242; 244; 246; 248; 250; 252; 254; 256; 258;\n   260; 262; 264; 266; 268; 270; 272; 274; 276; 278; 280; 282; 284; 286; 288;\n   290; 292; 294; 296; 298; 300; 302; 304; 306; 308; 310; 312; 314; 316; 318;\n   320; 322; 324; 326; 328; 330; 332; 334; 336; 338; 340; 342; 344; 346; 348;\n   350; 352; 354; 356; 358; 360; 362; 364; 366; 368; 370; 372; 374; 376; 378;\n   380; 382; 384; 386; 388; 390; 392; 394; 396; 398; 400; 402; 404; 406; 408;\n   410; 412; 414; 416; 418; 420; 422; 424; 426; 428; 430; 432; 434; 436; 438;\n   440; 442; 444; 446; 448; 450; 452; 454; 456; 458; 460; 462; 464; 466; 468;\n   470; 472; 474; 476; 478; 480; 482; 484; 486; 488; 490; 492; 494; 496; 498;\n   500; 502; 504; 506; 508; 510; 512; 514; 516; 518; 520; 522; 524; 526; 528;\n   530; 532; 534; 536; 538; 540; 542; 544; 546; 548; 550; 552; 554; 556; 558;\n   560; 562; 564; 566; 568; 570; 572; 574; 576; 578; 580; 582; 584; 586; 588;\n   590; 592; 594; 596; ...]\n  [1; 3; 5; 7; 9; 11; 13; 15; 17; 19; 21; 23; 25; 27; 29; 31; 33; 35; 37; 39;\n   41; 43; 45; 47; 49; 51; 53; 55; 57; 59; 61; 63; 65; 67; 69; 71; 73; 75;\n   77; 79; 81; 83; 85; 87; 89; 91; 93; 95; 97; 99; 101; 103; 105; 107; 109;\n   111; 113; 115; 117; 119; 121; 123; 125; 127; 129; 131; 133; 135; 137; 139;\n   141; 143; 145; 147; 149; 151; 153; 155; 157; 159; 161; 163; 165; 167; 169;\n   171; 173; 175; 177; 179; 181; 183; 185; 187; 189; 191; 193; 195; 197; 199;\n   201; 203; 205; 207; 209; 211; 213; 215; 217; 219; 221; 223; 225; 227; 229;\n   231; 233; 235; 237; 239; 241; 243; 245; 247; 249; 251; 253; 255; 257; 259;\n   261; 263; 265; 267; 269; 271; 273; 275; 277; 279; 281; 283; 285; 287; 289;\n   291; 293; 295; 297; 299; 301; 303; 305; 307; 309; 311; 313; 315; 317; 319;\n   321; 323; 325; 327; 329; 331; 333; 335; 337; 339; 341; 343; 345; 347; 349;\n   351; 353; 355; 357; 359; 361; 363; 365; 367; 369; 371; 373; 375; 377; 379;\n   381; 383; 385; 387; 389; 391; 393; 395; 397; 399; 401; 403; 405; 407; 409;\n   411; 413; 415; 417; 419; 421; 423; 425; 427; 429; 431; 433; 435; 437; 439;\n   441; 443; 445; 447; 449; 451; 453; 455; 457; 459; 461; 463; 465; 467; 469;\n   471; 473; 475; 477; 479; 481; 483; 485; 487; 489; 491; 493; 495; 497; 499;\n   501; 503; 505; 507; 509; 511; 513; 515; 517; 519; 521; 523; 525; 527; 529;\n   531; 533; 535; 537; 539; 541; 543; 545; 547; 549; 551; 553; 555; 557; 559;\n   561; 563; 565; 567; 569; 571; 573; 575; 577; 579; 581; 583; 585; 587; 589;\n   591; 593; 595; 597; ...]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20;\n 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39;\n 40; 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58;\n 59; 60; 61; 62; 63; 64; 65; 66; 67; 68; 69; 70; 71; 72; 73; 74; 75; 76; 77;\n 78; 79; 80; 81; 82; 83; 84; 85; 86; 87; 88; 89; 90; 91; 92; 93; 94; 95; 96;\n 97; 98; 99; 100; 101; 102; 103; 104; 105; 106; 107; 108; 109; 110; 111; 112;\n 113; 114; 115; 116; 117; 118; 119; 120; 121; 122; 123; 124; 125; 126; 127;\n 128; 129; 130; 131; 132; 133; 134; 135; 136; 137; 138; 139; 140; 141; 142;\n 143; 144; 145; 146; 147; 148; 149; 150; 151; 152; 153; 154; 155; 156; 157;\n 158; 159; 160; 161; 162; 163; 164; 165; 166; 167; 168; 169; 170; 171; 172;\n 173; 174; 175; 176; 177; 178; 179; 180; 181; 182; 183; 184; 185; 186; 187;\n 188; 189; 190; 191; 192; 193; 194; 195; 196; 197; 198; 199; 200; 201; 202;\n 203; 204; 205; 206; 207; 208; 209; 210; 211; 212; 213; 214; 215; 216; 217;\n 218; 219; 220; 221; 222; 223; 224; 225; 226; 227; 228; 229; 230; 231; 232;\n 233; 234; 235; 236; 237; 238; 239; 240; 241; 242; 243; 244; 245; 246; 247;\n 248; 249; 250; 251; 252; 253; 254; 255; 256; 257; 258; 259; 260; 261; 262;\n 263; 264; 265; 266; 267; 268; 269; 270; 271; 272; 273; 274; 275; 276; 277;\n 278; 279; 280; 281; 282; 283; 284; 285; 286; 287; 288; 289; 290; 291; 292;\n 293; 294; 295; 296; 297; 298; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-3; -1; 0; 1; 3; 4] [-5; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -3; -1; 0; 1; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-5; -4; 0; 3] [-5; -4; -3; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; 0; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-5; -3; 0; 2; 3] [4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -3; 0; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [3; 4] [-5; -1; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -1; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [0] [-4; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-5; 0; 1; 4] [-3; -2; 0; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -3; -2; 0; 1; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-3; -2; -1; 3; 4] [-5; -4; -3; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -2; -1; 0; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-4; -3; -2; -1; 1; 2; 3] [-5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -2; -1; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-3; -2; -1; 0; 4] [3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -2; -1; 0; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 :"
            },
            {
              "text": "inter_sorted",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "inter_sorted",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted\n  [0; 2; 4; 6; 8; 10; 12; 14; 16; 18; 20; 22; 24; 26; 28; 30; 32; 34; 36; 38;\n   40; 42; 44; 46; 48; 50; 52; 54; 56; 58; 60; 62; 64; 66; 68; 70; 72; 74;\n   76; 78; 80; 82; 84; 86; 88; 90; 92; 94; 96; 98; 100; 102; 104; 106; 108;\n   110; 112; 114; 116; 118; 120; 122; 124; 126; 128; 130; 132; 134; 136; 138;\n   140; 142; 144; 146; 148; 150; 152; 154; 156; 158; 160; 162; 164; 166; 168;\n   170; 172; 174; 176; 178; 180; 182; 184; 186; 188; 190; 192; 194; 196; 198;\n   200; 202; 204; 206; 208; 210; 212; 214; 216; 218; 220; 222; 224; 226; 228;\n   230; 232; 234; 236; 238; 240; 242; 244; 246; 248; 250; 252; 254; 256; 258;\n   260; 262; 264; 266; 268; 270; 272; 274; 276; 278; 280; 282; 284; 286; 288;\n   290; 292; 294; 296; 298; 300; 302; 304; 306; 308; 310; 312; 314; 316; 318;\n   320; 322; 324; 326; 328; 330; 332; 334; 336; 338; 340; 342; 344; 346; 348;\n   350; 352; 354; 356; 358; 360; 362; 364; 366; 368; 370; 372; 374; 376; 378;\n   380; 382; 384; 386; 388; 390; 392; 394; 396; 398; 400; 402; 404; 406; 408;\n   410; 412; 414; 416; 418; 420; 422; 424; 426; 428; 430; 432; 434; 436; 438;\n   440; 442; 444; 446; 448; 450; 452; 454; 456; 458; 460; 462; 464; 466; 468;\n   470; 472; 474; 476; 478; 480; 482; 484; 486; 488; 490; 492; 494; 496; 498;\n   500; 502; 504; 506; 508; 510; 512; 514; 516; 518; 520; 522; 524; 526; 528;\n   530; 532; 534; 536; 538; 540; 542; 544; 546; 548; 550; 552; 554; 556; 558;\n   560; 562; 564; 566; 568; 570; 572; 574; 576; 578; 580; 582; 584; 586; 588;\n   590; 592; 594; 596; ...]\n  [0; 2; 4; 6; 8; 10; 12; 14; 16; 18; 20; 22; 24; 26; 28; 30; 32; 34; 36; 38;\n   40; 42; 44; 46; 48; 50; 52; 54; 56; 58; 60; 62; 64; 66; 68; 70; 72; 74;\n   76; 78; 80; 82; 84; 86; 88; 90; 92; 94; 96; 98; 100; 102; 104; 106; 108;\n   110; 112; 114; 116; 118; 120; 122; 124; 126; 128; 130; 132; 134; 136; 138;\n   140; 142; 144; 146; 148; 150; 152; 154; 156; 158; 160; 162; 164; 166; 168;\n   170; 172; 174; 176; 178; 180; 182; 184; 186; 188; 190; 192; 194; 196; 198;\n   200; 202; 204; 206; 208; 210; 212; 214; 216; 218; 220; 222; 224; 226; 228;\n   230; 232; 234; 236; 238; 240; 242; 244; 246; 248; 250; 252; 254; 256; 258;\n   260; 262; 264; 266; 268; 270; 272; 274; 276; 278; 280; 282; 284; 286; 288;\n   290; 292; 294; 296; 298; 300; 302; 304; 306; 308; 310; 312; 314; 316; 318;\n   320; 322; 324; 326; 328; 330; 332; 334; 336; 338; 340; 342; 344; 346; 348;\n   350; 352; 354; 356; 358; 360; 362; 364; 366; 368; 370; 372; 374; 376; 378;\n   380; 382; 384; 386; 388; 390; 392; 394; 396; 398; 400; 402; 404; 406; 408;\n   410; 412; 414; 416; 418; 420; 422; 424; 426; 428; 430; 432; 434; 436; 438;\n   440; 442; 444; 446; 448; 450; 452; 454; 456; 458; 460; 462; 464; 466; 468;\n   470; 472; 474; 476; 478; 480; 482; 484; 486; 488; 490; 492; 494; 496; 498;\n   500; 502; 504; 506; 508; 510; 512; 514; 516; 518; 520; 522; 524; 526; 528;\n   530; 532; 534; 536; 538; 540; 542; 544; 546; 548; 550; 552; 554; 556; 558;\n   560; 562; 564; 566; 568; 570; 572; 574; 576; 578; 580; 582; 584; 586; 588;\n   590; 592; 594; 596; ...]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; 2; 4; 6; 8; 10; 12; 14; 16; 18; 20; 22; 24; 26; 28; 30; 32; 34; 36; 38;\n 40; 42; 44; 46; 48; 50; 52; 54; 56; 58; 60; 62; 64; 66; 68; 70; 72; 74; 76;\n 78; 80; 82; 84; 86; 88; 90; 92; 94; 96; 98; 100; 102; 104; 106; 108; 110;\n 112; 114; 116; 118; 120; 122; 124; 126; 128; 130; 132; 134; 136; 138; 140;\n 142; 144; 146; 148; 150; 152; 154; 156; 158; 160; 162; 164; 166; 168; 170;\n 172; 174; 176; 178; 180; 182; 184; 186; 188; 190; 192; 194; 196; 198; 200;\n 202; 204; 206; 208; 210; 212; 214; 216; 218; 220; 222; 224; 226; 228; 230;\n 232; 234; 236; 238; 240; 242; 244; 246; 248; 250; 252; 254; 256; 258; 260;\n 262; 264; 266; 268; 270; 272; 274; 276; 278; 280; 282; 284; 286; 288; 290;\n 292; 294; 296; 298; 300; 302; 304; 306; 308; 310; 312; 314; 316; 318; 320;\n 322; 324; 326; 328; 330; 332; 334; 336; 338; 340; 342; 344; 346; 348; 350;\n 352; 354; 356; 358; 360; 362; 364; 366; 368; 370; 372; 374; 376; 378; 380;\n 382; 384; 386; 388; 390; 392; 394; 396; 398; 400; 402; 404; 406; 408; 410;\n 412; 414; 416; 418; 420; 422; 424; 426; 428; 430; 432; 434; 436; 438; 440;\n 442; 444; 446; 448; 450; 452; 454; 456; 458; 460; 462; 464; 466; 468; 470;\n 472; 474; 476; 478; 480; 482; 484; 486; 488; 490; 492; 494; 496; 498; 500;\n 502; 504; 506; 508; 510; 512; 514; 516; 518; 520; 522; 524; 526; 528; 530;\n 532; 534; 536; 538; 540; 542; 544; 546; 548; 550; 552; 554; 556; 558; 560;\n 562; 564; 566; 568; 570; 572; 574; 576; 578; 580; 582; 584; 586; 588; 590;\n 592; 594; 596; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-3; -1; 0; 1; 3] [-3; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; 0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [] [-5; -4; -3; 0; 2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-5; -3; 0; 1; 3] [-5; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-5; -4; -1; 0; 1; 4] [-4; -2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-5; -4; -3; -2; 2; 3] [-5; 0; 1; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-5; -4; -3; -1; 1; 3] [-4; -2; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [] [-1; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-5; -3; -1; 1; 2; 3; 4] [-4; -3; -2; 0; 2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; 2; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-1; 1; 3; 4] [-5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1634544865.549721
    },
    "7.1_tortue": {
      "grade": 100,
      "solution": "\nlet make_turtle x y = { x=x;y= y; angle=0.;path= Path.empty|>Path.moveto x y};;\n\nlet forward dist trace t = let pi= 4. *. atan 1. in \n  let conv a= (t.angle *. pi)/.180. in \n  \n  let x=t.x+. (cos (conv t.angle) *. dist) in \n  \n  let y=t.y+. (sin (conv t.angle) *. dist)in \n  \n  if trace then \n    {x =x;\n     y =y;\n     angle=t.angle; path=t.path |>Path.lineto x y} \n  else \n    {x=x; y=y;\n     angle=t.angle; path= t.path |>Path.moveto x y};;\n\n\nlet rec run cmds t = match cmds with \n  |[]-> t\n  |c::cmd-> run cmd (command c t) and \n  \n  command cmd t=match cmd with \n    |Line l-> forward l true t\n    |Move m->forward m false t \n    |Turn turn->{x=t.x ;y= t.y; angle=t.angle+.turn;path=t.path} \n    |Repeat (0,cm)->      t     \n    |Repeat (n,cm)->  \n        command (Repeat(n-1,cm)) (run cm t) \n  \n  \n        \n\n\n  \nlet triangle size = [Repeat (3,[Line size;Turn 120.] ) ];;\n\nlet square size = [Repeat (4,[Line size;Turn 90.] ) ];;\n\nlet polygon n size = [Repeat (n,[Line size;Turn (360./. (float_of_int n))] ) ];;\n\nlet spiral size factor angle n = let l = List.init (2*n) (fun i-> Line size) in\n  List.mapi (fun i -> fun x -> if i mod 2 = 0 then\n                (Line (size *. (Float.pow factor (float_of_int (i/2)))))\n              else (Turn angle)\n            ) l \n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "make_turtle",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "make_turtle",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "make_turtle 0.57 0.63",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = 0.57; y = 0.63; angle = 0.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "make_turtle 0.69 0.38",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = 0.69; y = 0.38; angle = 0.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "make_turtle 0.59 0.44",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = 0.59; y = 0.44; angle = 0.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "forward",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "forward",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forward 0.08 true {x = 0.89; y = 0.97; angle = 302.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = 0.932393541138656357; y = 0.902156152307485915; angle = 302.;\n path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forward 0.76 false {x = 0.25; y = 0.59; angle = 277.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = 0.342620700987912252; y = -0.16433507524740476; angle = 277.;\n path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forward 0.54 true {x = 0.32; y = 0.42; angle = 173.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = -0.215974921886313898; y = 0.485809445438779686; angle = 173.;\n path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forward 0.82 false {x = 0.74; y = 0.43; angle = 146.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = 0.0601891905048659304; y = 0.888538180846012438; angle = 146.;\n path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forward 0.02 true {x = 0.11; y = 0.27; angle = 312.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = 0.12338261212717716; y = 0.2551371034904521; angle = 312.;\n path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forward 0.74 true {x = 0.22; y = 0.46; angle = 54.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = 0.654961086696430161; y = 1.05867257583746111; angle = 54.;\n path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forward 0.02 false {x = 0.14; y = 0.22; angle = 125.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = 0.128528471272979089; y = 0.236383040885779827; angle = 125.;\n path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forward 0.7 true {x = 0.56; y = 0.74; angle = 69.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = 0.81085756468171033; y = 1.39350629854804131; angle = 69.;\n path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forward 0.25 false {x = 0.25; y = 0.1; angle = 11.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = 0.495406795861916; y = 0.147702248844136214; angle = 11.;\n path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forward 0.82 false {x = 0.59; y = 0.72; angle = 76.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = 0.788375954391727696; y = 1.51564249554631703; angle = 76.;\n path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 : "
            },
            {
              "text": "run",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "run",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "run [] {x = 0.5; y = 0.5; angle = 90.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = 0.5; y = 0.5; angle = 90.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "run [Line 0.3] {x = 0.5; y = 0.5; angle = 90.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = 0.5; y = 0.8; angle = 90.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "run [Move 0.3] {x = 0.5; y = 0.5; angle = 90.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = 0.5; y = 0.8; angle = 90.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "run\n  [Turn 45.; Line 0.3; Turn (-45.); Move 0.3]\n  {x = 0.5; y = 0.5; angle = 90.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = 0.287867965644035773; y = 1.01213203435596433; angle = 90.;\n path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "run\n  [Repeat (5, [Line 0.3; Turn 90.])]\n  {x = 0.5; y = 0.5; angle = 90.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = 0.5; y = 0.799999999999999933; angle = 540.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "run\n  [Repeat (5, [Line 0.3; Repeat (4, [Line 0.1; Turn 45.]); Turn 90.])]\n  {x = 0.5; y = 0.5; angle = 90.; path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{x = 0.258578643762690075; y = 0.900000000000000244; angle = 1440.;\n path = <abstr>}",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 4 : "
            },
            {
              "text": "triangle",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "triangle",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "triangle 0.38",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (3, [Line 0.38; Turn 120.])]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "triangle 0.69",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (3, [Line 0.69; Turn 120.])]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "triangle 0.87",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (3, [Line 0.87; Turn 120.])]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 5 : "
            },
            {
              "text": "square",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "square",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square 0.08",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (4, [Line 0.08; Turn 90.])]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square 0.85",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (4, [Line 0.85; Turn 90.])]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square 0.49",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (4, [Line 0.49; Turn 90.])]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 5 : "
            },
            {
              "text": "polygon",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "polygon",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "polygon 4 0.1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (4, [Line 0.1; Turn 90.])]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "polygon 7 0.1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (7, [Line 0.1; Turn 51.4285714285714306])]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "polygon 10 0.1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (10, [Line 0.1; Turn 36.])]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 6 : "
            },
            {
              "text": "spiral",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "spiral",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "spiral 1. 0.7 90. 30",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Line 1.; Turn 90.; Line 0.7; Turn 90.; Line 0.489999999999999936; Turn 90.;\n Line 0.342999999999999916; Turn 90.; Line 0.240099999999999925; Turn 90.;\n Line 0.168069999999999942; Turn 90.; Line 0.117648999999999948; Turn 90.;\n Line 0.0823542999999999636; Turn 90.; Line 0.0576480099999999718; Turn 90.;\n Line 0.0403536069999999789; Turn 90.; Line 0.0282475248999999803; Turn 90.;\n Line 0.0197732674299999842; Turn 90.; Line 0.01384128720099999; Turn 90.;\n Line 0.00968890104069999175; Turn 90.; Line 0.00678223072848999423;\n Turn 90.; Line 0.00474756150994299578; Turn 90.;\n Line 0.00332329305696009653; Turn 90.; Line 0.00232630513987206735;\n Turn 90.; Line 0.00162841359791044728; Turn 90.;\n Line 0.00113988951853731296; Turn 90.; Line 0.000797922662976119; Turn 90.;\n Line 0.00055854586408328325; Turn 90.; Line 0.000390982104858298265;\n Turn 90.; Line 0.000273687473400808785; Turn 90.;\n Line 0.000191581231380566123; Turn 90.; Line 0.000134106861966396283;\n Turn 90.; Line 9.38748033764773927e-05; Turn 90.;\n Line 6.57123623635341681e-05; Turn 90.; Line 4.59986536544739136e-05;\n Turn 90.; Line 3.21990575581317375e-05; Turn 90.]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "spiral 0.1 0.95 10. 100",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Line 0.1; Turn 10.; Line 0.095; Turn 10.; Line 0.09025; Turn 10.;\n Line 0.0857375; Turn 10.; Line 0.081450625; Turn 10.;\n Line 0.0773780937499999877; Turn 10.; Line 0.07350918906249998; Turn 10.;\n Line 0.0698337296093749782; Turn 10.; Line 0.0663420431289062223; Turn 10.;\n Line 0.0630249409724609; Turn 10.; Line 0.059873693923837859; Turn 10.;\n Line 0.0568800092276459668; Turn 10.; Line 0.0540360087662636671; Turn 10.;\n Line 0.0513342083279504854; Turn 10.; Line 0.048767497911552958; Turn 10.;\n Line 0.0463291230159753042; Turn 10.; Line 0.0440126668651765404; Turn 10.;\n Line 0.0418120335219177089; Turn 10.; Line 0.0397214318458218238; Turn 10.;\n Line 0.0377353602535307267; Turn 10.; Line 0.0358485922408541963; Turn 10.;\n Line 0.034056162628811483; Turn 10.; Line 0.0323533544973709; Turn 10.;\n Line 0.0307356867725023589; Turn 10.; Line 0.0291989024338772385; Turn 10.;\n Line 0.027738957312183378; Turn 10.; Line 0.0263520094465742039; Turn 10.;\n Line 0.0250344089742454944; Turn 10.; Line 0.0237826885255332174; Turn 10.;\n Line 0.0225935540992565562; Turn 10.; Line 0.0214638763942937294; Turn 10.;\n Line 0.0203906825745790408; Turn 10.; Line 0.0193711484458500872; Turn 10.;\n Line 0.0184025910235575789; Turn 10.; Line 0.0174824614723797025; Turn 10.;\n Line 0.0166083383987607157; Turn 10.; Line 0.0157779214788226797; Turn 10.;\n Line 0.0149890254048815463; Turn 10.; Line 0.0142395741346374675; Turn 10.;\n Line 0.0135275954279055928; Turn 10.; Line 0.0128512156565103123; Turn 10.;\n Line 0.0122086548736847975; Turn 10.; Line 0.0115982221300005572; Turn 10.;\n Line 0.011018311023500529; Turn 10.; Line 0.0104673954723255; Turn 10.;\n Line 0.00994402569870922459; Turn 10.; Line 0.00944682441377376475;\n Turn 10.; Line 0.00897448319308507582; Turn 10.;\n Line 0.00852575903343082142; Turn 10.; Line 0.00809947108175928; Turn 10.;\n Line 0.00769449752767131529; Turn 10.; Line 0.0073097726512877494; Turn 10.;\n Line 0.00694428401872336162; Turn 10.; Line 0.00659706981778719354;\n Turn 10.; Line 0.00626721632689783339; Turn 10.;\n Line 0.00595385551055294115; Turn 10.; Line 0.0056561627350252934; Turn 10.;\n Line 0.00537335459827402873; Turn 10.; Line 0.00510468686836032699;\n Turn 10.; Line 0.00484945252494231073; Turn 10.;\n Line 0.00460697989869519441; Turn 10.; Line 0.00437663090376043482;\n Turn 10.; Line 0.0041577993585724133; Turn 10.; Line 0.0039499093906437922;\n Turn 10.; Line 0.00375241392111160194; Turn 10.;\n Line 0.00356479322505602212; Turn 10.; Line 0.00338655356380322074;\n Turn 10.; Line 0.00321722588561305922; Turn 10.;\n Line 0.00305636459133240643; Turn 10.; Line 0.00290354636176578607;\n Turn 10.; Line 0.00275836904367749661; Turn 10.;\n Line 0.00262045059149362131; Turn 10.; Line 0.00248942806191894059;\n Turn 10.; Line 0.00236495665882299365; Turn 10.;\n Line 0.00224670882588184342; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1636050099.310524
    },
    "7.2_fractales": {
      "grade": 100,
      "solution": "\nlet rec sierpinski size n = \n  if n = 0 then triangle size else \n    [Repeat (3, [Repeat(1,(sierpinski (size /. 2.) (n-1)));Repeat(1,[(Move size);(Turn 120.)])])]\n\nlet rec kochline size n = \n  if n = 0 then [Line size] else\n    let k = Repeat (1,(kochline (size /. 3.) (n-1))) in\n    [k;(Turn (-60.));\n     k;(Turn (120.)); k; (Turn (-60.)); k]\n\nlet koch size n = [Repeat (3, [Repeat (1,kochline size n); (Turn 120.)])]\n\nlet rec rev_opp l = let rec aux res = function\n    | [] -> res\n    | x::xs -> match x with \n      | Turn a -> aux ((Turn (-.a))::res) xs\n      | Repeat (r,c) -> aux((Repeat (r, (rev_opp c)))::res) xs\n      | _ -> aux (x::res) xs \n  in aux [] l\n\nlet rec dragon size n = \n  if n = 0 then [Line size] else\n    let size2 = size /. sqrt 2. in\n    [Repeat (1, (dragon size2 (n-1))); (Turn 90.);\n     Repeat (1,(rev_opp (dragon size2 (n-1))))]\n\nlet interleave x f l = \n  let rec aux res x f = function\n    | [] -> List.rev (x::res)\n    | hd::tl -> aux (hd::x::res) (f x) f tl in\n  aux [] x f l\n\nlet rec dragon_angles n = \n  if n = 0 then [] else\n    interleave  90. (fun x -> (-.x)) (dragon_angles (n-1))\n\nlet dragon2 size n = \n  let size2 =  size /. (Float.pow (sqrt 2.) (float_of_int n)) in\n  interleave (Line size2) (fun x -> x) (List.map (fun x -> (Turn x)) (dragon_angles n))\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "sierpinski",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "sierpinski",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sierpinski 1. 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (3, [Line 1.; Turn 120.])]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sierpinski 1. 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (3,\n  [Repeat (1, [Repeat (3, [Line 0.5; Turn 120.])]);\n   Repeat (1, [Move 1.; Turn 120.])])]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sierpinski 0.5 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (3,\n  [Repeat (1,\n    [Repeat (3,\n      [Repeat (1, [Repeat (3, [Line 0.125; Turn 120.])]);\n       Repeat (1, [Move 0.25; Turn 120.])])]);\n   Repeat (1, [Move 0.5; Turn 120.])])]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sierpinski 1. 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (3,\n  [Repeat (1,\n    [Repeat (3,\n      [Repeat (1,\n        [Repeat (3,\n          [Repeat (1,\n            [Repeat (3,\n              [Repeat (1, [Repeat (3, [Line 0.0625; Turn 120.])]);\n               Repeat (1, [Move 0.125; Turn 120.])])]);\n           Repeat (1, [Move 0.25; Turn 120.])])]);\n       Repeat (1, [Move 0.5; Turn 120.])])]);\n   Repeat (1, [Move 1.; Turn 120.])])]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "kochline",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "kochline",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "kochline 1. 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Line 1.]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "kochline 1. 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (1, [Line 0.333333333333333315]); Turn (-60.);\n Repeat (1, [Line 0.333333333333333315]); Turn 120.;\n Repeat (1, [Line 0.333333333333333315]); Turn (-60.);\n Repeat (1, [Line 0.333333333333333315])]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "kochline 0.5 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (1,\n  [Repeat (1, [Line 0.0555555555555555525]); Turn (-60.);\n   Repeat (1, [Line 0.0555555555555555525]); Turn 120.;\n   Repeat (1, [Line 0.0555555555555555525]); Turn (-60.);\n   Repeat (1, [Line 0.0555555555555555525])]);\n Turn (-60.);\n Repeat (1,\n  [Repeat (1, [Line 0.0555555555555555525]); Turn (-60.);\n   Repeat (1, [Line 0.0555555555555555525]); Turn 120.;\n   Repeat (1, [Line 0.0555555555555555525]); Turn (-60.);\n   Repeat (1, [Line 0.0555555555555555525])]);\n Turn 120.;\n Repeat (1,\n  [Repeat (1, [Line 0.0555555555555555525]); Turn (-60.);\n   Repeat (1, [Line 0.0555555555555555525]); Turn 120.;\n   Repeat (1, [Line 0.0555555555555555525]); Turn (-60.);\n   Repeat (1, [Line 0.0555555555555555525])]);\n Turn (-60.);\n Repeat (1,\n  [Repeat (1, [Line 0.0555555555555555525]); Turn (-60.);\n   Repeat (1, [Line 0.0555555555555555525]); Turn 120.;\n   Repeat (1, [Line 0.0555555555555555525]); Turn (-60.);\n   Repeat (1, [Line 0.0555555555555555525])])]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "kochline 1. 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (1,\n  [Repeat (1,\n    [Repeat (1,\n      [Repeat (1, [Line 0.0123456790123456783]); Turn (-60.);\n       Repeat (1, [Line 0.0123456790123456783]); Turn 120.;\n       Repeat (1, [Line 0.0123456790123456783]); Turn (-60.);\n       Repeat (1, [Line 0.0123456790123456783])]);\n     Turn (-60.);\n     Repeat (1,\n      [Repeat (1, [Line 0.0123456790123456783]); Turn (-60.);\n       Repeat (1, [Line 0.0123456790123456783]); Turn 120.;\n       Repeat (1, [Line 0.0123456790123456783]); Turn (-60.);\n       Repeat (1, [Line 0.0123456790123456783])]);\n     Turn 120.;\n     Repeat (1,\n      [Repeat (1, [Line 0.0123456790123456783]); Turn (-60.);\n       Repeat (1, [Line 0.0123456790123456783]); Turn 120.;\n       Repeat (1, [Line 0.0123456790123456783]); Turn (-60.);\n       Repeat (1, [Line 0.0123456790123456783])]);\n     Turn (-60.);\n     Repeat (1,\n      [Repeat (1, [Line 0.0123456790123456783]); Turn (-60.);\n       Repeat (1, [Line 0.0123456790123456783]); Turn 120.;\n       Repeat (1, [Line 0.0123456790123456783]); Turn (-60.);\n       Repeat (1, [Line 0.0123456790123456783])])]);\n   Turn (-60.);\n   Repeat (1,\n    [Repeat (1,\n      [Repeat (1, [Line 0.0123456790123456783]); Turn (-60.);\n       Repeat (1, [Line 0.0123456790123456783]); Turn 120.;\n       Repeat (1, [Line 0.0123456790123456783]); Turn (-60.);\n       Repeat (1, [Line 0.0123456790123456783])]);\n     Turn (-60.);\n     Repeat (1,\n      [Repeat (1, [Line 0.0123456790123456783]); Turn (-60.);\n       Repeat (1, [Line 0.0123456790123456783]); Turn 120.;\n       Repeat (1, [Line 0.0123456790123456783]); Turn (-60.);\n       Repeat (1, [Line 0.0123456790123456783])]);\n     Turn 120.;\n     Repeat (1,\n      [Repeat (1, [Line 0.0123456790123456783]); Turn (-60.);\n       Repeat (1, [Line 0.0123456790123456783]); Turn 120.;\n       Repeat (1, [Line 0.0123456790123456783]); Turn (-60.);\n       Repeat (1, [Line 0.0123456790123456783])]);\n     Turn (-60.);\n     Repeat (1,\n      [Repeat (1, [Line 0.0123456790123456783]); Turn (-60.);\n       Repeat (1, [Line 0.0123456790123456783]); Turn 120.;\n       Repeat (1, [Line 0.0123456790123456783]); Turn (-60.);\n       Repeat (1, [Line 0.0123456790123456783])])]);\n   ...]);\n ...]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 : "
            },
            {
              "text": "koch",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "koch",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "koch 1. 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (3, [Repeat (1, [Line 1.]); Turn 120.])]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "koch 1. 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (3,\n  [Repeat (1,\n    [Repeat (1, [Line 0.333333333333333315]); Turn (-60.);\n     Repeat (1, [Line 0.333333333333333315]); Turn 120.;\n     Repeat (1, [Line 0.333333333333333315]); Turn (-60.);\n     Repeat (1, [Line 0.333333333333333315])]);\n   Turn 120.])]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "koch 0.5 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (3,\n  [Repeat (1,\n    [Repeat (1,\n      [Repeat (1,\n        [Repeat (1, [Line 0.0185185185185185175]); Turn (-60.);\n         Repeat (1, [Line 0.0185185185185185175]); Turn 120.;\n         Repeat (1, [Line 0.0185185185185185175]); Turn (-60.);\n         Repeat (1, [Line 0.0185185185185185175])]);\n       Turn (-60.);\n       Repeat (1,\n        [Repeat (1, [Line 0.0185185185185185175]); Turn (-60.);\n         Repeat (1, [Line 0.0185185185185185175]); Turn 120.;\n         Repeat (1, [Line 0.0185185185185185175]); Turn (-60.);\n         Repeat (1, [Line 0.0185185185185185175])]);\n       Turn 120.;\n       Repeat (1,\n        [Repeat (1, [Line 0.0185185185185185175]); Turn (-60.);\n         Repeat (1, [Line 0.0185185185185185175]); Turn 120.;\n         Repeat (1, [Line 0.0185185185185185175]); Turn (-60.);\n         Repeat (1, [Line 0.0185185185185185175])]);\n       Turn (-60.);\n       Repeat (1,\n        [Repeat (1, [Line 0.0185185185185185175]); Turn (-60.);\n         Repeat (1, [Line 0.0185185185185185175]); Turn 120.;\n         Repeat (1, [Line 0.0185185185185185175]); Turn (-60.);\n         Repeat (1, [Line 0.0185185185185185175])])]);\n     Turn (-60.);\n     Repeat (1,\n      [Repeat (1,\n        [Repeat (1, [Line 0.0185185185185185175]); Turn (-60.);\n         Repeat (1, [Line 0.0185185185185185175]); Turn 120.;\n         Repeat (1, [Line 0.0185185185185185175]); Turn (-60.);\n         Repeat (1, [Line 0.0185185185185185175])]);\n       Turn (-60.);\n       Repeat (1,\n        [Repeat (1, [Line 0.0185185185185185175]); Turn (-60.);\n         Repeat (1, [Line 0.0185185185185185175]); Turn 120.;\n         Repeat (1, [Line 0.0185185185185185175]); Turn (-60.);\n         Repeat (1, [Line 0.0185185185185185175])]);\n       Turn 120.;\n       Repeat (1,\n        [Repeat (1, [Line 0.0185185185185185175]); Turn (-60.);\n         Repeat (1, [Line 0.0185185185185185175]); Turn 120.;\n         Repeat (1, [Line 0.0185185185185185175]); Turn (-60.);\n         Repeat (1, [Line 0.0185185185185185175])]);\n       Turn (-60.);\n       Repeat (1,\n        [Repeat (1, [Line 0.0185185185185185175]); Turn (-60.);\n         Repeat (1, [Line 0.0185185185185185175]); Turn 120.;\n         Repeat (1, [Line 0.0185185185185185175]); Turn (-60.);\n         Repeat (1, ...); ...]);\n       ...]);\n     ...]);\n   ...]);\n ...]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 4 : "
            },
            {
              "text": "rev_opp",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "rev_opp",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev_opp [Line 1.]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Line 1.]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev_opp [Move 1.]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Move 1.]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev_opp [Turn 90.]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Turn (-90.)]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev_opp [Repeat (5, [Line 1.; Turn 90.])]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (5, [Turn (-90.); Line 1.])]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev_opp [Repeat (5, [Line 1.; Repeat (3, [Line 1.; Turn 120.]); Turn 90.])]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (5, [Turn (-90.); Repeat (3, [Turn (-120.); Line 1.]); Line 1.])]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 5 : "
            },
            {
              "text": "dragon",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "dragon",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "dragon 1. 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Line 1.]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "dragon 1. 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (1, [Line 0.707106781186547462]); Turn 90.;\n Repeat (1, [Line 0.707106781186547462])]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "dragon 0.5 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (1,\n  [Repeat (1, [Line 0.249999999999999972]); Turn 90.;\n   Repeat (1, [Line 0.249999999999999972])]);\n Turn 90.;\n Repeat (1,\n  [Repeat (1, [Line 0.249999999999999972]); Turn (-90.);\n   Repeat (1, [Line 0.249999999999999972])])]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "dragon 1. 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Repeat (1,\n  [Repeat (1,\n    [Repeat (1,\n      [Repeat (1, [Line 0.249999999999999917]); Turn 90.;\n       Repeat (1, [Line 0.249999999999999917])]);\n     Turn 90.;\n     Repeat (1,\n      [Repeat (1, [Line 0.249999999999999917]); Turn (-90.);\n       Repeat (1, [Line 0.249999999999999917])])]);\n   Turn 90.;\n   Repeat (1,\n    [Repeat (1,\n      [Repeat (1, [Line 0.249999999999999917]); Turn 90.;\n       Repeat (1, [Line 0.249999999999999917])]);\n     Turn (-90.);\n     Repeat (1,\n      [Repeat (1, [Line 0.249999999999999917]); Turn (-90.);\n       Repeat (1, [Line 0.249999999999999917])])])]);\n Turn 90.;\n Repeat (1,\n  [Repeat (1,\n    [Repeat (1,\n      [Repeat (1, [Line 0.249999999999999917]); Turn 90.;\n       Repeat (1, [Line 0.249999999999999917])]);\n     Turn 90.;\n     Repeat (1,\n      [Repeat (1, [Line 0.249999999999999917]); Turn (-90.);\n       Repeat (1, [Line 0.249999999999999917])])]);\n   Turn (-90.);\n   Repeat (1,\n    [Repeat (1,\n      [Repeat (1, [Line 0.249999999999999917]); Turn 90.;\n       Repeat (1, [Line 0.249999999999999917])]);\n     Turn (-90.);\n     Repeat (1,\n      [Repeat (1, [Line 0.249999999999999917]); Turn (-90.);\n       Repeat (1, [Line 0.249999999999999917])])])])]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 6 : "
            },
            {
              "text": "interleave",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "interleave",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "interleave",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interleave 0 <fun> []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interleave 0 <fun> [3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; 3; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interleave 0 <fun> [3; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; 3; 1; 2; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interleave 5 <fun> [3; 2; 7]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[5; 3; 6; 2; 7; 7; 8]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "interleave 4 <fun> [3; 2; 7; 5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4; 3; -4; 2; 4; 7; -4; 5; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 7 : "
            },
            {
              "text": "dragon_angles",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "dragon_angles",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "dragon_angles 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "dragon_angles 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[90.]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "dragon_angles 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[90.; 90.; -90.]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "dragon_angles 5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[90.; 90.; -90.; 90.; 90.; -90.; -90.; 90.; 90.; 90.; -90.; -90.; 90.; -90.;\n -90.; 90.; 90.; 90.; -90.; 90.; 90.; -90.; -90.; -90.; 90.; 90.; -90.; -90.;\n 90.; -90.; -90.]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 8 : "
            },
            {
              "text": "dragon2",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "dragon2",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "dragon2 1. 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Line 1.]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "dragon2 1. 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Line 0.707106781186547462; Turn 90.; Line 0.707106781186547462]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "dragon2 0.5 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Line 0.249999999999999944; Turn 90.; Line 0.249999999999999944; Turn 90.;\n Line 0.249999999999999944; Turn (-90.); Line 0.249999999999999944]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "dragon2 1. 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[Line 0.249999999999999944; Turn 90.; Line 0.249999999999999944; Turn 90.;\n Line 0.249999999999999944; Turn (-90.); Line 0.249999999999999944; Turn 90.;\n Line 0.249999999999999944; Turn 90.; Line 0.249999999999999944; Turn (-90.);\n Line 0.249999999999999944; Turn (-90.); Line 0.249999999999999944; Turn 90.;\n Line 0.249999999999999944; Turn 90.; Line 0.249999999999999944; Turn 90.;\n Line 0.249999999999999944; Turn (-90.); Line 0.249999999999999944;\n Turn (-90.); Line 0.249999999999999944; Turn 90.; Line 0.249999999999999944;\n Turn (-90.); Line 0.249999999999999944; Turn (-90.);\n Line 0.249999999999999944]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1636050573.843286
    },
    "8.1_morpion_debut": {
      "grade": 100,
      "solution": "let plateau_initial (taille : int) : plateau =\n  Matrix.init taille (fun (i,j)->None) \n;;\n\n\nlet coup_legal (plateau : plateau) (coup : coup) : bool =\n  let position= coup.position in \n  if (Matrix.get plateau position= None) then true\n  else false  \n;;\n\nlet prepare_coup\n    (plateau : plateau)\n    (dernier_coup : coup option)\n    (nb_joueurs : int)\n    (x , y : int*int)\n  : coup option =\n  \n  let taille=Matrix.size plateau in \n  if x>=taille ||x<0 || y<0 || y>=taille then None\n  else match dernier_coup with \n    |None->Some({joueur=0;position=(x,y)})\n    |Some dernier-> let joueur= dernier.joueur in \n        if joueur< (nb_joueurs - 1) then Some({joueur=joueur+1;position=(x,y)})\n        else Some ({joueur=0;position=(x,y)})\n;;\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "plateau_initial",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "plateau_initial",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "plateau_initial 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[||]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "plateau_initial 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[|[|None|]|]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "plateau_initial 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[|[|None; None|]; [|None; None|]|]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "plateau_initial 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "plateau_initial 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[|[|None; None; None; None|]; [|None; None; None; None|];\n  [|None; None; None; None|]; [|None; None; None; None|]|]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "coup_legal",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "coup_legal",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  [|[|None; Some 1; None; Some 1|]; [|Some 0; None; None; None|];\n    [|None; None; None; Some 0|]; [|None; Some 1; None; None|]|]\n  {joueur = 0; position = (2, 3)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  [|[|None; Some 0; None; None|]; [|Some 1; None; None; Some 0|];\n    [|None; Some 0; Some 0; None|]; [|None; Some 1; None; None|]|]\n  {joueur = 1; position = (3, 3)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  [|[|None; Some 1; None; None|]; [|None; Some 0; None; Some 1|];\n    [|None; None; None; Some 1|]; [|None; Some 0; None; Some 1|]|]\n  {joueur = 1; position = (1, 0)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  [|[|None; None; None; Some 1|]; [|None; None; None; None|];\n    [|None; None; None; None|]; [|None; Some 0; Some 0; None|]|]\n  {joueur = 0; position = (2, 3)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  [|[|None; Some 0; Some 0; Some 1|]; [|None; None; None; Some 0|];\n    [|None; None; None; Some 1|]; [|Some 1; None; None; None|]|]\n  {joueur = 1; position = (2, 2)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 :"
            },
            {
              "text": "prepare_coup",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "prepare_coup",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "prepare_coup\n  [|[|None; None; None; Some 0|]; [|None; None; None; None|];\n    [|Some 0; Some 1; None; None|]; [|Some 0; Some 1; None; None|]|]\n  None\n  2\n  (3, 2)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some {joueur = 0; position = (3, 2)})",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "prepare_coup\n  [|[|Some 0; Some 0; None; Some 0|]; [|Some 1; None; None; None|];\n    [|None; None; None; None|]; [|None; None; None; Some 0|]|]\n  (Some {joueur = 0; position = (3, 2)})\n  2\n  (-1, 2)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "prepare_coup\n  [|[|None; None; None; None|]; [|Some 0; None; Some 0; None|];\n    [|None; None; None; Some 0|]; [|Some 0; None; Some 1; None|]|]\n  (Some {joueur = 0; position = (2, 1)})\n  2\n  (-1, 2)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "prepare_coup\n  [|[|None; None; None; None|]; [|Some 1; None; Some 1; None|];\n    [|None; Some 0; None; None|]; [|Some 0; Some 1; None; None|]|]\n  (Some {joueur = 0; position = (0, 3)})\n  2\n  (4, 3)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "prepare_coup\n  [|[|None; None; Some 0; None|]; [|None; None; Some 0; Some 1|];\n    [|None; Some 0; Some 0; None|]; [|Some 0; None; None; None|]|]\n  (Some {joueur = 0; position = (0, 2)})\n  2\n  (3, 2)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some {joueur = 1; position = (3, 2)})",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "prepare_coup\n  [|[|None; Some 0; Some 1; Some 0|]; [|None; None; None; None|];\n    [|None; None; None; None|]; [|Some 0; None; None; None|]|]\n  (Some {joueur = 1; position = (0, 3)})\n  2\n  (3, 2)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some {joueur = 0; position = (3, 2)})",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1636965089.241583
    },
    "8.2_morpion_victoire": {
      "grade": 100,
      "solution": "let ligne (m : 'a Matrix.t) (i : int) : 'a list =\n  List.init (Matrix.size m)(fun y-> Matrix.get m(i,y))\n;;\n\nlet colonne (m : 'a Matrix.t) (j : int) : 'a list =\n  List.init (Matrix.size m)(fun x-> Matrix.get m(x,j))\n;;\n\nlet diagonale (m : 'a Matrix.t) (k : int) : 'a list =\n  if k=0 then List.init  (Matrix.size m)(fun x-> Matrix.get m(x,x))\n  else let taille = Matrix.size m in \n    List.init taille (fun x-> Matrix.get m(x,taille-x-1))\n;;\n\nlet gagnant_liste (l : 'a option list) : 'a option =\n  let rec aux l = \n    match l with \n    |[]->None\n    |None::r->None\n    |Some x::r ->match r with \n      |[]->Some x\n      |Some y::_-> if (x=y) then aux r\n          else None \n      |_->None in aux l\n    \n;;\n\nlet premier_succes (n : int)(f : int -> 'a option) : 'a option =\n  let rec aux n cpt f= \n    if cpt=n then None \n    else match f cpt with \n      |None-> aux n (cpt+1) f\n      |Some x->Some x\n  in aux n 0 f\n;;\n\nlet gagnant_lignes (m : 'a option Matrix.t) : 'a option =\n \n  premier_succes (Matrix.size m) (fun x-> gagnant_liste (ligne m x))\n  \n;;\n\nlet gagnant_colonnes (m : 'a option Matrix.t) : 'a option =\n  premier_succes (Matrix.size m) (fun x-> gagnant_liste (colonne m x))\n;;\n\nlet gagnant_diagonales (m : 'a option Matrix.t) : 'a option =\n  premier_succes (2) (fun x-> gagnant_liste (diagonale m x))\n;;\n\nlet gagnant (m : 'a option Matrix.t) : 'a option =\n  match gagnant_lignes m with \n  |Some x-> Some x\n  |None -> match gagnant_colonnes m with \n    |Some x->Some x\n    |None -> match gagnant_diagonales m with\n      |Some x-> Some x\n      |None -> None\n;;\n\nlet rec rempli_liste liste= match liste with \n  |[]->true\n  |None::r->false\n  |_::r->rempli_liste r;;\n  \nlet rempli (n : int)(f : int -> bool) : bool =\n  let rec aux n cpt f= \n    if cpt=n then true\n    else match f cpt with \n      |false->false\n      |true-> aux n (cpt+1) f \n  in aux n 0 f\n;;\n\nlet termine (m : 'a option Matrix.t) : bool =\n  if gagnant m = None then let taille= Matrix.size m in \n    rempli taille (fun x-> rempli_liste (ligne m x)) || \n    rempli taille (fun x-> rempli_liste (colonne m x))||\n    rempli 2 (fun x-> rempli_liste (diagonale m x))\n  else true\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "ligne",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "ligne",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ligne\n  [|[|26; 89; 15; 54|]; [|7; 20; 52; 11|]; [|13; 59; 18; 72|];\n    [|60; 60; 97; 78|]|]\n  0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[26; 89; 15; 54]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ligne [|[|62|]|] 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[62]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ligne [|[|44|]|] 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[44]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ligne [|[|55; 68; 80|]; [|35; 2; 55|]; [|51; 11; 21|]|] 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[35; 2; 55]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ligne [|[|60; 8|]; [|65; 40|]|] 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[65; 40]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "colonne",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "colonne",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "colonne\n  [|[|73; 50; 12; 83|]; [|57; 60; 12; 42|]; [|57; 50; 75; 6|];\n    [|3; 4; 35; 45|]|]\n  3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[83; 42; 6; 45]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "colonne [|[|9|]|] 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[9]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "colonne\n  [|[|3; 90; 79; 21|]; [|8; 58; 6; 39|]; [|34; 36; 77; 2|];\n    [|38; 14; 7; 43|]|]\n  2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[79; 6; 77; 7]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "colonne [|[|95; 80; 12|]; [|17; 65; 45|]; [|38; 70; 23|]|] 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[12; 45; 23]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "colonne [|[|72; 44|]; [|13; 19|]|] 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[72; 13]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "diagonale",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "diagonale",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "diagonale [|[|59; 23; 82|]; [|86; 93; 54|]; [|13; 43; 78|]|] 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[59; 93; 78]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "diagonale [|[|40|]|] 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[40]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "diagonale [|[|38|]|] 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[38]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "diagonale [|[|77; 76; 45|]; [|97; 77; 63|]; [|99; 29; 14|]|] 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[45; 77; 99]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "diagonale\n  [|[|53; 0; 63; 25|]; [|47; 99; 56; 13|]; [|71; 81; 35; 74|];\n    [|67; 17; 86; 52|]|]\n  0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[53; 99; 35; 52]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2: "
            },
            {
              "text": "gagnant_liste",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "gagnant_liste",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "gagnant_liste",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_liste []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_liste [Some 1; None; Some 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_liste [Some 2; Some 2; Some 2; Some 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 2)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_liste [None; None]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_liste [Some (-1); Some (-1); Some (-1); Some (-2)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3: "
            },
            {
              "text": "premier_succes",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "premier_succes",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "premier_succes",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "premier_succes 0 <fun>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "premier_succes 5 <fun>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "premier_succes 5 <fun>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 0)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "premier_succes 7 <fun>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 4: "
            },
            {
              "text": "gagnant_lignes",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "gagnant_lignes",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes\n  [|[|Some 0; Some 1; Some 0|]; [|Some 0; Some 1; Some 0|];\n    [|Some 1; Some 0; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes\n  [|[|Some 1; None; Some 1|]; [|None; Some 1; None|];\n    [|None; None; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes\n  [|[|Some 1; Some 0; None|]; [|None; None; None|];\n    [|Some 1; Some 1; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes\n  [|[|Some 1; Some 1; Some 1|]; [|Some 0; Some 0; Some 0|];\n    [|Some 0; None; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes\n  [|[|None; Some 1; None|]; [|None; None; None|];\n    [|Some 1; Some 1; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes\n  [|[|Some 1; None; Some 1|]; [|None; Some 0; None|];\n    [|Some 0; Some 1; Some 0|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes\n  [|[|Some 0; Some 1; Some 1|]; [|None; Some 1; Some 0|];\n    [|Some 1; Some 0; Some 0|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes\n  [|[|Some 1; None; Some 1|]; [|None; Some 1; Some 1|];\n    [|None; Some 1; Some 0|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes\n  [|[|None; Some 1; Some 0|]; [|Some 1; Some 1; Some 1|];\n    [|Some 1; Some 1; None|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes\n  [|[|None; Some 0; None|]; [|Some 1; Some 1; Some 0|];\n    [|Some 1; None; Some 0|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes\n  [|[|Some 0; None; Some 1|]; [|None; None; Some 1|];\n    [|Some 1; Some 0; None|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 5: "
            },
            {
              "text": "gagnant_colonnes",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "gagnant_colonnes",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes\n  [|[|Some 0; Some 1; Some 0|]; [|Some 0; Some 1; Some 0|];\n    [|Some 1; Some 0; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes\n  [|[|Some 1; Some 1; Some 1|]; [|Some 1; Some 0; Some 1|];\n    [|Some 1; None; Some 0|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes\n  [|[|None; None; Some 0|]; [|None; None; None|];\n    [|Some 1; Some 1; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes\n  [|[|Some 1; Some 1; None|]; [|None; None; Some 1|];\n    [|None; Some 1; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes\n  [|[|Some 0; Some 1; Some 1|]; [|Some 0; Some 1; Some 0|];\n    [|Some 1; None; None|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes\n  [|[|Some 0; None; None|]; [|None; None; Some 1|];\n    [|Some 0; Some 1; Some 0|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes\n  [|[|Some 1; None; None|]; [|None; Some 1; Some 0|];\n    [|None; Some 1; None|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes\n  [|[|Some 1; None; Some 1|]; [|Some 1; Some 0; Some 1|];\n    [|Some 0; Some 1; Some 0|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes\n  [|[|Some 1; Some 0; Some 0|]; [|None; None; None|];\n    [|Some 1; Some 0; Some 0|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes\n  [|[|Some 1; Some 1; None|]; [|Some 1; None; Some 0|];\n    [|None; None; Some 0|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes\n  [|[|Some 1; Some 0; Some 1|]; [|Some 1; Some 0; None|];\n    [|Some 0; Some 1; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 6: "
            },
            {
              "text": "gagnant_diagonales",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "gagnant_diagonales",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales\n  [|[|Some 0; Some 1; Some 0|]; [|Some 0; Some 1; Some 0|];\n    [|Some 1; Some 0; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales\n  [|[|Some 1; Some 0; Some 1|]; [|Some 1; None; None|];\n    [|None; None; None|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales\n  [|[|Some 1; Some 0; Some 0|]; [|Some 1; Some 1; Some 1|];\n    [|None; Some 1; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales\n  [|[|Some 1; Some 1; None|]; [|Some 1; Some 1; Some 1|];\n    [|Some 0; Some 1; Some 0|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales\n  [|[|Some 1; Some 1; Some 1|]; [|Some 0; Some 1; None|];\n    [|None; Some 1; None|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales\n  [|[|None; Some 0; Some 1|]; [|Some 1; Some 1; Some 1|];\n    [|Some 0; Some 1; Some 0|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales\n  [|[|Some 0; None; Some 1|]; [|None; None; Some 1|];\n    [|Some 0; None; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales\n  [|[|Some 0; Some 1; None|]; [|Some 1; Some 0; None|];\n    [|Some 1; Some 1; None|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales\n  [|[|Some 0; Some 1; Some 0|]; [|Some 1; None; Some 1|];\n    [|Some 1; Some 1; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales\n  [|[|Some 0; None; None|]; [|None; Some 1; None|];\n    [|Some 0; Some 1; None|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales\n  [|[|Some 0; None; Some 0|]; [|Some 0; Some 1; Some 1|];\n    [|Some 0; Some 1; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 7: "
            },
            {
              "text": "gagnant",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "gagnant",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant\n  [|[|Some 0; Some 1; Some 0|]; [|Some 0; Some 1; Some 0|];\n    [|Some 1; Some 0; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant\n  [|[|Some 1; None; Some 0|]; [|Some 0; Some 1; Some 0|];\n    [|None; None; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant\n  [|[|None; Some 1; None|]; [|Some 1; Some 1; None|];\n    [|Some 0; None; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant\n  [|[|Some 1; None; Some 1|]; [|Some 1; Some 0; Some 1|];\n    [|Some 0; None; Some 0|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant\n  [|[|Some 0; Some 0; Some 1|]; [|None; None; Some 1|];\n    [|Some 0; Some 1; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant\n  [|[|Some 1; Some 1; Some 1|]; [|Some 1; None; Some 0|];\n    [|Some 1; None; Some 0|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant\n  [|[|Some 0; Some 0; None|]; [|None; None; None|];\n    [|Some 1; Some 0; None|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant\n  [|[|Some 1; None; Some 1|]; [|Some 1; None; Some 1|];\n    [|Some 1; Some 0; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant\n  [|[|None; Some 1; None|]; [|None; Some 1; Some 0|];\n    [|Some 1; Some 0; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant\n  [|[|Some 1; None; Some 1|]; [|Some 0; Some 1; None|];\n    [|Some 1; None; Some 0|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant\n  [|[|Some 0; Some 0; Some 1|]; [|None; None; Some 0|];\n    [|Some 1; Some 0; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 8: "
            },
            {
              "text": "termine",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "termine",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine\n  [|[|Some 0; Some 1; Some 0|]; [|Some 0; Some 1; Some 0|];\n    [|Some 1; Some 0; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine\n  [|[|Some 1; Some 0; Some 0|]; [|Some 1; Some 1; Some 0|];\n    [|Some 0; Some 1; None|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine\n  [|[|None; Some 0; Some 1|]; [|Some 1; Some 1; Some 1|];\n    [|Some 1; None; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine\n  [|[|Some 0; None; Some 1|]; [|None; Some 1; Some 0|];\n    [|None; Some 1; None|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine\n  [|[|None; Some 0; Some 1|]; [|Some 1; Some 1; Some 1|];\n    [|Some 1; Some 1; Some 0|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine\n  [|[|Some 1; None; None|]; [|Some 1; Some 1; Some 1|];\n    [|Some 1; Some 0; Some 0|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine\n  [|[|Some 0; None; Some 1|]; [|Some 1; Some 1; None|];\n    [|Some 1; Some 1; None|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine\n  [|[|None; Some 1; Some 1|]; [|Some 0; Some 1; Some 1|];\n    [|None; Some 0; None|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine\n  [|[|Some 1; None; Some 1|]; [|None; Some 0; None|]; [|None; None; None|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine\n  [|[|None; Some 1; Some 1|]; [|Some 0; None; Some 1|];\n    [|Some 1; Some 1; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine\n  [|[|Some 0; Some 0; Some 1|]; [|None; None; Some 1|];\n    [|Some 0; Some 1; Some 0|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine\n  [|[|Some 0; None; Some 1|]; [|Some 1; None; Some 1|];\n    [|Some 1; None; Some 1|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1636984533.05173
    },
    "8.3_metamorpion_debut": {
      "grade": 100,
      "solution": "let plateau_initial (taille : int) : plateau =\n  Matrix.init taille (fun (i,j)-> (Matrix.init taille (fun (i,j)->None)))\n;;\n\nlet sous_morpion_valide\n    (plateau : plateau)\n    (dernier_coup : coup option)\n    ((i,j) : int * int)\n  : bool = \n  match dernier_coup with\n  | None -> if termine_dim_1 (Matrix.get plateau (i,j)) then false else true\n  | Some c ->\n      let dim1 = c.position_dim_1 in \n      if termine_dim_1 (Matrix.get plateau dim1) then \n        if (i,j)=dim1 then false \n        else not (termine_dim_1 (Matrix.get plateau (i,j)))\n      else if (i,j)=dim1 then true\n      else false\n;;\n\nlet coup_legal\n    (plateau : plateau)\n    (dernier_coup : coup option)\n    (coup : coup)\n  : bool =\n  if sous_morpion_valide plateau dernier_coup coup.position_dim_2 then\n    let t = Matrix.get (Matrix.get plateau coup.position_dim_2) coup.position_dim_1 in\n    match t with\n    | None -> true\n    | _ -> false\n  else false\n\n;;\n\nlet prepare_coup\n    (plateau : plateau)\n    (dernier_coup : coup option)\n    (nb_joueurs : int)\n    ((x,y) : int * int)\n  : coup option =\n  let taille= Matrix.size plateau in\n  if x<0 ||y<0 || x>=taille*taille|| y>=taille*taille then None \n  else match dernier_coup with \n    |None-> Some({joueur=0; position_dim_2 =(x/taille,y/taille); position_dim_1=(x mod taille,y mod taille)})\n    |Some c->let joueur= c.joueur in \n        if joueur<(nb_joueurs - 1) then \n          Some({joueur=joueur+1;position_dim_2 =(x/taille,y/taille); position_dim_1=(x mod taille,y mod taille)})\n        else Some ({joueur=0;position_dim_2 =(x/taille,y/taille); position_dim_1=(x mod taille ,y mod taille)})\n;;\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "plateau_initial",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "plateau_initial",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "plateau_initial 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[||]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "plateau_initial 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[|[|[|[|None; None|]; [|None; None|]|]; [|[|None; None|]; [|None; None|]|]|];\n  [|[|[|None; None|]; [|None; None|]|]; [|[|None; None|]; [|None; None|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "plateau_initial 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[|[|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n    [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n    [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n  [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n    [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n    [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n  [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n    [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n    [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "sous_morpion_valide",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "sous_morpion_valide",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sous_morpion_valide\n  [|[|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|]|]\n  None\n  (0, 0)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sous_morpion_valide\n  [|[|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|]|]\n  (Some {joueur = 0; position_dim_2 = (0, 0); position_dim_1 = (1, 2)})\n  (1, 2)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sous_morpion_valide\n  [|[|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|]|]\n  (Some {joueur = 0; position_dim_2 = (0, 0); position_dim_1 = (1, 2)})\n  (1, 2)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sous_morpion_valide\n  [|[|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|]|]\n  (Some {joueur = 0; position_dim_2 = (0, 0); position_dim_1 = (1, 2)})\n  (1, 2)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sous_morpion_valide\n  [|[|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|]|]\n  (Some {joueur = 0; position_dim_2 = (0, 0); position_dim_1 = (1, 2)})\n  (1, 1)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sous_morpion_valide\n  [|[|[|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|]|]\n  (Some {joueur = 0; position_dim_2 = (0, 0); position_dim_1 = (1, 2)})\n  (1, 1)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 : "
            },
            {
              "text": "coup_legal",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "coup_legal",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  [|[|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|]|]\n  None\n  {joueur = 1; position_dim_2 = (0, 0); position_dim_1 = (0, 0)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  [|[|[|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|]|]\n  None\n  {joueur = 1; position_dim_2 = (0, 0); position_dim_1 = (0, 0)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  [|[|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|]|]\n  (Some {joueur = 0; position_dim_2 = (0, 0); position_dim_1 = (1, 2)})\n  {joueur = 1; position_dim_2 = (1, 2); position_dim_1 = (0, 0)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  [|[|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|]|]\n  (Some {joueur = 0; position_dim_2 = (0, 0); position_dim_1 = (1, 2)})\n  {joueur = 1; position_dim_2 = (1, 2); position_dim_1 = (0, 0)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  [|[|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|]|]\n  (Some {joueur = 0; position_dim_2 = (0, 0); position_dim_1 = (1, 2)})\n  {joueur = 1; position_dim_2 = (1, 1); position_dim_1 = (0, 0)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  [|[|[|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|]|]\n  (Some {joueur = 0; position_dim_2 = (0, 0); position_dim_1 = (1, 2)})\n  {joueur = 1; position_dim_2 = (1, 1); position_dim_1 = (0, 0)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  [|[|[|[|None; Some 0; None|]; [|None; None; None|];\n        [|Some 0; None; None|]|];\n      [|[|Some 0; None; None|]; [|None; None; None|];\n        [|None; Some 1; None|]|];\n      [|[|Some 1; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n    [|[|[|Some 0; Some 1; None|]; [|None; None; Some 1|];\n        [|Some 0; Some 0; None|]|];\n      [|[|None; None; None|]; [|Some 0; None; None|];\n        [|None; Some 1; Some 0|]|];\n      [|[|None; Some 1; Some 0|]; [|None; None; None|];\n        [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|Some 1; Some 1; None|];\n        [|None; Some 1; None|]|];\n      [|[|None; None; None|]; [|None; None; None|];\n        [|Some 0; Some 1; None|]|];\n      [|[|None; Some 0; None|]; [|Some 1; None; None|];\n        [|None; None; Some 1|]|]|]|]\n  (Some {joueur = 0; position_dim_2 = (1, 1); position_dim_1 = (2, 0)})\n  {joueur = 0; position_dim_2 = (1, 2); position_dim_1 = (0, 1)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  [|[|[|[|None; Some 1; None|]; [|Some 0; None; Some 0|];\n        [|None; Some 1; None|]|];\n      [|[|None; None; None|]; [|Some 0; None; None|]; [|None; None; None|]|];\n      [|[|Some 0; None; None|]; [|Some 0; None; None|];\n        [|None; None; None|]|]|];\n    [|[|[|Some 1; Some 0; None|]; [|None; None; None|];\n        [|None; None; None|]|];\n      [|[|None; Some 1; Some 0|]; [|None; None; None|];\n        [|Some 1; None; Some 0|]|];\n      [|[|None; None; Some 0|]; [|None; None; Some 1|];\n        [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|Some 0; None; Some 0|];\n        [|None; Some 0; None|]|];\n      [|[|Some 0; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; Some 1|];\n        [|Some 1; None; None|]|]|]|]\n  None\n  {joueur = 0; position_dim_2 = (0, 2); position_dim_1 = (1, 2)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  [|[|[|[|None; None; Some 0|]; [|None; None; None|];\n        [|None; None; Some 0|]|];\n      [|[|None; Some 0; None|]; [|None; None; None|];\n        [|Some 1; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; Some 0; None|]|]|];\n    [|[|[|None; None; None|]; [|None; Some 0; Some 0|];\n        [|None; None; None|]|];\n      [|[|None; None; None|]; [|Some 0; Some 1; None|];\n        [|None; Some 0; None|]|];\n      [|[|Some 0; None; None|]; [|None; None; None|];\n        [|Some 0; Some 0; Some 0|]|]|];\n    [|[|[|Some 0; Some 0; None|]; [|Some 0; None; Some 0|];\n        [|Some 0; Some 1; Some 0|]|];\n      [|[|Some 0; Some 0; None|]; [|None; None; None|];\n        [|None; Some 0; None|]|];\n      [|[|None; None; None|]; [|None; None; None|];\n        [|Some 0; Some 1; None|]|]|]|]\n  (Some {joueur = 1; position_dim_2 = (1, 0); position_dim_1 = (0, 2)})\n  {joueur = 0; position_dim_2 = (0, 1); position_dim_1 = (0, 2)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  [|[|[|[|None; None; Some 1|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; Some 0; None|]; [|None; Some 1; None|];\n        [|None; Some 0; None|]|];\n      [|[|Some 1; None; Some 0|]; [|Some 1; Some 1; None|];\n        [|None; Some 0; None|]|]|];\n    [|[|[|None; None; None|]; [|None; Some 1; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|Some 1; None; None|]|];\n      [|[|None; None; Some 0|]; [|None; None; Some 1|];\n        [|Some 1; None; None|]|]|];\n    [|[|[|None; Some 1; None|]; [|None; None; None|];\n        [|Some 0; None; None|]|];\n      [|[|None; Some 0; Some 0|]; [|None; Some 0; Some 0|];\n        [|Some 1; None; None|]|];\n      [|[|Some 1; None; Some 0|]; [|None; None; Some 0|];\n        [|None; Some 0; Some 1|]|]|]|]\n  (Some {joueur = 1; position_dim_2 = (0, 0); position_dim_1 = (1, 0)})\n  {joueur = 1; position_dim_2 = (2, 0); position_dim_1 = (0, 1)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 4 :"
            },
            {
              "text": "prepare_coup",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "prepare_coup",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "prepare_coup\n  [|[|[|[|None; None; Some 0|]; [|Some 1; None; None|];\n        [|Some 1; None; None|]|];\n      [|[|Some 0; None; Some 0|]; [|None; None; Some 1|];\n        [|None; None; None|]|];\n      [|[|Some 0; None; None|]; [|None; None; Some 0|];\n        [|Some 1; Some 0; None|]|]|];\n    [|[|[|None; Some 0; None|]; [|None; Some 1; Some 0|];\n        [|None; None; None|]|];\n      [|[|None; None; None|]; [|Some 0; Some 0; None|];\n        [|Some 1; Some 0; None|]|];\n      [|[|None; Some 0; None|]; [|None; None; None|];\n        [|None; None; Some 0|]|]|];\n    [|[|[|None; Some 0; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; Some 1; None|]; [|None; None; None|]|];\n      [|[|Some 1; Some 0; Some 0|]; [|Some 0; None; None|];\n        [|Some 0; None; None|]|]|]|]\n  None\n  2\n  (1, 1)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some {joueur = 0; position_dim_2 = (0, 0); position_dim_1 = (1, 1)})",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "prepare_coup\n  [|[|[|[|Some 1; None; Some 0|]; [|Some 1; Some 0; None|];\n        [|None; Some 0; Some 0|]|];\n      [|[|None; None; None|]; [|None; Some 1; None|];\n        [|None; Some 0; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; Some 0; None|]|]|];\n    [|[|[|None; Some 1; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; Some 1; None|]; [|Some 0; None; Some 1|];\n        [|Some 1; None; None|]|];\n      [|[|None; None; None|]; [|Some 0; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|Some 1; None; None|]; [|None; None; None|];\n        [|Some 1; Some 1; None|]|];\n      [|[|None; None; Some 0|]; [|None; Some 1; None|];\n        [|Some 0; Some 0; Some 1|]|];\n      [|[|None; None; Some 0|]; [|Some 1; None; None|];\n        [|None; Some 1; None|]|]|]|]\n  (Some {joueur = 1; position_dim_2 = (2, 1); position_dim_1 = (2, 0)})\n  2\n  (4, 3)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some {joueur = 0; position_dim_2 = (1, 1); position_dim_1 = (1, 0)})",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "prepare_coup\n  [|[|[|[|None; Some 0; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; Some 0; None|]; [|None; Some 1; None|];\n        [|None; Some 0; None|]|];\n      [|[|None; None; Some 1|]; [|None; Some 1; None|];\n        [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; Some 1; None|]; [|None; None; None|]|];\n      [|[|Some 0; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|Some 0; None; Some 0|];\n        [|Some 1; Some 0; Some 1|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|];\n        [|Some 0; None; Some 1|]|];\n      [|[|None; Some 0; None|]; [|Some 1; None; None|];\n        [|Some 1; None; Some 1|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; Some 1|]|]|]|]\n  (Some {joueur = 1; position_dim_2 = (2, 2); position_dim_1 = (0, 0)})\n  2\n  (2, 0)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some {joueur = 0; position_dim_2 = (0, 0); position_dim_1 = (2, 0)})",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "prepare_coup\n  [|[|[|[|None; None; None|]; [|None; None; None|]; [|Some 1; None; None|]|];\n      [|[|None; None; None|]; [|Some 0; None; None|];\n        [|None; Some 1; None|]|];\n      [|[|None; None; None|]; [|None; Some 1; None|];\n        [|None; Some 1; None|]|]|];\n    [|[|[|None; Some 0; Some 0|]; [|None; None; None|];\n        [|None; None; None|]|];\n      [|[|Some 0; Some 1; None|]; [|None; Some 1; None|];\n        [|Some 0; None; Some 1|]|];\n      [|[|Some 1; None; Some 1|]; [|None; None; Some 0|];\n        [|Some 0; None; Some 1|]|]|];\n    [|[|[|Some 0; Some 0; None|]; [|None; Some 1; None|];\n        [|Some 0; None; None|]|];\n      [|[|Some 1; Some 1; None|]; [|None; None; Some 0|];\n        [|None; None; None|]|];\n      [|[|Some 1; None; Some 0|]; [|Some 1; None; None|];\n        [|None; Some 1; None|]|]|]|]\n  (Some {joueur = 0; position_dim_2 = (2, 1); position_dim_1 = (2, 0)})\n  2\n  (-1, 1)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "prepare_coup\n  [|[|[|[|None; Some 0; Some 0|]; [|None; None; Some 0|];\n        [|Some 0; None; None|]|];\n      [|[|None; Some 1; None|]; [|None; Some 0; None|];\n        [|None; None; Some 0|]|];\n      [|[|None; None; None|]; [|Some 0; Some 1; None|];\n        [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; Some 1; None|];\n        [|Some 0; None; None|]|];\n      [|[|None; Some 1; Some 0|]; [|None; None; Some 1|];\n        [|Some 0; None; None|]|];\n      [|[|None; None; Some 1|]; [|None; Some 1; None|];\n        [|None; None; Some 0|]|]|];\n    [|[|[|Some 0; None; Some 0|]; [|Some 1; None; None|];\n        [|None; None; None|]|];\n      [|[|Some 0; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|Some 0; None; None|]|]|]|]\n  (Some {joueur = 0; position_dim_2 = (1, 1); position_dim_1 = (0, 1)})\n  2\n  (2, 2)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some {joueur = 1; position_dim_2 = (0, 0); position_dim_1 = (2, 2)})",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "prepare_coup\n  [|[|[|[|None; None; None|]; [|None; None; Some 1|];\n        [|None; Some 0; None|]|];\n      [|[|None; None; Some 1|]; [|None; None; Some 0|];\n        [|None; None; None|]|];\n      [|[|Some 0; None; None|]; [|None; None; None|];\n        [|None; None; Some 0|]|]|];\n    [|[|[|Some 1; None; None|]; [|None; None; None|];\n        [|None; Some 1; None|]|];\n      [|[|None; None; None|]; [|Some 0; Some 0; Some 1|];\n        [|None; None; None|]|];\n      [|[|None; Some 1; Some 0|]; [|None; None; None|];\n        [|Some 0; Some 0; Some 0|]|]|];\n    [|[|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|Some 0; None; None|]|];\n      [|[|Some 0; None; None|]; [|Some 0; Some 0; None|];\n        [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|];\n        [|Some 1; None; Some 1|]|]|]|]\n  (Some {joueur = 1; position_dim_2 = (2, 1); position_dim_1 = (1, 2)})\n  2\n  (2, 3)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some {joueur = 0; position_dim_2 = (0, 1); position_dim_1 = (2, 0)})",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1637501942.458159
    },
    "8.4_metamorpion_victoire": {
      "grade": 100,
      "solution": "\nlet matrix_map (f: 'a -> 'b) (m: 'a Matrix.t): 'b Matrix.t =\n  Matrix.init (Matrix.size m) (fun (i,j)->f(Matrix.get m (i,j)))\n;;\n\n\nlet gagnant_dim_2 (plateau : plateau): int option =\n  gagnant_dim_1 (matrix_map (gagnant_dim_1) plateau)\n;;\n    \n\nlet termine_dim_2 (plateau : plateau) : bool =\n  if gagnant_dim_2 plateau = None then \n    termine_dim_1  (matrix_map (fun x->\n        if(termine_dim_1 x = true )then Some x\n        else None) \n        plateau )\n  else true\n;;\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1: "
            },
            {
              "text": "matrix_map",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "matrix_map",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "matrix_map\n  <fun>\n  [|[|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|];\n    [|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[|[|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|];\n  [|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|]|]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "matrix_map\n  <fun>\n  [|[|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|];\n    [|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[|[|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|];\n  [|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|]|]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "matrix_map\n  <fun>\n  [|[|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|];\n    [|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[|[|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|];\n  [|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|]|]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "matrix_map\n  <fun>\n  [|[|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|];\n    [|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[|[|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|];\n  [|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|]|]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "matrix_map\n  <fun>\n  [|[|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|];\n    [|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[|[|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|];\n  [|<poly>; <poly>; <poly>; <poly>|]; [|<poly>; <poly>; <poly>; <poly>|]|]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 8: "
            },
            {
              "text": "gagnant_dim_2",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "gagnant_dim_2",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2\n  [|[|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2\n  [|[|[|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|];\n      [|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|];\n      [|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|]|];\n    [|[|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|];\n      [|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|];\n      [|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|]|];\n    [|[|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|];\n      [|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|];\n      [|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 0)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2\n  [|[|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2\n  [|[|[|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2\n  [|[|[|[|Some 1; Some 0; Some 0|]; [|None; Some 1; Some 1|];\n        [|None; Some 1; Some 0|]|];\n      [|[|Some 1; Some 0; Some 0|]; [|Some 0; None; Some 1|];\n        [|None; Some 1; Some 1|]|];\n      [|[|Some 1; Some 0; None|]; [|Some 0; None; Some 0|];\n        [|None; Some 0; None|]|]|];\n    [|[|[|Some 0; Some 0; None|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 0; Some 1|]|];\n      [|[|Some 0; None; Some 1|]; [|Some 1; Some 1; None|];\n        [|Some 1; None; Some 1|]|];\n      [|[|Some 1; None; Some 1|]; [|None; Some 1; None|];\n        [|Some 0; Some 1; Some 1|]|]|];\n    [|[|[|Some 1; None; None|]; [|Some 1; Some 1; Some 1|];\n        [|Some 1; None; Some 1|]|];\n      [|[|Some 0; None; None|]; [|Some 0; Some 1; Some 1|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; Some 1; Some 1|]; [|Some 1; None; Some 0|];\n        [|Some 1; None; Some 0|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2\n  [|[|[|[|None; None; None|]; [|None; Some 0; Some 1|];\n        [|Some 1; Some 0; None|]|];\n      [|[|Some 1; None; Some 1|]; [|Some 0; None; Some 0|];\n        [|Some 1; Some 1; Some 1|]|];\n      [|[|Some 0; Some 1; None|]; [|Some 0; Some 0; None|];\n        [|None; Some 1; Some 1|]|]|];\n    [|[|[|None; None; Some 0|]; [|Some 1; None; Some 0|];\n        [|None; Some 1; Some 1|]|];\n      [|[|Some 0; None; Some 0|]; [|Some 0; Some 1; Some 1|];\n        [|Some 1; Some 1; Some 0|]|];\n      [|[|Some 1; None; Some 1|]; [|Some 1; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|None; Some 0; None|]; [|Some 1; Some 1; None|];\n        [|None; Some 0; None|]|];\n      [|[|Some 1; Some 1; Some 0|]; [|Some 1; None; None|];\n        [|None; Some 1; None|]|];\n      [|[|Some 1; None; Some 1|]; [|Some 0; Some 0; Some 1|];\n        [|None; None; None|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2\n  [|[|[|[|Some 0; None; Some 1|]; [|Some 0; Some 0; None|];\n        [|Some 1; Some 0; None|]|];\n      [|[|None; None; Some 1|]; [|Some 1; Some 1; Some 0|];\n        [|Some 1; Some 1; Some 1|]|];\n      [|[|None; Some 1; None|]; [|Some 1; Some 0; Some 0|];\n        [|Some 0; Some 1; None|]|]|];\n    [|[|[|Some 1; Some 1; Some 1|]; [|None; Some 1; None|];\n        [|Some 0; Some 1; Some 1|]|];\n      [|[|Some 1; Some 1; Some 1|]; [|None; Some 1; Some 1|];\n        [|Some 1; Some 1; Some 1|]|];\n      [|[|Some 1; None; None|]; [|Some 0; Some 0; Some 0|];\n        [|Some 1; None; None|]|]|];\n    [|[|[|Some 1; Some 1; Some 1|]; [|None; Some 0; Some 0|];\n        [|Some 1; Some 0; Some 1|]|];\n      [|[|None; Some 1; Some 1|]; [|Some 1; Some 1; Some 1|];\n        [|Some 1; None; Some 1|]|];\n      [|[|None; Some 1; Some 1|]; [|Some 0; None; Some 0|];\n        [|Some 1; Some 1; None|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2\n  [|[|[|[|Some 1; Some 1; Some 1|]; [|Some 1; Some 1; Some 0|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; Some 1; Some 0|]; [|Some 1; Some 0; Some 0|];\n        [|Some 1; None; Some 1|]|];\n      [|[|None; Some 1; None|]; [|Some 1; Some 1; Some 1|];\n        [|Some 1; Some 1; Some 1|]|]|];\n    [|[|[|Some 0; None; Some 1|]; [|Some 1; Some 1; Some 1|];\n        [|Some 1; Some 0; None|]|];\n      [|[|None; None; Some 1|]; [|Some 1; None; None|];\n        [|Some 1; Some 1; Some 1|]|];\n      [|[|Some 1; Some 1; None|]; [|Some 1; Some 0; None|];\n        [|Some 1; Some 1; Some 1|]|]|];\n    [|[|[|Some 1; Some 1; None|]; [|None; Some 1; Some 1|];\n        [|Some 1; Some 1; Some 1|]|];\n      [|[|Some 1; None; None|]; [|Some 0; Some 1; Some 1|];\n        [|Some 0; Some 1; Some 1|]|];\n      [|[|None; None; None|]; [|Some 0; Some 0; None|];\n        [|Some 1; None; None|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2\n  [|[|[|[|Some 1; Some 0; Some 1|]; [|Some 1; Some 0; Some 0|];\n        [|Some 1; None; None|]|];\n      [|[|None; Some 1; Some 1|]; [|Some 0; Some 1; Some 0|];\n        [|Some 0; None; Some 1|]|];\n      [|[|None; Some 0; Some 1|]; [|Some 1; None; None|];\n        [|None; None; None|]|]|];\n    [|[|[|None; Some 1; None|]; [|Some 0; Some 0; None|];\n        [|None; Some 1; None|]|];\n      [|[|Some 1; Some 1; Some 1|]; [|None; Some 1; Some 1|];\n        [|None; None; None|]|];\n      [|[|Some 0; Some 1; Some 0|]; [|None; Some 1; Some 1|];\n        [|Some 1; Some 0; None|]|]|];\n    [|[|[|None; Some 0; Some 1|]; [|Some 1; Some 1; Some 0|];\n        [|Some 0; Some 1; Some 1|]|];\n      [|[|None; Some 1; Some 1|]; [|Some 0; None; None|];\n        [|Some 0; None; Some 1|]|];\n      [|[|Some 1; None; Some 1|]; [|Some 1; Some 1; Some 0|];\n        [|Some 1; None; Some 0|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 9: "
            },
            {
              "text": "termine_dim_2",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "termine_dim_2",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2\n  [|[|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2\n  [|[|[|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|];\n      [|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|];\n      [|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|]|];\n    [|[|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|];\n      [|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|];\n      [|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|]|];\n    [|[|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|];\n      [|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|];\n      [|[|Some 0; Some 1; Some 0|]; [|Some 1; Some 0; Some 1|];\n        [|Some 0; Some 1; Some 0|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2\n  [|[|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|None; None; None|]; [|None; None; None|]; [|None; None; None|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2\n  [|[|[|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|];\n    [|[|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; None|];\n        [|None; None; Some 1|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2\n  [|[|[|[|Some 0; Some 1; None|]; [|Some 0; Some 0; None|];\n        [|Some 0; None; Some 1|]|];\n      [|[|None; Some 1; Some 1|]; [|Some 0; Some 1; Some 1|];\n        [|Some 1; Some 0; Some 1|]|];\n      [|[|Some 0; Some 0; None|]; [|None; None; None|];\n        [|Some 1; Some 0; Some 1|]|]|];\n    [|[|[|Some 0; None; None|]; [|Some 1; Some 1; Some 1|];\n        [|None; Some 0; Some 0|]|];\n      [|[|None; None; Some 0|]; [|Some 0; None; Some 1|];\n        [|Some 1; None; None|]|];\n      [|[|None; Some 0; None|]; [|None; Some 1; None|];\n        [|Some 1; Some 1; Some 1|]|]|];\n    [|[|[|None; Some 0; Some 1|]; [|None; Some 0; Some 0|];\n        [|Some 0; Some 0; Some 1|]|];\n      [|[|None; Some 0; Some 1|]; [|Some 1; Some 1; Some 1|];\n        [|Some 0; Some 0; None|]|];\n      [|[|Some 0; None; Some 1|]; [|Some 1; Some 1; None|];\n        [|Some 1; Some 1; Some 0|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2\n  [|[|[|[|Some 0; None; Some 1|]; [|Some 1; Some 1; None|];\n        [|Some 1; Some 0; Some 0|]|];\n      [|[|None; None; Some 1|]; [|Some 1; None; Some 0|];\n        [|Some 1; Some 0; Some 1|]|];\n      [|[|None; Some 0; Some 1|]; [|Some 0; Some 1; Some 1|];\n        [|Some 1; None; Some 1|]|]|];\n    [|[|[|None; None; Some 0|]; [|None; Some 1; Some 1|];\n        [|Some 1; None; Some 0|]|];\n      [|[|Some 1; Some 1; Some 1|]; [|None; None; None|];\n        [|Some 1; None; Some 1|]|];\n      [|[|Some 1; Some 1; Some 1|]; [|Some 1; None; Some 1|];\n        [|Some 0; Some 0; Some 1|]|]|];\n    [|[|[|None; Some 0; Some 1|]; [|None; Some 0; Some 1|];\n        [|Some 1; None; Some 0|]|];\n      [|[|Some 1; Some 1; Some 1|]; [|Some 0; None; None|];\n        [|Some 1; Some 1; None|]|];\n      [|[|None; None; Some 1|]; [|Some 1; None; Some 1|];\n        [|Some 1; Some 1; Some 1|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2\n  [|[|[|[|Some 1; Some 1; None|]; [|None; None; Some 1|];\n        [|Some 0; Some 1; None|]|];\n      [|[|Some 1; Some 1; Some 1|]; [|Some 1; None; Some 1|];\n        [|None; Some 1; None|]|];\n      [|[|Some 0; None; None|]; [|Some 0; Some 1; Some 1|];\n        [|None; Some 1; Some 1|]|]|];\n    [|[|[|None; Some 1; Some 0|]; [|None; Some 1; Some 1|];\n        [|Some 0; Some 1; Some 1|]|];\n      [|[|Some 1; Some 0; Some 1|]; [|Some 0; None; Some 1|];\n        [|None; None; Some 1|]|];\n      [|[|None; None; None|]; [|Some 0; None; Some 1|];\n        [|None; Some 0; Some 0|]|]|];\n    [|[|[|None; None; None|]; [|Some 1; Some 0; Some 0|];\n        [|Some 0; Some 1; Some 1|]|];\n      [|[|Some 1; None; Some 1|]; [|Some 1; None; Some 1|];\n        [|None; None; Some 0|]|];\n      [|[|Some 1; Some 1; Some 1|]; [|None; None; None|];\n        [|Some 0; None; Some 1|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2\n  [|[|[|[|Some 0; None; None|]; [|Some 1; Some 1; Some 0|];\n        [|None; Some 1; Some 0|]|];\n      [|[|Some 0; Some 0; Some 1|]; [|None; None; Some 1|];\n        [|Some 1; Some 1; Some 0|]|];\n      [|[|Some 1; Some 0; Some 1|]; [|Some 1; Some 1; Some 0|];\n        [|Some 1; None; None|]|]|];\n    [|[|[|Some 0; Some 1; None|]; [|Some 1; Some 1; Some 0|];\n        [|None; None; Some 0|]|];\n      [|[|None; None; None|]; [|None; Some 1; Some 1|];\n        [|Some 1; Some 1; None|]|];\n      [|[|Some 1; None; Some 1|]; [|None; Some 1; Some 1|];\n        [|None; Some 1; Some 0|]|]|];\n    [|[|[|Some 1; Some 1; None|]; [|Some 1; Some 1; None|];\n        [|Some 1; Some 1; Some 0|]|];\n      [|[|Some 1; None; None|]; [|None; None; Some 1|];\n        [|None; None; Some 1|]|];\n      [|[|Some 0; Some 1; Some 1|]; [|Some 1; Some 1; None|];\n        [|None; None; Some 1|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2\n  [|[|[|[|Some 1; Some 1; Some 1|]; [|None; Some 1; Some 1|];\n        [|None; Some 0; Some 1|]|];\n      [|[|None; Some 1; Some 1|]; [|Some 1; Some 1; Some 0|];\n        [|Some 0; Some 0; Some 1|]|];\n      [|[|Some 1; None; None|]; [|None; None; None|];\n        [|Some 0; None; Some 1|]|]|];\n    [|[|[|Some 1; None; None|]; [|Some 1; Some 0; Some 1|];\n        [|Some 1; Some 1; Some 0|]|];\n      [|[|None; None; None|]; [|Some 1; None; None|];\n        [|Some 1; None; Some 0|]|];\n      [|[|Some 0; Some 1; None|]; [|Some 1; Some 1; Some 1|];\n        [|None; Some 1; Some 1|]|]|];\n    [|[|[|Some 1; None; Some 1|]; [|Some 0; Some 0; Some 1|];\n        [|None; Some 1; Some 0|]|];\n      [|[|Some 1; Some 1; None|]; [|Some 1; Some 1; Some 1|];\n        [|Some 1; Some 0; None|]|];\n      [|[|Some 1; None; None|]; [|None; Some 1; Some 1|];\n        [|Some 1; Some 1; Some 1|]|]|]|]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1637524084.580581
    }
  }
}